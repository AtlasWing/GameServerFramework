// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/UserData.proto

#ifndef PROTOBUF_protocol_2fProto_2fUserData_2eproto__INCLUDED
#define PROTOBUF_protocol_2fProto_2fUserData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol/Proto/ItemData.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {
namespace user {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

class MainPackageBinary;
class EquipPackageBinary;
class TimeEndEffectData;
class UseTimesEffectData;
class MiscUserDataBinary;
class LoginSerializeBinary;
class PetDataSerializeBinary;
class UserSaveData;
class LogoutCallbackData;
class ChangeLogicExtendData;
class MessageSaveData;
class MessageData;
class PetData;
class PropData;
class PetEquipBinary;
class AllItemData;
class ItemColdData;
class ItemColdBinary;
class AllPackageBinary;
class SkillBuildData;
class BuildBaseData;
class UseBuildData;
class UseSkillData;
class UseSkillBinary;
class HaveSkillBinary;
class SkillData;
class UserUnlockWeaponData;
class UnlockPassiveSkillBarBinary;
class DuplBinary;
class DuplData;
class RealmData;
class GamblingDataBinary;
class GamblingDropItem;
class GamblingWillDropItem;
class StoneData;
class EquipPosData;
class EquipPosBinary;
class TrumpBinary;
class TrumpData;
class TrumpSkillData;
class UserRewardBinary;
class LoginSignRewardBinary;
class SummonRaffleBinary;
class MoneyDrawingBinary;
class BuyVitalityBinary;
class RechargeDataBinary;
class SignBinary;
class FunctionUnlockFlag;
class FunctionUnlockData;
class UserDataBinary;
class DiscoveryBinary;
class OfflineRewardData;
class DiscoveryData;
class GridData;
class UserRelationSaveData;
class WaitJoinClubData;
class ClubSaveData;
class VipTypeData;
class OfflineOpenVipData;
class VipBinary;
class WarDataBinary;
class FriendDataBinary;
class DuplDropBinary;
class DropItemData;
class DropEquipData;
class DropPetData;
class TaskBinary;
class MainTaskData;
class EquipTaskData;
class PetTaskData;
class TrumpTaskData;
class IntensifyTaskData;
class WingBinary;
class VipDataBinary;
class MatchDataBinary;

// ===================================================================

class MainPackageBinary : public ::google::protobuf::Message {
 public:
  MainPackageBinary();
  virtual ~MainPackageBinary();

  MainPackageBinary(const MainPackageBinary& from);

  inline MainPackageBinary& operator=(const MainPackageBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainPackageBinary& default_instance();

  void Swap(MainPackageBinary* other);

  // implements Message ----------------------------------------------

  MainPackageBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainPackageBinary& from);
  void MergeFrom(const MainPackageBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 packageID = 1;
  inline bool has_packageid() const;
  inline void clear_packageid();
  static const int kPackageIDFieldNumber = 1;
  inline ::google::protobuf::uint32 packageid() const;
  inline void set_packageid(::google::protobuf::uint32 value);

  // required uint32 capacity = 2;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 2;
  inline ::google::protobuf::uint32 capacity() const;
  inline void set_capacity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.MainPackageBinary)
 private:
  inline void set_has_packageid();
  inline void clear_has_packageid();
  inline void set_has_capacity();
  inline void clear_has_capacity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 packageid_;
  ::google::protobuf::uint32 capacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static MainPackageBinary* default_instance_;
};
// -------------------------------------------------------------------

class EquipPackageBinary : public ::google::protobuf::Message {
 public:
  EquipPackageBinary();
  virtual ~EquipPackageBinary();

  EquipPackageBinary(const EquipPackageBinary& from);

  inline EquipPackageBinary& operator=(const EquipPackageBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipPackageBinary& default_instance();

  void Swap(EquipPackageBinary* other);

  // implements Message ----------------------------------------------

  EquipPackageBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipPackageBinary& from);
  void MergeFrom(const EquipPackageBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.item.ItemBinary items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protocol::item::ItemBinary& items(int index) const;
  inline ::protocol::item::ItemBinary* mutable_items(int index);
  inline ::protocol::item::ItemBinary* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:protocol.user.EquipPackageBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static EquipPackageBinary* default_instance_;
};
// -------------------------------------------------------------------

class TimeEndEffectData : public ::google::protobuf::Message {
 public:
  TimeEndEffectData();
  virtual ~TimeEndEffectData();

  TimeEndEffectData(const TimeEndEffectData& from);

  inline TimeEndEffectData& operator=(const TimeEndEffectData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeEndEffectData& default_instance();

  void Swap(TimeEndEffectData* other);

  // implements Message ----------------------------------------------

  TimeEndEffectData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeEndEffectData& from);
  void MergeFrom(const TimeEndEffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 effectType = 1;
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffectTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 effecttype() const;
  inline void set_effecttype(::google::protobuf::uint32 value);

  // required uint32 endTimeInSec = 2;
  inline bool has_endtimeinsec() const;
  inline void clear_endtimeinsec();
  static const int kEndTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 endtimeinsec() const;
  inline void set_endtimeinsec(::google::protobuf::uint32 value);

  // optional uint32 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.TimeEndEffectData)
 private:
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_endtimeinsec();
  inline void clear_has_endtimeinsec();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 effecttype_;
  ::google::protobuf::uint32 endtimeinsec_;
  ::google::protobuf::uint32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static TimeEndEffectData* default_instance_;
};
// -------------------------------------------------------------------

class UseTimesEffectData : public ::google::protobuf::Message {
 public:
  UseTimesEffectData();
  virtual ~UseTimesEffectData();

  UseTimesEffectData(const UseTimesEffectData& from);

  inline UseTimesEffectData& operator=(const UseTimesEffectData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseTimesEffectData& default_instance();

  void Swap(UseTimesEffectData* other);

  // implements Message ----------------------------------------------

  UseTimesEffectData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseTimesEffectData& from);
  void MergeFrom(const UseTimesEffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 effectType = 1;
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffectTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 effecttype() const;
  inline void set_effecttype(::google::protobuf::uint32 value);

  // required uint32 useTimes = 2;
  inline bool has_usetimes() const;
  inline void clear_usetimes();
  static const int kUseTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 usetimes() const;
  inline void set_usetimes(::google::protobuf::uint32 value);

  // optional uint32 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.UseTimesEffectData)
 private:
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_usetimes();
  inline void clear_has_usetimes();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 effecttype_;
  ::google::protobuf::uint32 usetimes_;
  ::google::protobuf::uint32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UseTimesEffectData* default_instance_;
};
// -------------------------------------------------------------------

class MiscUserDataBinary : public ::google::protobuf::Message {
 public:
  MiscUserDataBinary();
  virtual ~MiscUserDataBinary();

  MiscUserDataBinary(const MiscUserDataBinary& from);

  inline MiscUserDataBinary& operator=(const MiscUserDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiscUserDataBinary& default_instance();

  void Swap(MiscUserDataBinary* other);

  // implements Message ----------------------------------------------

  MiscUserDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MiscUserDataBinary& from);
  void MergeFrom(const MiscUserDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 loginDayVec = 1;
  inline int logindayvec_size() const;
  inline void clear_logindayvec();
  static const int kLoginDayVecFieldNumber = 1;
  inline ::google::protobuf::uint32 logindayvec(int index) const;
  inline void set_logindayvec(int index, ::google::protobuf::uint32 value);
  inline void add_logindayvec(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      logindayvec() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_logindayvec();

  // repeated .protocol.user.TimeEndEffectData timeEndEffectData = 3;
  inline int timeendeffectdata_size() const;
  inline void clear_timeendeffectdata();
  static const int kTimeEndEffectDataFieldNumber = 3;
  inline const ::protocol::user::TimeEndEffectData& timeendeffectdata(int index) const;
  inline ::protocol::user::TimeEndEffectData* mutable_timeendeffectdata(int index);
  inline ::protocol::user::TimeEndEffectData* add_timeendeffectdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TimeEndEffectData >&
      timeendeffectdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TimeEndEffectData >*
      mutable_timeendeffectdata();

  // repeated .protocol.user.UseTimesEffectData useTimesEffectData = 4;
  inline int usetimeseffectdata_size() const;
  inline void clear_usetimeseffectdata();
  static const int kUseTimesEffectDataFieldNumber = 4;
  inline const ::protocol::user::UseTimesEffectData& usetimeseffectdata(int index) const;
  inline ::protocol::user::UseTimesEffectData* mutable_usetimeseffectdata(int index);
  inline ::protocol::user::UseTimesEffectData* add_usetimeseffectdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseTimesEffectData >&
      usetimeseffectdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseTimesEffectData >*
      mutable_usetimeseffectdata();

  // @@protoc_insertion_point(class_scope:protocol.user.MiscUserDataBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > logindayvec_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::TimeEndEffectData > timeendeffectdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::UseTimesEffectData > usetimeseffectdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static MiscUserDataBinary* default_instance_;
};
// -------------------------------------------------------------------

class LoginSerializeBinary : public ::google::protobuf::Message {
 public:
  LoginSerializeBinary();
  virtual ~LoginSerializeBinary();

  LoginSerializeBinary(const LoginSerializeBinary& from);

  inline LoginSerializeBinary& operator=(const LoginSerializeBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSerializeBinary& default_instance();

  void Swap(LoginSerializeBinary* other);

  // implements Message ----------------------------------------------

  LoginSerializeBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginSerializeBinary& from);
  void MergeFrom(const LoginSerializeBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes packageBinary = 1;
  inline bool has_packagebinary() const;
  inline void clear_packagebinary();
  static const int kPackageBinaryFieldNumber = 1;
  inline const ::std::string& packagebinary() const;
  inline void set_packagebinary(const ::std::string& value);
  inline void set_packagebinary(const char* value);
  inline void set_packagebinary(const void* value, size_t size);
  inline ::std::string* mutable_packagebinary();
  inline ::std::string* release_packagebinary();
  inline void set_allocated_packagebinary(::std::string* packagebinary);

  // optional bytes miscBinary = 2;
  inline bool has_miscbinary() const;
  inline void clear_miscbinary();
  static const int kMiscBinaryFieldNumber = 2;
  inline const ::std::string& miscbinary() const;
  inline void set_miscbinary(const ::std::string& value);
  inline void set_miscbinary(const char* value);
  inline void set_miscbinary(const void* value, size_t size);
  inline ::std::string* mutable_miscbinary();
  inline ::std::string* release_miscbinary();
  inline void set_allocated_miscbinary(::std::string* miscbinary);

  // optional bytes userDataBinary = 3;
  inline bool has_userdatabinary() const;
  inline void clear_userdatabinary();
  static const int kUserDataBinaryFieldNumber = 3;
  inline const ::std::string& userdatabinary() const;
  inline void set_userdatabinary(const ::std::string& value);
  inline void set_userdatabinary(const char* value);
  inline void set_userdatabinary(const void* value, size_t size);
  inline ::std::string* mutable_userdatabinary();
  inline ::std::string* release_userdatabinary();
  inline void set_allocated_userdatabinary(::std::string* userdatabinary);

  // optional uint32 rechargeMoney = 4;
  inline bool has_rechargemoney() const;
  inline void clear_rechargemoney();
  static const int kRechargeMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 rechargemoney() const;
  inline void set_rechargemoney(::google::protobuf::uint32 value);

  // optional bytes petDataBinary = 5;
  inline bool has_petdatabinary() const;
  inline void clear_petdatabinary();
  static const int kPetDataBinaryFieldNumber = 5;
  inline const ::std::string& petdatabinary() const;
  inline void set_petdatabinary(const ::std::string& value);
  inline void set_petdatabinary(const char* value);
  inline void set_petdatabinary(const void* value, size_t size);
  inline ::std::string* mutable_petdatabinary();
  inline ::std::string* release_petdatabinary();
  inline void set_allocated_petdatabinary(::std::string* petdatabinary);

  // optional bytes itemColdBinary = 6;
  inline bool has_itemcoldbinary() const;
  inline void clear_itemcoldbinary();
  static const int kItemColdBinaryFieldNumber = 6;
  inline const ::std::string& itemcoldbinary() const;
  inline void set_itemcoldbinary(const ::std::string& value);
  inline void set_itemcoldbinary(const char* value);
  inline void set_itemcoldbinary(const void* value, size_t size);
  inline ::std::string* mutable_itemcoldbinary();
  inline ::std::string* release_itemcoldbinary();
  inline void set_allocated_itemcoldbinary(::std::string* itemcoldbinary);

  // optional bytes useSkillBinary = 7;
  inline bool has_useskillbinary() const;
  inline void clear_useskillbinary();
  static const int kUseSkillBinaryFieldNumber = 7;
  inline const ::std::string& useskillbinary() const;
  inline void set_useskillbinary(const ::std::string& value);
  inline void set_useskillbinary(const char* value);
  inline void set_useskillbinary(const void* value, size_t size);
  inline ::std::string* mutable_useskillbinary();
  inline ::std::string* release_useskillbinary();
  inline void set_allocated_useskillbinary(::std::string* useskillbinary);

  // optional bytes haveSkillBinary = 8;
  inline bool has_haveskillbinary() const;
  inline void clear_haveskillbinary();
  static const int kHaveSkillBinaryFieldNumber = 8;
  inline const ::std::string& haveskillbinary() const;
  inline void set_haveskillbinary(const ::std::string& value);
  inline void set_haveskillbinary(const char* value);
  inline void set_haveskillbinary(const void* value, size_t size);
  inline ::std::string* mutable_haveskillbinary();
  inline ::std::string* release_haveskillbinary();
  inline void set_allocated_haveskillbinary(::std::string* haveskillbinary);

  // optional bytes havePassiveBinary = 9;
  inline bool has_havepassivebinary() const;
  inline void clear_havepassivebinary();
  static const int kHavePassiveBinaryFieldNumber = 9;
  inline const ::std::string& havepassivebinary() const;
  inline void set_havepassivebinary(const ::std::string& value);
  inline void set_havepassivebinary(const char* value);
  inline void set_havepassivebinary(const void* value, size_t size);
  inline ::std::string* mutable_havepassivebinary();
  inline ::std::string* release_havepassivebinary();
  inline void set_allocated_havepassivebinary(::std::string* havepassivebinary);

  // optional bytes duplBinary = 10;
  inline bool has_duplbinary() const;
  inline void clear_duplbinary();
  static const int kDuplBinaryFieldNumber = 10;
  inline const ::std::string& duplbinary() const;
  inline void set_duplbinary(const ::std::string& value);
  inline void set_duplbinary(const char* value);
  inline void set_duplbinary(const void* value, size_t size);
  inline ::std::string* mutable_duplbinary();
  inline ::std::string* release_duplbinary();
  inline void set_allocated_duplbinary(::std::string* duplbinary);

  // optional bytes equipPosBinary = 11;
  inline bool has_equipposbinary() const;
  inline void clear_equipposbinary();
  static const int kEquipPosBinaryFieldNumber = 11;
  inline const ::std::string& equipposbinary() const;
  inline void set_equipposbinary(const ::std::string& value);
  inline void set_equipposbinary(const char* value);
  inline void set_equipposbinary(const void* value, size_t size);
  inline ::std::string* mutable_equipposbinary();
  inline ::std::string* release_equipposbinary();
  inline void set_allocated_equipposbinary(::std::string* equipposbinary);

  // optional bytes trumpBinary = 12;
  inline bool has_trumpbinary() const;
  inline void clear_trumpbinary();
  static const int kTrumpBinaryFieldNumber = 12;
  inline const ::std::string& trumpbinary() const;
  inline void set_trumpbinary(const ::std::string& value);
  inline void set_trumpbinary(const char* value);
  inline void set_trumpbinary(const void* value, size_t size);
  inline ::std::string* mutable_trumpbinary();
  inline ::std::string* release_trumpbinary();
  inline void set_allocated_trumpbinary(::std::string* trumpbinary);

  // optional bytes rewardBinary = 13;
  inline bool has_rewardbinary() const;
  inline void clear_rewardbinary();
  static const int kRewardBinaryFieldNumber = 13;
  inline const ::std::string& rewardbinary() const;
  inline void set_rewardbinary(const ::std::string& value);
  inline void set_rewardbinary(const char* value);
  inline void set_rewardbinary(const void* value, size_t size);
  inline ::std::string* mutable_rewardbinary();
  inline ::std::string* release_rewardbinary();
  inline void set_allocated_rewardbinary(::std::string* rewardbinary);

  // optional bytes discoveryBinary = 14;
  inline bool has_discoverybinary() const;
  inline void clear_discoverybinary();
  static const int kDiscoveryBinaryFieldNumber = 14;
  inline const ::std::string& discoverybinary() const;
  inline void set_discoverybinary(const ::std::string& value);
  inline void set_discoverybinary(const char* value);
  inline void set_discoverybinary(const void* value, size_t size);
  inline ::std::string* mutable_discoverybinary();
  inline ::std::string* release_discoverybinary();
  inline void set_allocated_discoverybinary(::std::string* discoverybinary);

  // optional bytes friendDataBinary = 15;
  inline bool has_frienddatabinary() const;
  inline void clear_frienddatabinary();
  static const int kFriendDataBinaryFieldNumber = 15;
  inline const ::std::string& frienddatabinary() const;
  inline void set_frienddatabinary(const ::std::string& value);
  inline void set_frienddatabinary(const char* value);
  inline void set_frienddatabinary(const void* value, size_t size);
  inline ::std::string* mutable_frienddatabinary();
  inline ::std::string* release_frienddatabinary();
  inline void set_allocated_frienddatabinary(::std::string* frienddatabinary);

  // optional bytes duplDropBinary = 16;
  inline bool has_dupldropbinary() const;
  inline void clear_dupldropbinary();
  static const int kDuplDropBinaryFieldNumber = 16;
  inline const ::std::string& dupldropbinary() const;
  inline void set_dupldropbinary(const ::std::string& value);
  inline void set_dupldropbinary(const char* value);
  inline void set_dupldropbinary(const void* value, size_t size);
  inline ::std::string* mutable_dupldropbinary();
  inline ::std::string* release_dupldropbinary();
  inline void set_allocated_dupldropbinary(::std::string* dupldropbinary);

  // optional bytes mysteryShopBinary = 17;
  inline bool has_mysteryshopbinary() const;
  inline void clear_mysteryshopbinary();
  static const int kMysteryShopBinaryFieldNumber = 17;
  inline const ::std::string& mysteryshopbinary() const;
  inline void set_mysteryshopbinary(const ::std::string& value);
  inline void set_mysteryshopbinary(const char* value);
  inline void set_mysteryshopbinary(const void* value, size_t size);
  inline ::std::string* mutable_mysteryshopbinary();
  inline ::std::string* release_mysteryshopbinary();
  inline void set_allocated_mysteryshopbinary(::std::string* mysteryshopbinary);

  // optional bytes taskBinary = 18;
  inline bool has_taskbinary() const;
  inline void clear_taskbinary();
  static const int kTaskBinaryFieldNumber = 18;
  inline const ::std::string& taskbinary() const;
  inline void set_taskbinary(const ::std::string& value);
  inline void set_taskbinary(const char* value);
  inline void set_taskbinary(const void* value, size_t size);
  inline ::std::string* mutable_taskbinary();
  inline ::std::string* release_taskbinary();
  inline void set_allocated_taskbinary(::std::string* taskbinary);

  // optional bytes matchDataBinary = 19;
  inline bool has_matchdatabinary() const;
  inline void clear_matchdatabinary();
  static const int kMatchDataBinaryFieldNumber = 19;
  inline const ::std::string& matchdatabinary() const;
  inline void set_matchdatabinary(const ::std::string& value);
  inline void set_matchdatabinary(const char* value);
  inline void set_matchdatabinary(const void* value, size_t size);
  inline ::std::string* mutable_matchdatabinary();
  inline ::std::string* release_matchdatabinary();
  inline void set_allocated_matchdatabinary(::std::string* matchdatabinary);

  // optional bytes wingBinary = 20;
  inline bool has_wingbinary() const;
  inline void clear_wingbinary();
  static const int kWingBinaryFieldNumber = 20;
  inline const ::std::string& wingbinary() const;
  inline void set_wingbinary(const ::std::string& value);
  inline void set_wingbinary(const char* value);
  inline void set_wingbinary(const void* value, size_t size);
  inline ::std::string* mutable_wingbinary();
  inline ::std::string* release_wingbinary();
  inline void set_allocated_wingbinary(::std::string* wingbinary);

  // optional bytes vipDataBinary = 21;
  inline bool has_vipdatabinary() const;
  inline void clear_vipdatabinary();
  static const int kVipDataBinaryFieldNumber = 21;
  inline const ::std::string& vipdatabinary() const;
  inline void set_vipdatabinary(const ::std::string& value);
  inline void set_vipdatabinary(const char* value);
  inline void set_vipdatabinary(const void* value, size_t size);
  inline ::std::string* mutable_vipdatabinary();
  inline ::std::string* release_vipdatabinary();
  inline void set_allocated_vipdatabinary(::std::string* vipdatabinary);

  // @@protoc_insertion_point(class_scope:protocol.user.LoginSerializeBinary)
 private:
  inline void set_has_packagebinary();
  inline void clear_has_packagebinary();
  inline void set_has_miscbinary();
  inline void clear_has_miscbinary();
  inline void set_has_userdatabinary();
  inline void clear_has_userdatabinary();
  inline void set_has_rechargemoney();
  inline void clear_has_rechargemoney();
  inline void set_has_petdatabinary();
  inline void clear_has_petdatabinary();
  inline void set_has_itemcoldbinary();
  inline void clear_has_itemcoldbinary();
  inline void set_has_useskillbinary();
  inline void clear_has_useskillbinary();
  inline void set_has_haveskillbinary();
  inline void clear_has_haveskillbinary();
  inline void set_has_havepassivebinary();
  inline void clear_has_havepassivebinary();
  inline void set_has_duplbinary();
  inline void clear_has_duplbinary();
  inline void set_has_equipposbinary();
  inline void clear_has_equipposbinary();
  inline void set_has_trumpbinary();
  inline void clear_has_trumpbinary();
  inline void set_has_rewardbinary();
  inline void clear_has_rewardbinary();
  inline void set_has_discoverybinary();
  inline void clear_has_discoverybinary();
  inline void set_has_frienddatabinary();
  inline void clear_has_frienddatabinary();
  inline void set_has_dupldropbinary();
  inline void clear_has_dupldropbinary();
  inline void set_has_mysteryshopbinary();
  inline void clear_has_mysteryshopbinary();
  inline void set_has_taskbinary();
  inline void clear_has_taskbinary();
  inline void set_has_matchdatabinary();
  inline void clear_has_matchdatabinary();
  inline void set_has_wingbinary();
  inline void clear_has_wingbinary();
  inline void set_has_vipdatabinary();
  inline void clear_has_vipdatabinary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* packagebinary_;
  ::std::string* miscbinary_;
  ::std::string* userdatabinary_;
  ::std::string* petdatabinary_;
  ::std::string* itemcoldbinary_;
  ::std::string* useskillbinary_;
  ::std::string* haveskillbinary_;
  ::std::string* havepassivebinary_;
  ::std::string* duplbinary_;
  ::std::string* equipposbinary_;
  ::std::string* trumpbinary_;
  ::std::string* rewardbinary_;
  ::std::string* discoverybinary_;
  ::std::string* frienddatabinary_;
  ::std::string* dupldropbinary_;
  ::std::string* mysteryshopbinary_;
  ::std::string* taskbinary_;
  ::std::string* matchdatabinary_;
  ::std::string* wingbinary_;
  ::std::string* vipdatabinary_;
  ::google::protobuf::uint32 rechargemoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static LoginSerializeBinary* default_instance_;
};
// -------------------------------------------------------------------

class PetDataSerializeBinary : public ::google::protobuf::Message {
 public:
  PetDataSerializeBinary();
  virtual ~PetDataSerializeBinary();

  PetDataSerializeBinary(const PetDataSerializeBinary& from);

  inline PetDataSerializeBinary& operator=(const PetDataSerializeBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetDataSerializeBinary& default_instance();

  void Swap(PetDataSerializeBinary* other);

  // implements Message ----------------------------------------------

  PetDataSerializeBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetDataSerializeBinary& from);
  void MergeFrom(const PetDataSerializeBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.PetData petData = 1;
  inline int petdata_size() const;
  inline void clear_petdata();
  static const int kPetDataFieldNumber = 1;
  inline const ::protocol::user::PetData& petdata(int index) const;
  inline ::protocol::user::PetData* mutable_petdata(int index);
  inline ::protocol::user::PetData* add_petdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::PetData >&
      petdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::PetData >*
      mutable_petdata();

  // required uint32 totalFightPower = 2;
  inline bool has_totalfightpower() const;
  inline void clear_totalfightpower();
  static const int kTotalFightPowerFieldNumber = 2;
  inline ::google::protobuf::uint32 totalfightpower() const;
  inline void set_totalfightpower(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.PetDataSerializeBinary)
 private:
  inline void set_has_totalfightpower();
  inline void clear_has_totalfightpower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::PetData > petdata_;
  ::google::protobuf::uint32 totalfightpower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static PetDataSerializeBinary* default_instance_;
};
// -------------------------------------------------------------------

class UserSaveData : public ::google::protobuf::Message {
 public:
  UserSaveData();
  virtual ~UserSaveData();

  UserSaveData(const UserSaveData& from);

  inline UserSaveData& operator=(const UserSaveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSaveData& default_instance();

  void Swap(UserSaveData* other);

  // implements Message ----------------------------------------------

  UserSaveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSaveData& from);
  void MergeFrom(const UserSaveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes packageBinary = 1;
  inline bool has_packagebinary() const;
  inline void clear_packagebinary();
  static const int kPackageBinaryFieldNumber = 1;
  inline const ::std::string& packagebinary() const;
  inline void set_packagebinary(const ::std::string& value);
  inline void set_packagebinary(const char* value);
  inline void set_packagebinary(const void* value, size_t size);
  inline ::std::string* mutable_packagebinary();
  inline ::std::string* release_packagebinary();
  inline void set_allocated_packagebinary(::std::string* packagebinary);

  // optional bytes miscBinary = 2;
  inline bool has_miscbinary() const;
  inline void clear_miscbinary();
  static const int kMiscBinaryFieldNumber = 2;
  inline const ::std::string& miscbinary() const;
  inline void set_miscbinary(const ::std::string& value);
  inline void set_miscbinary(const char* value);
  inline void set_miscbinary(const void* value, size_t size);
  inline ::std::string* mutable_miscbinary();
  inline ::std::string* release_miscbinary();
  inline void set_allocated_miscbinary(::std::string* miscbinary);

  // optional bytes userDataBinary = 3;
  inline bool has_userdatabinary() const;
  inline void clear_userdatabinary();
  static const int kUserDataBinaryFieldNumber = 3;
  inline const ::std::string& userdatabinary() const;
  inline void set_userdatabinary(const ::std::string& value);
  inline void set_userdatabinary(const char* value);
  inline void set_userdatabinary(const void* value, size_t size);
  inline ::std::string* mutable_userdatabinary();
  inline ::std::string* release_userdatabinary();
  inline void set_allocated_userdatabinary(::std::string* userdatabinary);

  // optional uint32 rechargeMoney = 4;
  inline bool has_rechargemoney() const;
  inline void clear_rechargemoney();
  static const int kRechargeMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 rechargemoney() const;
  inline void set_rechargemoney(::google::protobuf::uint32 value);

  // optional uint32 curExp = 5;
  inline bool has_curexp() const;
  inline void clear_curexp();
  static const int kCurExpFieldNumber = 5;
  inline ::google::protobuf::uint32 curexp() const;
  inline void set_curexp(::google::protobuf::uint32 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 bitMask = 8;
  inline bool has_bitmask() const;
  inline void clear_bitmask();
  static const int kBitMaskFieldNumber = 8;
  inline ::google::protobuf::uint32 bitmask() const;
  inline void set_bitmask(::google::protobuf::uint32 value);

  // optional uint32 vitality = 9;
  inline bool has_vitality() const;
  inline void clear_vitality();
  static const int kVitalityFieldNumber = 9;
  inline ::google::protobuf::uint32 vitality() const;
  inline void set_vitality(::google::protobuf::uint32 value);

  // optional uint32 skillPoint = 10;
  inline bool has_skillpoint() const;
  inline void clear_skillpoint();
  static const int kSkillPointFieldNumber = 10;
  inline ::google::protobuf::uint32 skillpoint() const;
  inline void set_skillpoint(::google::protobuf::uint32 value);

  // optional bytes itemColdBinary = 11;
  inline bool has_itemcoldbinary() const;
  inline void clear_itemcoldbinary();
  static const int kItemColdBinaryFieldNumber = 11;
  inline const ::std::string& itemcoldbinary() const;
  inline void set_itemcoldbinary(const ::std::string& value);
  inline void set_itemcoldbinary(const char* value);
  inline void set_itemcoldbinary(const void* value, size_t size);
  inline ::std::string* mutable_itemcoldbinary();
  inline ::std::string* release_itemcoldbinary();
  inline void set_allocated_itemcoldbinary(::std::string* itemcoldbinary);

  // optional uint32 silver = 12;
  inline bool has_silver() const;
  inline void clear_silver();
  static const int kSilverFieldNumber = 12;
  inline ::google::protobuf::uint32 silver() const;
  inline void set_silver(::google::protobuf::uint32 value);

  // optional uint32 diamond = 13;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 13;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // optional uint32 bindDiamond = 14;
  inline bool has_binddiamond() const;
  inline void clear_binddiamond();
  static const int kBindDiamondFieldNumber = 14;
  inline ::google::protobuf::uint32 binddiamond() const;
  inline void set_binddiamond(::google::protobuf::uint32 value);

  // optional bytes useSkillBinary = 15;
  inline bool has_useskillbinary() const;
  inline void clear_useskillbinary();
  static const int kUseSkillBinaryFieldNumber = 15;
  inline const ::std::string& useskillbinary() const;
  inline void set_useskillbinary(const ::std::string& value);
  inline void set_useskillbinary(const char* value);
  inline void set_useskillbinary(const void* value, size_t size);
  inline ::std::string* mutable_useskillbinary();
  inline ::std::string* release_useskillbinary();
  inline void set_allocated_useskillbinary(::std::string* useskillbinary);

  // optional bytes haveSkillBinary = 16;
  inline bool has_haveskillbinary() const;
  inline void clear_haveskillbinary();
  static const int kHaveSkillBinaryFieldNumber = 16;
  inline const ::std::string& haveskillbinary() const;
  inline void set_haveskillbinary(const ::std::string& value);
  inline void set_haveskillbinary(const char* value);
  inline void set_haveskillbinary(const void* value, size_t size);
  inline ::std::string* mutable_haveskillbinary();
  inline ::std::string* release_haveskillbinary();
  inline void set_allocated_haveskillbinary(::std::string* haveskillbinary);

  // optional bytes havePassiveBinary = 17;
  inline bool has_havepassivebinary() const;
  inline void clear_havepassivebinary();
  static const int kHavePassiveBinaryFieldNumber = 17;
  inline const ::std::string& havepassivebinary() const;
  inline void set_havepassivebinary(const ::std::string& value);
  inline void set_havepassivebinary(const char* value);
  inline void set_havepassivebinary(const void* value, size_t size);
  inline ::std::string* mutable_havepassivebinary();
  inline ::std::string* release_havepassivebinary();
  inline void set_allocated_havepassivebinary(::std::string* havepassivebinary);

  // optional bytes unlockPetData = 18;
  inline bool has_unlockpetdata() const;
  inline void clear_unlockpetdata();
  static const int kUnlockPetDataFieldNumber = 18;
  inline const ::std::string& unlockpetdata() const;
  inline void set_unlockpetdata(const ::std::string& value);
  inline void set_unlockpetdata(const char* value);
  inline void set_unlockpetdata(const void* value, size_t size);
  inline ::std::string* mutable_unlockpetdata();
  inline ::std::string* release_unlockpetdata();
  inline void set_allocated_unlockpetdata(::std::string* unlockpetdata);

  // optional bytes duplBinary = 19;
  inline bool has_duplbinary() const;
  inline void clear_duplbinary();
  static const int kDuplBinaryFieldNumber = 19;
  inline const ::std::string& duplbinary() const;
  inline void set_duplbinary(const ::std::string& value);
  inline void set_duplbinary(const char* value);
  inline void set_duplbinary(const void* value, size_t size);
  inline ::std::string* mutable_duplbinary();
  inline ::std::string* release_duplbinary();
  inline void set_allocated_duplbinary(::std::string* duplbinary);

  // optional bytes equipPosBinary = 20;
  inline bool has_equipposbinary() const;
  inline void clear_equipposbinary();
  static const int kEquipPosBinaryFieldNumber = 20;
  inline const ::std::string& equipposbinary() const;
  inline void set_equipposbinary(const ::std::string& value);
  inline void set_equipposbinary(const char* value);
  inline void set_equipposbinary(const void* value, size_t size);
  inline ::std::string* mutable_equipposbinary();
  inline ::std::string* release_equipposbinary();
  inline void set_allocated_equipposbinary(::std::string* equipposbinary);

  // optional uint32 gmLevel = 21;
  inline bool has_gmlevel() const;
  inline void clear_gmlevel();
  static const int kGmLevelFieldNumber = 21;
  inline ::google::protobuf::uint32 gmlevel() const;
  inline void set_gmlevel(::google::protobuf::uint32 value);

  // optional bytes trumpBinary = 22;
  inline bool has_trumpbinary() const;
  inline void clear_trumpbinary();
  static const int kTrumpBinaryFieldNumber = 22;
  inline const ::std::string& trumpbinary() const;
  inline void set_trumpbinary(const ::std::string& value);
  inline void set_trumpbinary(const char* value);
  inline void set_trumpbinary(const void* value, size_t size);
  inline ::std::string* mutable_trumpbinary();
  inline ::std::string* release_trumpbinary();
  inline void set_allocated_trumpbinary(::std::string* trumpbinary);

  // optional bytes rewardBinary = 23;
  inline bool has_rewardbinary() const;
  inline void clear_rewardbinary();
  static const int kRewardBinaryFieldNumber = 23;
  inline const ::std::string& rewardbinary() const;
  inline void set_rewardbinary(const ::std::string& value);
  inline void set_rewardbinary(const char* value);
  inline void set_rewardbinary(const void* value, size_t size);
  inline ::std::string* mutable_rewardbinary();
  inline ::std::string* release_rewardbinary();
  inline void set_allocated_rewardbinary(::std::string* rewardbinary);

  // optional bytes discoveryBinary = 24;
  inline bool has_discoverybinary() const;
  inline void clear_discoverybinary();
  static const int kDiscoveryBinaryFieldNumber = 24;
  inline const ::std::string& discoverybinary() const;
  inline void set_discoverybinary(const ::std::string& value);
  inline void set_discoverybinary(const char* value);
  inline void set_discoverybinary(const void* value, size_t size);
  inline ::std::string* mutable_discoverybinary();
  inline ::std::string* release_discoverybinary();
  inline void set_allocated_discoverybinary(::std::string* discoverybinary);

  // optional uint32 monthCardStopTime = 25;
  inline bool has_monthcardstoptime() const;
  inline void clear_monthcardstoptime();
  static const int kMonthCardStopTimeFieldNumber = 25;
  inline ::google::protobuf::uint32 monthcardstoptime() const;
  inline void set_monthcardstoptime(::google::protobuf::uint32 value);

  // optional bytes friendDataBinary = 26;
  inline bool has_frienddatabinary() const;
  inline void clear_frienddatabinary();
  static const int kFriendDataBinaryFieldNumber = 26;
  inline const ::std::string& frienddatabinary() const;
  inline void set_frienddatabinary(const ::std::string& value);
  inline void set_frienddatabinary(const char* value);
  inline void set_frienddatabinary(const void* value, size_t size);
  inline ::std::string* mutable_frienddatabinary();
  inline ::std::string* release_frienddatabinary();
  inline void set_allocated_frienddatabinary(::std::string* frienddatabinary);

  // optional bytes mysteryShopBinary = 27;
  inline bool has_mysteryshopbinary() const;
  inline void clear_mysteryshopbinary();
  static const int kMysteryShopBinaryFieldNumber = 27;
  inline const ::std::string& mysteryshopbinary() const;
  inline void set_mysteryshopbinary(const ::std::string& value);
  inline void set_mysteryshopbinary(const char* value);
  inline void set_mysteryshopbinary(const void* value, size_t size);
  inline ::std::string* mutable_mysteryshopbinary();
  inline ::std::string* release_mysteryshopbinary();
  inline void set_allocated_mysteryshopbinary(::std::string* mysteryshopbinary);

  // optional bytes taskBinary = 28;
  inline bool has_taskbinary() const;
  inline void clear_taskbinary();
  static const int kTaskBinaryFieldNumber = 28;
  inline const ::std::string& taskbinary() const;
  inline void set_taskbinary(const ::std::string& value);
  inline void set_taskbinary(const char* value);
  inline void set_taskbinary(const void* value, size_t size);
  inline ::std::string* mutable_taskbinary();
  inline ::std::string* release_taskbinary();
  inline void set_allocated_taskbinary(::std::string* taskbinary);

  // optional uint32 thoughtValue = 29;
  inline bool has_thoughtvalue() const;
  inline void clear_thoughtvalue();
  static const int kThoughtValueFieldNumber = 29;
  inline ::google::protobuf::uint32 thoughtvalue() const;
  inline void set_thoughtvalue(::google::protobuf::uint32 value);

  // optional uint32 fightPower = 30;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightPowerFieldNumber = 30;
  inline ::google::protobuf::uint32 fightpower() const;
  inline void set_fightpower(::google::protobuf::uint32 value);

  // optional bytes matchDataBinary = 31;
  inline bool has_matchdatabinary() const;
  inline void clear_matchdatabinary();
  static const int kMatchDataBinaryFieldNumber = 31;
  inline const ::std::string& matchdatabinary() const;
  inline void set_matchdatabinary(const ::std::string& value);
  inline void set_matchdatabinary(const char* value);
  inline void set_matchdatabinary(const void* value, size_t size);
  inline ::std::string* mutable_matchdatabinary();
  inline ::std::string* release_matchdatabinary();
  inline void set_allocated_matchdatabinary(::std::string* matchdatabinary);

  // optional bytes wingBinary = 32;
  inline bool has_wingbinary() const;
  inline void clear_wingbinary();
  static const int kWingBinaryFieldNumber = 32;
  inline const ::std::string& wingbinary() const;
  inline void set_wingbinary(const ::std::string& value);
  inline void set_wingbinary(const char* value);
  inline void set_wingbinary(const void* value, size_t size);
  inline ::std::string* mutable_wingbinary();
  inline ::std::string* release_wingbinary();
  inline void set_allocated_wingbinary(::std::string* wingbinary);

  // optional uint32 honorPoints = 43;
  inline bool has_honorpoints() const;
  inline void clear_honorpoints();
  static const int kHonorPointsFieldNumber = 43;
  inline ::google::protobuf::uint32 honorpoints() const;
  inline void set_honorpoints(::google::protobuf::uint32 value);

  // optional uint32 vipExp = 44;
  inline bool has_vipexp() const;
  inline void clear_vipexp();
  static const int kVipExpFieldNumber = 44;
  inline ::google::protobuf::uint32 vipexp() const;
  inline void set_vipexp(::google::protobuf::uint32 value);

  // optional uint32 vipLevel = 45;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 45;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional bytes vipDataBinary = 46;
  inline bool has_vipdatabinary() const;
  inline void clear_vipdatabinary();
  static const int kVipDataBinaryFieldNumber = 46;
  inline const ::std::string& vipdatabinary() const;
  inline void set_vipdatabinary(const ::std::string& value);
  inline void set_vipdatabinary(const char* value);
  inline void set_vipdatabinary(const void* value, size_t size);
  inline ::std::string* mutable_vipdatabinary();
  inline ::std::string* release_vipdatabinary();
  inline void set_allocated_vipdatabinary(::std::string* vipdatabinary);

  // optional uint32 clubPoints = 47;
  inline bool has_clubpoints() const;
  inline void clear_clubpoints();
  static const int kClubPointsFieldNumber = 47;
  inline ::google::protobuf::uint32 clubpoints() const;
  inline void set_clubpoints(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.UserSaveData)
 private:
  inline void set_has_packagebinary();
  inline void clear_has_packagebinary();
  inline void set_has_miscbinary();
  inline void clear_has_miscbinary();
  inline void set_has_userdatabinary();
  inline void clear_has_userdatabinary();
  inline void set_has_rechargemoney();
  inline void clear_has_rechargemoney();
  inline void set_has_curexp();
  inline void clear_has_curexp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_bitmask();
  inline void clear_has_bitmask();
  inline void set_has_vitality();
  inline void clear_has_vitality();
  inline void set_has_skillpoint();
  inline void clear_has_skillpoint();
  inline void set_has_itemcoldbinary();
  inline void clear_has_itemcoldbinary();
  inline void set_has_silver();
  inline void clear_has_silver();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_binddiamond();
  inline void clear_has_binddiamond();
  inline void set_has_useskillbinary();
  inline void clear_has_useskillbinary();
  inline void set_has_haveskillbinary();
  inline void clear_has_haveskillbinary();
  inline void set_has_havepassivebinary();
  inline void clear_has_havepassivebinary();
  inline void set_has_unlockpetdata();
  inline void clear_has_unlockpetdata();
  inline void set_has_duplbinary();
  inline void clear_has_duplbinary();
  inline void set_has_equipposbinary();
  inline void clear_has_equipposbinary();
  inline void set_has_gmlevel();
  inline void clear_has_gmlevel();
  inline void set_has_trumpbinary();
  inline void clear_has_trumpbinary();
  inline void set_has_rewardbinary();
  inline void clear_has_rewardbinary();
  inline void set_has_discoverybinary();
  inline void clear_has_discoverybinary();
  inline void set_has_monthcardstoptime();
  inline void clear_has_monthcardstoptime();
  inline void set_has_frienddatabinary();
  inline void clear_has_frienddatabinary();
  inline void set_has_mysteryshopbinary();
  inline void clear_has_mysteryshopbinary();
  inline void set_has_taskbinary();
  inline void clear_has_taskbinary();
  inline void set_has_thoughtvalue();
  inline void clear_has_thoughtvalue();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  inline void set_has_matchdatabinary();
  inline void clear_has_matchdatabinary();
  inline void set_has_wingbinary();
  inline void clear_has_wingbinary();
  inline void set_has_honorpoints();
  inline void clear_has_honorpoints();
  inline void set_has_vipexp();
  inline void clear_has_vipexp();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_vipdatabinary();
  inline void clear_has_vipdatabinary();
  inline void set_has_clubpoints();
  inline void clear_has_clubpoints();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* packagebinary_;
  ::std::string* miscbinary_;
  ::std::string* userdatabinary_;
  ::google::protobuf::uint32 rechargemoney_;
  ::google::protobuf::uint32 curexp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 bitmask_;
  ::google::protobuf::uint32 vitality_;
  ::google::protobuf::uint32 skillpoint_;
  ::std::string* itemcoldbinary_;
  ::google::protobuf::uint32 silver_;
  ::google::protobuf::uint32 diamond_;
  ::std::string* useskillbinary_;
  ::std::string* haveskillbinary_;
  ::std::string* havepassivebinary_;
  ::google::protobuf::uint32 binddiamond_;
  ::google::protobuf::uint32 gmlevel_;
  ::std::string* unlockpetdata_;
  ::std::string* duplbinary_;
  ::std::string* equipposbinary_;
  ::std::string* trumpbinary_;
  ::std::string* rewardbinary_;
  ::std::string* discoverybinary_;
  ::std::string* frienddatabinary_;
  ::google::protobuf::uint32 monthcardstoptime_;
  ::google::protobuf::uint32 thoughtvalue_;
  ::std::string* mysteryshopbinary_;
  ::std::string* taskbinary_;
  ::std::string* matchdatabinary_;
  ::google::protobuf::uint32 fightpower_;
  ::google::protobuf::uint32 honorpoints_;
  ::std::string* wingbinary_;
  ::google::protobuf::uint32 vipexp_;
  ::google::protobuf::uint32 viplevel_;
  ::std::string* vipdatabinary_;
  ::google::protobuf::uint32 clubpoints_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(36 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UserSaveData* default_instance_;
};
// -------------------------------------------------------------------

class LogoutCallbackData : public ::google::protobuf::Message {
 public:
  LogoutCallbackData();
  virtual ~LogoutCallbackData();

  LogoutCallbackData(const LogoutCallbackData& from);

  inline LogoutCallbackData& operator=(const LogoutCallbackData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutCallbackData& default_instance();

  void Swap(LogoutCallbackData* other);

  // implements Message ----------------------------------------------

  LogoutCallbackData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutCallbackData& from);
  void MergeFrom(const LogoutCallbackData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 destZoneID = 1;
  inline bool has_destzoneid() const;
  inline void clear_destzoneid();
  static const int kDestZoneIDFieldNumber = 1;
  inline ::google::protobuf::uint32 destzoneid() const;
  inline void set_destzoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.LogoutCallbackData)
 private:
  inline void set_has_destzoneid();
  inline void clear_has_destzoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 destzoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static LogoutCallbackData* default_instance_;
};
// -------------------------------------------------------------------

class ChangeLogicExtendData : public ::google::protobuf::Message {
 public:
  ChangeLogicExtendData();
  virtual ~ChangeLogicExtendData();

  ChangeLogicExtendData(const ChangeLogicExtendData& from);

  inline ChangeLogicExtendData& operator=(const ChangeLogicExtendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLogicExtendData& default_instance();

  void Swap(ChangeLogicExtendData* other);

  // implements Message ----------------------------------------------

  ChangeLogicExtendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeLogicExtendData& from);
  void MergeFrom(const ChangeLogicExtendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes userLoginData = 1;
  inline bool has_userlogindata() const;
  inline void clear_userlogindata();
  static const int kUserLoginDataFieldNumber = 1;
  inline const ::std::string& userlogindata() const;
  inline void set_userlogindata(const ::std::string& value);
  inline void set_userlogindata(const char* value);
  inline void set_userlogindata(const void* value, size_t size);
  inline ::std::string* mutable_userlogindata();
  inline ::std::string* release_userlogindata();
  inline void set_allocated_userlogindata(::std::string* userlogindata);

  // optional bytes intoRoomExtendData = 2;
  inline bool has_intoroomextenddata() const;
  inline void clear_intoroomextenddata();
  static const int kIntoRoomExtendDataFieldNumber = 2;
  inline const ::std::string& intoroomextenddata() const;
  inline void set_intoroomextenddata(const ::std::string& value);
  inline void set_intoroomextenddata(const char* value);
  inline void set_intoroomextenddata(const void* value, size_t size);
  inline ::std::string* mutable_intoroomextenddata();
  inline ::std::string* release_intoroomextenddata();
  inline void set_allocated_intoroomextenddata(::std::string* intoroomextenddata);

  // optional bool isAudience = 3;
  inline bool has_isaudience() const;
  inline void clear_isaudience();
  static const int kIsAudienceFieldNumber = 3;
  inline bool isaudience() const;
  inline void set_isaudience(bool value);

  // optional uint32 campType = 4;
  inline bool has_camptype() const;
  inline void clear_camptype();
  static const int kCampTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 camptype() const;
  inline void set_camptype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.ChangeLogicExtendData)
 private:
  inline void set_has_userlogindata();
  inline void clear_has_userlogindata();
  inline void set_has_intoroomextenddata();
  inline void clear_has_intoroomextenddata();
  inline void set_has_isaudience();
  inline void clear_has_isaudience();
  inline void set_has_camptype();
  inline void clear_has_camptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userlogindata_;
  ::std::string* intoroomextenddata_;
  bool isaudience_;
  ::google::protobuf::uint32 camptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static ChangeLogicExtendData* default_instance_;
};
// -------------------------------------------------------------------

class MessageSaveData : public ::google::protobuf::Message {
 public:
  MessageSaveData();
  virtual ~MessageSaveData();

  MessageSaveData(const MessageSaveData& from);

  inline MessageSaveData& operator=(const MessageSaveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageSaveData& default_instance();

  void Swap(MessageSaveData* other);

  // implements Message ----------------------------------------------

  MessageSaveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageSaveData& from);
  void MergeFrom(const MessageSaveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.MessageData messageData = 1;
  inline int messagedata_size() const;
  inline void clear_messagedata();
  static const int kMessageDataFieldNumber = 1;
  inline const ::protocol::user::MessageData& messagedata(int index) const;
  inline ::protocol::user::MessageData* mutable_messagedata(int index);
  inline ::protocol::user::MessageData* add_messagedata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::MessageData >&
      messagedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::MessageData >*
      mutable_messagedata();

  // @@protoc_insertion_point(class_scope:protocol.user.MessageSaveData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::MessageData > messagedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static MessageSaveData* default_instance_;
};
// -------------------------------------------------------------------

class MessageData : public ::google::protobuf::Message {
 public:
  MessageData();
  virtual ~MessageData();

  MessageData(const MessageData& from);

  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageData& default_instance();

  void Swap(MessageData* other);

  // implements Message ----------------------------------------------

  MessageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageData& from);
  void MergeFrom(const MessageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 messageID = 1;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 1;
  inline ::google::protobuf::uint32 messageid() const;
  inline void set_messageid(::google::protobuf::uint32 value);

  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:protocol.user.MessageData)
 private:
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* info_;
  ::google::protobuf::uint32 messageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static MessageData* default_instance_;
};
// -------------------------------------------------------------------

class PetData : public ::google::protobuf::Message {
 public:
  PetData();
  virtual ~PetData();

  PetData(const PetData& from);

  inline PetData& operator=(const PetData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetData& default_instance();

  void Swap(PetData* other);

  // implements Message ----------------------------------------------

  PetData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetData& from);
  void MergeFrom(const PetData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 petID = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIDFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // required uint32 petExp = 2;
  inline bool has_petexp() const;
  inline void clear_petexp();
  static const int kPetExpFieldNumber = 2;
  inline ::google::protobuf::uint32 petexp() const;
  inline void set_petexp(::google::protobuf::uint32 value);

  // required uint32 petStarLevel = 3;
  inline bool has_petstarlevel() const;
  inline void clear_petstarlevel();
  static const int kPetStarLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 petstarlevel() const;
  inline void set_petstarlevel(::google::protobuf::uint32 value);

  // required uint32 petQuality = 4;
  inline bool has_petquality() const;
  inline void clear_petquality();
  static const int kPetQualityFieldNumber = 4;
  inline ::google::protobuf::uint32 petquality() const;
  inline void set_petquality(::google::protobuf::uint32 value);

  // repeated .protocol.user.SkillData petSkillData = 5;
  inline int petskilldata_size() const;
  inline void clear_petskilldata();
  static const int kPetSkillDataFieldNumber = 5;
  inline const ::protocol::user::SkillData& petskilldata(int index) const;
  inline ::protocol::user::SkillData* mutable_petskilldata(int index);
  inline ::protocol::user::SkillData* add_petskilldata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >&
      petskilldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >*
      mutable_petskilldata();

  // repeated .protocol.user.PetEquipBinary petEquipBinary = 6;
  inline int petequipbinary_size() const;
  inline void clear_petequipbinary();
  static const int kPetEquipBinaryFieldNumber = 6;
  inline const ::protocol::user::PetEquipBinary& petequipbinary(int index) const;
  inline ::protocol::user::PetEquipBinary* mutable_petequipbinary(int index);
  inline ::protocol::user::PetEquipBinary* add_petequipbinary();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::PetEquipBinary >&
      petequipbinary() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::PetEquipBinary >*
      mutable_petequipbinary();

  // required uint32 teamPos = 7;
  inline bool has_teampos() const;
  inline void clear_teampos();
  static const int kTeamPosFieldNumber = 7;
  inline ::google::protobuf::uint32 teampos() const;
  inline void set_teampos(::google::protobuf::uint32 value);

  // required .protocol.user.PropData propData = 8;
  inline bool has_propdata() const;
  inline void clear_propdata();
  static const int kPropDataFieldNumber = 8;
  inline const ::protocol::user::PropData& propdata() const;
  inline ::protocol::user::PropData* mutable_propdata();
  inline ::protocol::user::PropData* release_propdata();
  inline void set_allocated_propdata(::protocol::user::PropData* propdata);

  // required uint32 petLevel = 9;
  inline bool has_petlevel() const;
  inline void clear_petlevel();
  static const int kPetLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 petlevel() const;
  inline void set_petlevel(::google::protobuf::uint32 value);

  // required uint32 seq = 10;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 10;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.PetData)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_petexp();
  inline void clear_has_petexp();
  inline void set_has_petstarlevel();
  inline void clear_has_petstarlevel();
  inline void set_has_petquality();
  inline void clear_has_petquality();
  inline void set_has_teampos();
  inline void clear_has_teampos();
  inline void set_has_propdata();
  inline void clear_has_propdata();
  inline void set_has_petlevel();
  inline void clear_has_petlevel();
  inline void set_has_seq();
  inline void clear_has_seq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 petid_;
  ::google::protobuf::uint32 petexp_;
  ::google::protobuf::uint32 petstarlevel_;
  ::google::protobuf::uint32 petquality_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData > petskilldata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::PetEquipBinary > petequipbinary_;
  ::protocol::user::PropData* propdata_;
  ::google::protobuf::uint32 teampos_;
  ::google::protobuf::uint32 petlevel_;
  ::google::protobuf::uint32 seq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static PetData* default_instance_;
};
// -------------------------------------------------------------------

class PropData : public ::google::protobuf::Message {
 public:
  PropData();
  virtual ~PropData();

  PropData(const PropData& from);

  inline PropData& operator=(const PropData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropData& default_instance();

  void Swap(PropData* other);

  // implements Message ----------------------------------------------

  PropData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropData& from);
  void MergeFrom(const PropData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 maxHP = 1;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 1;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // required uint32 maxMP = 2;
  inline bool has_maxmp() const;
  inline void clear_maxmp();
  static const int kMaxMPFieldNumber = 2;
  inline ::google::protobuf::uint32 maxmp() const;
  inline void set_maxmp(::google::protobuf::uint32 value);

  // required uint32 physicalAttack = 3;
  inline bool has_physicalattack() const;
  inline void clear_physicalattack();
  static const int kPhysicalAttackFieldNumber = 3;
  inline ::google::protobuf::uint32 physicalattack() const;
  inline void set_physicalattack(::google::protobuf::uint32 value);

  // required uint32 magicAttack = 4;
  inline bool has_magicattack() const;
  inline void clear_magicattack();
  static const int kMagicAttackFieldNumber = 4;
  inline ::google::protobuf::uint32 magicattack() const;
  inline void set_magicattack(::google::protobuf::uint32 value);

  // required uint32 pureDamage = 5;
  inline bool has_puredamage() const;
  inline void clear_puredamage();
  static const int kPureDamageFieldNumber = 5;
  inline ::google::protobuf::uint32 puredamage() const;
  inline void set_puredamage(::google::protobuf::uint32 value);

  // required uint32 physicalDefence = 6;
  inline bool has_physicaldefence() const;
  inline void clear_physicaldefence();
  static const int kPhysicalDefenceFieldNumber = 6;
  inline ::google::protobuf::uint32 physicaldefence() const;
  inline void set_physicaldefence(::google::protobuf::uint32 value);

  // required uint32 magicDefence = 7;
  inline bool has_magicdefence() const;
  inline void clear_magicdefence();
  static const int kMagicDefenceFieldNumber = 7;
  inline ::google::protobuf::uint32 magicdefence() const;
  inline void set_magicdefence(::google::protobuf::uint32 value);

  // required uint32 crit = 8;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 8;
  inline ::google::protobuf::uint32 crit() const;
  inline void set_crit(::google::protobuf::uint32 value);

  // required uint32 critDefence = 9;
  inline bool has_critdefence() const;
  inline void clear_critdefence();
  static const int kCritDefenceFieldNumber = 9;
  inline ::google::protobuf::uint32 critdefence() const;
  inline void set_critdefence(::google::protobuf::uint32 value);

  // required uint32 critValue = 10;
  inline bool has_critvalue() const;
  inline void clear_critvalue();
  static const int kCritValueFieldNumber = 10;
  inline ::google::protobuf::uint32 critvalue() const;
  inline void set_critvalue(::google::protobuf::uint32 value);

  // required uint32 appendCrit = 11;
  inline bool has_appendcrit() const;
  inline void clear_appendcrit();
  static const int kAppendCritFieldNumber = 11;
  inline ::google::protobuf::uint32 appendcrit() const;
  inline void set_appendcrit(::google::protobuf::uint32 value);

  // required uint32 extraCrit = 12;
  inline bool has_extracrit() const;
  inline void clear_extracrit();
  static const int kExtraCritFieldNumber = 12;
  inline ::google::protobuf::uint32 extracrit() const;
  inline void set_extracrit(::google::protobuf::uint32 value);

  // required uint32 extraCritDefence = 13;
  inline bool has_extracritdefence() const;
  inline void clear_extracritdefence();
  static const int kExtraCritDefenceFieldNumber = 13;
  inline ::google::protobuf::uint32 extracritdefence() const;
  inline void set_extracritdefence(::google::protobuf::uint32 value);

  // required uint32 hitValue = 14;
  inline bool has_hitvalue() const;
  inline void clear_hitvalue();
  static const int kHitValueFieldNumber = 14;
  inline ::google::protobuf::uint32 hitvalue() const;
  inline void set_hitvalue(::google::protobuf::uint32 value);

  // required uint32 avoidValue = 15;
  inline bool has_avoidvalue() const;
  inline void clear_avoidvalue();
  static const int kAvoidValueFieldNumber = 15;
  inline ::google::protobuf::uint32 avoidvalue() const;
  inline void set_avoidvalue(::google::protobuf::uint32 value);

  // required uint32 extraHitValue = 16;
  inline bool has_extrahitvalue() const;
  inline void clear_extrahitvalue();
  static const int kExtraHitValueFieldNumber = 16;
  inline ::google::protobuf::uint32 extrahitvalue() const;
  inline void set_extrahitvalue(::google::protobuf::uint32 value);

  // required uint32 extraAvoidValue = 17;
  inline bool has_extraavoidvalue() const;
  inline void clear_extraavoidvalue();
  static const int kExtraAvoidValueFieldNumber = 17;
  inline ::google::protobuf::uint32 extraavoidvalue() const;
  inline void set_extraavoidvalue(::google::protobuf::uint32 value);

  // required uint32 moveSpeed = 18;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 18;
  inline ::google::protobuf::uint32 movespeed() const;
  inline void set_movespeed(::google::protobuf::uint32 value);

  // required uint32 hpRecoverySpeed = 19;
  inline bool has_hprecoveryspeed() const;
  inline void clear_hprecoveryspeed();
  static const int kHpRecoverySpeedFieldNumber = 19;
  inline ::google::protobuf::uint32 hprecoveryspeed() const;
  inline void set_hprecoveryspeed(::google::protobuf::uint32 value);

  // required uint32 mpRecoverySpeed = 20;
  inline bool has_mprecoveryspeed() const;
  inline void clear_mprecoveryspeed();
  static const int kMpRecoverySpeedFieldNumber = 20;
  inline ::google::protobuf::uint32 mprecoveryspeed() const;
  inline void set_mprecoveryspeed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.PropData)
 private:
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_maxmp();
  inline void clear_has_maxmp();
  inline void set_has_physicalattack();
  inline void clear_has_physicalattack();
  inline void set_has_magicattack();
  inline void clear_has_magicattack();
  inline void set_has_puredamage();
  inline void clear_has_puredamage();
  inline void set_has_physicaldefence();
  inline void clear_has_physicaldefence();
  inline void set_has_magicdefence();
  inline void clear_has_magicdefence();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_critdefence();
  inline void clear_has_critdefence();
  inline void set_has_critvalue();
  inline void clear_has_critvalue();
  inline void set_has_appendcrit();
  inline void clear_has_appendcrit();
  inline void set_has_extracrit();
  inline void clear_has_extracrit();
  inline void set_has_extracritdefence();
  inline void clear_has_extracritdefence();
  inline void set_has_hitvalue();
  inline void clear_has_hitvalue();
  inline void set_has_avoidvalue();
  inline void clear_has_avoidvalue();
  inline void set_has_extrahitvalue();
  inline void clear_has_extrahitvalue();
  inline void set_has_extraavoidvalue();
  inline void clear_has_extraavoidvalue();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_hprecoveryspeed();
  inline void clear_has_hprecoveryspeed();
  inline void set_has_mprecoveryspeed();
  inline void clear_has_mprecoveryspeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 maxmp_;
  ::google::protobuf::uint32 physicalattack_;
  ::google::protobuf::uint32 magicattack_;
  ::google::protobuf::uint32 puredamage_;
  ::google::protobuf::uint32 physicaldefence_;
  ::google::protobuf::uint32 magicdefence_;
  ::google::protobuf::uint32 crit_;
  ::google::protobuf::uint32 critdefence_;
  ::google::protobuf::uint32 critvalue_;
  ::google::protobuf::uint32 appendcrit_;
  ::google::protobuf::uint32 extracrit_;
  ::google::protobuf::uint32 extracritdefence_;
  ::google::protobuf::uint32 hitvalue_;
  ::google::protobuf::uint32 avoidvalue_;
  ::google::protobuf::uint32 extrahitvalue_;
  ::google::protobuf::uint32 extraavoidvalue_;
  ::google::protobuf::uint32 movespeed_;
  ::google::protobuf::uint32 hprecoveryspeed_;
  ::google::protobuf::uint32 mprecoveryspeed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static PropData* default_instance_;
};
// -------------------------------------------------------------------

class PetEquipBinary : public ::google::protobuf::Message {
 public:
  PetEquipBinary();
  virtual ~PetEquipBinary();

  PetEquipBinary(const PetEquipBinary& from);

  inline PetEquipBinary& operator=(const PetEquipBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetEquipBinary& default_instance();

  void Swap(PetEquipBinary* other);

  // implements Message ----------------------------------------------

  PetEquipBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetEquipBinary& from);
  void MergeFrom(const PetEquipBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 itemBaseID = 2;
  inline bool has_itembaseid() const;
  inline void clear_itembaseid();
  static const int kItemBaseIDFieldNumber = 2;
  inline ::google::protobuf::uint32 itembaseid() const;
  inline void set_itembaseid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.PetEquipBinary)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_itembaseid();
  inline void clear_has_itembaseid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 itembaseid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static PetEquipBinary* default_instance_;
};
// -------------------------------------------------------------------

class AllItemData : public ::google::protobuf::Message {
 public:
  AllItemData();
  virtual ~AllItemData();

  AllItemData(const AllItemData& from);

  inline AllItemData& operator=(const AllItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllItemData& default_instance();

  void Swap(AllItemData* other);

  // implements Message ----------------------------------------------

  AllItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllItemData& from);
  void MergeFrom(const AllItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes itemData = 1;
  inline int itemdata_size() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 1;
  inline const ::std::string& itemdata(int index) const;
  inline ::std::string* mutable_itemdata(int index);
  inline void set_itemdata(int index, const ::std::string& value);
  inline void set_itemdata(int index, const char* value);
  inline void set_itemdata(int index, const void* value, size_t size);
  inline ::std::string* add_itemdata();
  inline void add_itemdata(const ::std::string& value);
  inline void add_itemdata(const char* value);
  inline void add_itemdata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& itemdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_itemdata();

  // @@protoc_insertion_point(class_scope:protocol.user.AllItemData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> itemdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static AllItemData* default_instance_;
};
// -------------------------------------------------------------------

class ItemColdData : public ::google::protobuf::Message {
 public:
  ItemColdData();
  virtual ~ItemColdData();

  ItemColdData(const ItemColdData& from);

  inline ItemColdData& operator=(const ItemColdData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemColdData& default_instance();

  void Swap(ItemColdData* other);

  // implements Message ----------------------------------------------

  ItemColdData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemColdData& from);
  void MergeFrom(const ItemColdData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 coldType = 1;
  inline bool has_coldtype() const;
  inline void clear_coldtype();
  static const int kColdTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 coldtype() const;
  inline void set_coldtype(::google::protobuf::uint32 value);

  // required uint32 endTimeInSec = 2;
  inline bool has_endtimeinsec() const;
  inline void clear_endtimeinsec();
  static const int kEndTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 endtimeinsec() const;
  inline void set_endtimeinsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.ItemColdData)
 private:
  inline void set_has_coldtype();
  inline void clear_has_coldtype();
  inline void set_has_endtimeinsec();
  inline void clear_has_endtimeinsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 coldtype_;
  ::google::protobuf::uint32 endtimeinsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static ItemColdData* default_instance_;
};
// -------------------------------------------------------------------

class ItemColdBinary : public ::google::protobuf::Message {
 public:
  ItemColdBinary();
  virtual ~ItemColdBinary();

  ItemColdBinary(const ItemColdBinary& from);

  inline ItemColdBinary& operator=(const ItemColdBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemColdBinary& default_instance();

  void Swap(ItemColdBinary* other);

  // implements Message ----------------------------------------------

  ItemColdBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemColdBinary& from);
  void MergeFrom(const ItemColdBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.ItemColdData itemColdData = 1;
  inline int itemcolddata_size() const;
  inline void clear_itemcolddata();
  static const int kItemColdDataFieldNumber = 1;
  inline const ::protocol::user::ItemColdData& itemcolddata(int index) const;
  inline ::protocol::user::ItemColdData* mutable_itemcolddata(int index);
  inline ::protocol::user::ItemColdData* add_itemcolddata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::ItemColdData >&
      itemcolddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::ItemColdData >*
      mutable_itemcolddata();

  // @@protoc_insertion_point(class_scope:protocol.user.ItemColdBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::ItemColdData > itemcolddata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static ItemColdBinary* default_instance_;
};
// -------------------------------------------------------------------

class AllPackageBinary : public ::google::protobuf::Message {
 public:
  AllPackageBinary();
  virtual ~AllPackageBinary();

  AllPackageBinary(const AllPackageBinary& from);

  inline AllPackageBinary& operator=(const AllPackageBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllPackageBinary& default_instance();

  void Swap(AllPackageBinary* other);

  // implements Message ----------------------------------------------

  AllPackageBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllPackageBinary& from);
  void MergeFrom(const AllPackageBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.item.ItemBinary items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protocol::item::ItemBinary& items(int index) const;
  inline ::protocol::item::ItemBinary* mutable_items(int index);
  inline ::protocol::item::ItemBinary* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >*
      mutable_items();

  // optional .protocol.user.MainPackageBinary mainPackageBinary = 2;
  inline bool has_mainpackagebinary() const;
  inline void clear_mainpackagebinary();
  static const int kMainPackageBinaryFieldNumber = 2;
  inline const ::protocol::user::MainPackageBinary& mainpackagebinary() const;
  inline ::protocol::user::MainPackageBinary* mutable_mainpackagebinary();
  inline ::protocol::user::MainPackageBinary* release_mainpackagebinary();
  inline void set_allocated_mainpackagebinary(::protocol::user::MainPackageBinary* mainpackagebinary);

  // optional .protocol.user.EquipPackageBinary equipPackageBinary = 3;
  inline bool has_equippackagebinary() const;
  inline void clear_equippackagebinary();
  static const int kEquipPackageBinaryFieldNumber = 3;
  inline const ::protocol::user::EquipPackageBinary& equippackagebinary() const;
  inline ::protocol::user::EquipPackageBinary* mutable_equippackagebinary();
  inline ::protocol::user::EquipPackageBinary* release_equippackagebinary();
  inline void set_allocated_equippackagebinary(::protocol::user::EquipPackageBinary* equippackagebinary);

  // @@protoc_insertion_point(class_scope:protocol.user.AllPackageBinary)
 private:
  inline void set_has_mainpackagebinary();
  inline void clear_has_mainpackagebinary();
  inline void set_has_equippackagebinary();
  inline void clear_has_equippackagebinary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary > items_;
  ::protocol::user::MainPackageBinary* mainpackagebinary_;
  ::protocol::user::EquipPackageBinary* equippackagebinary_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static AllPackageBinary* default_instance_;
};
// -------------------------------------------------------------------

class SkillBuildData : public ::google::protobuf::Message {
 public:
  SkillBuildData();
  virtual ~SkillBuildData();

  SkillBuildData(const SkillBuildData& from);

  inline SkillBuildData& operator=(const SkillBuildData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillBuildData& default_instance();

  void Swap(SkillBuildData* other);

  // implements Message ----------------------------------------------

  SkillBuildData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillBuildData& from);
  void MergeFrom(const SkillBuildData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 weaponeID = 1;
  inline bool has_weaponeid() const;
  inline void clear_weaponeid();
  static const int kWeaponeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 weaponeid() const;
  inline void set_weaponeid(::google::protobuf::uint32 value);

  // repeated .protocol.user.BuildBaseData buildBaseData = 2;
  inline int buildbasedata_size() const;
  inline void clear_buildbasedata();
  static const int kBuildBaseDataFieldNumber = 2;
  inline const ::protocol::user::BuildBaseData& buildbasedata(int index) const;
  inline ::protocol::user::BuildBaseData* mutable_buildbasedata(int index);
  inline ::protocol::user::BuildBaseData* add_buildbasedata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::BuildBaseData >&
      buildbasedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::BuildBaseData >*
      mutable_buildbasedata();

  // @@protoc_insertion_point(class_scope:protocol.user.SkillBuildData)
 private:
  inline void set_has_weaponeid();
  inline void clear_has_weaponeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::BuildBaseData > buildbasedata_;
  ::google::protobuf::uint32 weaponeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static SkillBuildData* default_instance_;
};
// -------------------------------------------------------------------

class BuildBaseData : public ::google::protobuf::Message {
 public:
  BuildBaseData();
  virtual ~BuildBaseData();

  BuildBaseData(const BuildBaseData& from);

  inline BuildBaseData& operator=(const BuildBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildBaseData& default_instance();

  void Swap(BuildBaseData* other);

  // implements Message ----------------------------------------------

  BuildBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildBaseData& from);
  void MergeFrom(const BuildBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 buildID = 1;
  inline bool has_buildid() const;
  inline void clear_buildid();
  static const int kBuildIDFieldNumber = 1;
  inline ::google::protobuf::uint32 buildid() const;
  inline void set_buildid(::google::protobuf::uint32 value);

  // optional string buildName = 2;
  inline bool has_buildname() const;
  inline void clear_buildname();
  static const int kBuildNameFieldNumber = 2;
  inline const ::std::string& buildname() const;
  inline void set_buildname(const ::std::string& value);
  inline void set_buildname(const char* value);
  inline void set_buildname(const char* value, size_t size);
  inline ::std::string* mutable_buildname();
  inline ::std::string* release_buildname();
  inline void set_allocated_buildname(::std::string* buildname);

  // repeated .protocol.user.UseSkillData useSkillData = 3;
  inline int useskilldata_size() const;
  inline void clear_useskilldata();
  static const int kUseSkillDataFieldNumber = 3;
  inline const ::protocol::user::UseSkillData& useskilldata(int index) const;
  inline ::protocol::user::UseSkillData* mutable_useskilldata(int index);
  inline ::protocol::user::UseSkillData* add_useskilldata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >&
      useskilldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >*
      mutable_useskilldata();

  // @@protoc_insertion_point(class_scope:protocol.user.BuildBaseData)
 private:
  inline void set_has_buildid();
  inline void clear_has_buildid();
  inline void set_has_buildname();
  inline void clear_has_buildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* buildname_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData > useskilldata_;
  ::google::protobuf::uint32 buildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static BuildBaseData* default_instance_;
};
// -------------------------------------------------------------------

class UseBuildData : public ::google::protobuf::Message {
 public:
  UseBuildData();
  virtual ~UseBuildData();

  UseBuildData(const UseBuildData& from);

  inline UseBuildData& operator=(const UseBuildData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseBuildData& default_instance();

  void Swap(UseBuildData* other);

  // implements Message ----------------------------------------------

  UseBuildData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseBuildData& from);
  void MergeFrom(const UseBuildData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 weaponeID = 1;
  inline bool has_weaponeid() const;
  inline void clear_weaponeid();
  static const int kWeaponeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 weaponeid() const;
  inline void set_weaponeid(::google::protobuf::uint32 value);

  // optional uint32 buildID = 2;
  inline bool has_buildid() const;
  inline void clear_buildid();
  static const int kBuildIDFieldNumber = 2;
  inline ::google::protobuf::uint32 buildid() const;
  inline void set_buildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.UseBuildData)
 private:
  inline void set_has_weaponeid();
  inline void clear_has_weaponeid();
  inline void set_has_buildid();
  inline void clear_has_buildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 weaponeid_;
  ::google::protobuf::uint32 buildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UseBuildData* default_instance_;
};
// -------------------------------------------------------------------

class UseSkillData : public ::google::protobuf::Message {
 public:
  UseSkillData();
  virtual ~UseSkillData();

  UseSkillData(const UseSkillData& from);

  inline UseSkillData& operator=(const UseSkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseSkillData& default_instance();

  void Swap(UseSkillData* other);

  // implements Message ----------------------------------------------

  UseSkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseSkillData& from);
  void MergeFrom(const UseSkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 selectIndex = 2;
  inline bool has_selectindex() const;
  inline void clear_selectindex();
  static const int kSelectIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 selectindex() const;
  inline void set_selectindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.UseSkillData)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_selectindex();
  inline void clear_has_selectindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 selectindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UseSkillData* default_instance_;
};
// -------------------------------------------------------------------

class UseSkillBinary : public ::google::protobuf::Message {
 public:
  UseSkillBinary();
  virtual ~UseSkillBinary();

  UseSkillBinary(const UseSkillBinary& from);

  inline UseSkillBinary& operator=(const UseSkillBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseSkillBinary& default_instance();

  void Swap(UseSkillBinary* other);

  // implements Message ----------------------------------------------

  UseSkillBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseSkillBinary& from);
  void MergeFrom(const UseSkillBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.UseSkillData useSkillData = 1;
  inline int useskilldata_size() const;
  inline void clear_useskilldata();
  static const int kUseSkillDataFieldNumber = 1;
  inline const ::protocol::user::UseSkillData& useskilldata(int index) const;
  inline ::protocol::user::UseSkillData* mutable_useskilldata(int index);
  inline ::protocol::user::UseSkillData* add_useskilldata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >&
      useskilldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >*
      mutable_useskilldata();

  // repeated .protocol.user.SkillBuildData skillBuilddata = 2;
  inline int skillbuilddata_size() const;
  inline void clear_skillbuilddata();
  static const int kSkillBuilddataFieldNumber = 2;
  inline const ::protocol::user::SkillBuildData& skillbuilddata(int index) const;
  inline ::protocol::user::SkillBuildData* mutable_skillbuilddata(int index);
  inline ::protocol::user::SkillBuildData* add_skillbuilddata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillBuildData >&
      skillbuilddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillBuildData >*
      mutable_skillbuilddata();

  // repeated .protocol.user.UseBuildData useBuildData = 3;
  inline int usebuilddata_size() const;
  inline void clear_usebuilddata();
  static const int kUseBuildDataFieldNumber = 3;
  inline const ::protocol::user::UseBuildData& usebuilddata(int index) const;
  inline ::protocol::user::UseBuildData* mutable_usebuilddata(int index);
  inline ::protocol::user::UseBuildData* add_usebuilddata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseBuildData >&
      usebuilddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseBuildData >*
      mutable_usebuilddata();

  // @@protoc_insertion_point(class_scope:protocol.user.UseSkillBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData > useskilldata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillBuildData > skillbuilddata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::UseBuildData > usebuilddata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UseSkillBinary* default_instance_;
};
// -------------------------------------------------------------------

class HaveSkillBinary : public ::google::protobuf::Message {
 public:
  HaveSkillBinary();
  virtual ~HaveSkillBinary();

  HaveSkillBinary(const HaveSkillBinary& from);

  inline HaveSkillBinary& operator=(const HaveSkillBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HaveSkillBinary& default_instance();

  void Swap(HaveSkillBinary* other);

  // implements Message ----------------------------------------------

  HaveSkillBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HaveSkillBinary& from);
  void MergeFrom(const HaveSkillBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.SkillData skillData = 1;
  inline int skilldata_size() const;
  inline void clear_skilldata();
  static const int kSkillDataFieldNumber = 1;
  inline const ::protocol::user::SkillData& skilldata(int index) const;
  inline ::protocol::user::SkillData* mutable_skilldata(int index);
  inline ::protocol::user::SkillData* add_skilldata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >&
      skilldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >*
      mutable_skilldata();

  // repeated .protocol.user.UserUnlockWeaponData userUnlockWeaponData = 2;
  inline int userunlockweapondata_size() const;
  inline void clear_userunlockweapondata();
  static const int kUserUnlockWeaponDataFieldNumber = 2;
  inline const ::protocol::user::UserUnlockWeaponData& userunlockweapondata(int index) const;
  inline ::protocol::user::UserUnlockWeaponData* mutable_userunlockweapondata(int index);
  inline ::protocol::user::UserUnlockWeaponData* add_userunlockweapondata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UserUnlockWeaponData >&
      userunlockweapondata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UserUnlockWeaponData >*
      mutable_userunlockweapondata();

  // @@protoc_insertion_point(class_scope:protocol.user.HaveSkillBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData > skilldata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::UserUnlockWeaponData > userunlockweapondata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static HaveSkillBinary* default_instance_;
};
// -------------------------------------------------------------------

class SkillData : public ::google::protobuf::Message {
 public:
  SkillData();
  virtual ~SkillData();

  SkillData(const SkillData& from);

  inline SkillData& operator=(const SkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillData& default_instance();

  void Swap(SkillData* other);

  // implements Message ----------------------------------------------

  SkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillData& from);
  void MergeFrom(const SkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // required uint32 skillLevel = 2;
  inline bool has_skilllevel() const;
  inline void clear_skilllevel();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 skilllevel() const;
  inline void set_skilllevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.SkillData)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllevel();
  inline void clear_has_skilllevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static SkillData* default_instance_;
};
// -------------------------------------------------------------------

class UserUnlockWeaponData : public ::google::protobuf::Message {
 public:
  UserUnlockWeaponData();
  virtual ~UserUnlockWeaponData();

  UserUnlockWeaponData(const UserUnlockWeaponData& from);

  inline UserUnlockWeaponData& operator=(const UserUnlockWeaponData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserUnlockWeaponData& default_instance();

  void Swap(UserUnlockWeaponData* other);

  // implements Message ----------------------------------------------

  UserUnlockWeaponData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserUnlockWeaponData& from);
  void MergeFrom(const UserUnlockWeaponData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 weaponID = 1;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 1;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // required uint32 unlockState = 2;
  inline bool has_unlockstate() const;
  inline void clear_unlockstate();
  static const int kUnlockStateFieldNumber = 2;
  inline ::google::protobuf::uint32 unlockstate() const;
  inline void set_unlockstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.UserUnlockWeaponData)
 private:
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_unlockstate();
  inline void clear_has_unlockstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 unlockstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UserUnlockWeaponData* default_instance_;
};
// -------------------------------------------------------------------

class UnlockPassiveSkillBarBinary : public ::google::protobuf::Message {
 public:
  UnlockPassiveSkillBarBinary();
  virtual ~UnlockPassiveSkillBarBinary();

  UnlockPassiveSkillBarBinary(const UnlockPassiveSkillBarBinary& from);

  inline UnlockPassiveSkillBarBinary& operator=(const UnlockPassiveSkillBarBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockPassiveSkillBarBinary& default_instance();

  void Swap(UnlockPassiveSkillBarBinary* other);

  // implements Message ----------------------------------------------

  UnlockPassiveSkillBarBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockPassiveSkillBarBinary& from);
  void MergeFrom(const UnlockPassiveSkillBarBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 index = 1;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index(int index) const;
  inline void set_index(int index, ::google::protobuf::uint32 value);
  inline void add_index(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:protocol.user.UnlockPassiveSkillBarBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UnlockPassiveSkillBarBinary* default_instance_;
};
// -------------------------------------------------------------------

class DuplBinary : public ::google::protobuf::Message {
 public:
  DuplBinary();
  virtual ~DuplBinary();

  DuplBinary(const DuplBinary& from);

  inline DuplBinary& operator=(const DuplBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplBinary& default_instance();

  void Swap(DuplBinary* other);

  // implements Message ----------------------------------------------

  DuplBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplBinary& from);
  void MergeFrom(const DuplBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.DuplData dupldata = 1;
  inline int dupldata_size() const;
  inline void clear_dupldata();
  static const int kDupldataFieldNumber = 1;
  inline const ::protocol::user::DuplData& dupldata(int index) const;
  inline ::protocol::user::DuplData* mutable_dupldata(int index);
  inline ::protocol::user::DuplData* add_dupldata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DuplData >&
      dupldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DuplData >*
      mutable_dupldata();

  // repeated .protocol.user.RealmData realmData = 2;
  inline int realmdata_size() const;
  inline void clear_realmdata();
  static const int kRealmDataFieldNumber = 2;
  inline const ::protocol::user::RealmData& realmdata(int index) const;
  inline ::protocol::user::RealmData* mutable_realmdata(int index);
  inline ::protocol::user::RealmData* add_realmdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::RealmData >&
      realmdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::RealmData >*
      mutable_realmdata();

  // required uint32 ExpDuplRemainTimes = 3;
  inline bool has_expduplremaintimes() const;
  inline void clear_expduplremaintimes();
  static const int kExpDuplRemainTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 expduplremaintimes() const;
  inline void set_expduplremaintimes(::google::protobuf::uint32 value);

  // required uint32 MoneyDuplRemainTimes = 4;
  inline bool has_moneyduplremaintimes() const;
  inline void clear_moneyduplremaintimes();
  static const int kMoneyDuplRemainTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 moneyduplremaintimes() const;
  inline void set_moneyduplremaintimes(::google::protobuf::uint32 value);

  // required .protocol.user.GamblingDataBinary gamblingDataBinary = 5;
  inline bool has_gamblingdatabinary() const;
  inline void clear_gamblingdatabinary();
  static const int kGamblingDataBinaryFieldNumber = 5;
  inline const ::protocol::user::GamblingDataBinary& gamblingdatabinary() const;
  inline ::protocol::user::GamblingDataBinary* mutable_gamblingdatabinary();
  inline ::protocol::user::GamblingDataBinary* release_gamblingdatabinary();
  inline void set_allocated_gamblingdatabinary(::protocol::user::GamblingDataBinary* gamblingdatabinary);

  // required uint32 ItemDuplRemainTimes = 6;
  inline bool has_itemduplremaintimes() const;
  inline void clear_itemduplremaintimes();
  static const int kItemDuplRemainTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 itemduplremaintimes() const;
  inline void set_itemduplremaintimes(::google::protobuf::uint32 value);

  // optional uint32 buyBackTimes = 7;
  inline bool has_buybacktimes() const;
  inline void clear_buybacktimes();
  static const int kBuyBackTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 buybacktimes() const;
  inline void set_buybacktimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.DuplBinary)
 private:
  inline void set_has_expduplremaintimes();
  inline void clear_has_expduplremaintimes();
  inline void set_has_moneyduplremaintimes();
  inline void clear_has_moneyduplremaintimes();
  inline void set_has_gamblingdatabinary();
  inline void clear_has_gamblingdatabinary();
  inline void set_has_itemduplremaintimes();
  inline void clear_has_itemduplremaintimes();
  inline void set_has_buybacktimes();
  inline void clear_has_buybacktimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::DuplData > dupldata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::RealmData > realmdata_;
  ::google::protobuf::uint32 expduplremaintimes_;
  ::google::protobuf::uint32 moneyduplremaintimes_;
  ::protocol::user::GamblingDataBinary* gamblingdatabinary_;
  ::google::protobuf::uint32 itemduplremaintimes_;
  ::google::protobuf::uint32 buybacktimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DuplBinary* default_instance_;
};
// -------------------------------------------------------------------

class DuplData : public ::google::protobuf::Message {
 public:
  DuplData();
  virtual ~DuplData();

  DuplData(const DuplData& from);

  inline DuplData& operator=(const DuplData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplData& default_instance();

  void Swap(DuplData* other);

  // implements Message ----------------------------------------------

  DuplData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplData& from);
  void MergeFrom(const DuplData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 duplID = 1;
  inline bool has_duplid() const;
  inline void clear_duplid();
  static const int kDuplIDFieldNumber = 1;
  inline ::google::protobuf::uint32 duplid() const;
  inline void set_duplid(::google::protobuf::uint32 value);

  // required uint32 duplStar = 2;
  inline bool has_duplstar() const;
  inline void clear_duplstar();
  static const int kDuplStarFieldNumber = 2;
  inline ::google::protobuf::uint32 duplstar() const;
  inline void set_duplstar(::google::protobuf::uint32 value);

  // required uint32 remainTimes = 3;
  inline bool has_remaintimes() const;
  inline void clear_remaintimes();
  static const int kRemainTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 remaintimes() const;
  inline void set_remaintimes(::google::protobuf::uint32 value);

  // required uint32 havePlayStory = 4;
  inline bool has_haveplaystory() const;
  inline void clear_haveplaystory();
  static const int kHavePlayStoryFieldNumber = 4;
  inline ::google::protobuf::uint32 haveplaystory() const;
  inline void set_haveplaystory(::google::protobuf::uint32 value);

  // required uint32 resetRemainTimes = 5;
  inline bool has_resetremaintimes() const;
  inline void clear_resetremaintimes();
  static const int kResetRemainTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 resetremaintimes() const;
  inline void set_resetremaintimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.DuplData)
 private:
  inline void set_has_duplid();
  inline void clear_has_duplid();
  inline void set_has_duplstar();
  inline void clear_has_duplstar();
  inline void set_has_remaintimes();
  inline void clear_has_remaintimes();
  inline void set_has_haveplaystory();
  inline void clear_has_haveplaystory();
  inline void set_has_resetremaintimes();
  inline void clear_has_resetremaintimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 duplid_;
  ::google::protobuf::uint32 duplstar_;
  ::google::protobuf::uint32 remaintimes_;
  ::google::protobuf::uint32 haveplaystory_;
  ::google::protobuf::uint32 resetremaintimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DuplData* default_instance_;
};
// -------------------------------------------------------------------

class RealmData : public ::google::protobuf::Message {
 public:
  RealmData();
  virtual ~RealmData();

  RealmData(const RealmData& from);

  inline RealmData& operator=(const RealmData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RealmData& default_instance();

  void Swap(RealmData* other);

  // implements Message ----------------------------------------------

  RealmData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealmData& from);
  void MergeFrom(const RealmData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 realmID = 1;
  inline bool has_realmid() const;
  inline void clear_realmid();
  static const int kRealmIDFieldNumber = 1;
  inline ::google::protobuf::uint32 realmid() const;
  inline void set_realmid(::google::protobuf::uint32 value);

  // optional uint32 difficultyLevel = 2;
  inline bool has_difficultylevel() const;
  inline void clear_difficultylevel();
  static const int kDifficultyLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 difficultylevel() const;
  inline void set_difficultylevel(::google::protobuf::uint32 value);

  // repeated uint32 boxID = 3;
  inline int boxid_size() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 3;
  inline ::google::protobuf::uint32 boxid(int index) const;
  inline void set_boxid(int index, ::google::protobuf::uint32 value);
  inline void add_boxid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      boxid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_boxid();

  // @@protoc_insertion_point(class_scope:protocol.user.RealmData)
 private:
  inline void set_has_realmid();
  inline void clear_has_realmid();
  inline void set_has_difficultylevel();
  inline void clear_has_difficultylevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 realmid_;
  ::google::protobuf::uint32 difficultylevel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static RealmData* default_instance_;
};
// -------------------------------------------------------------------

class GamblingDataBinary : public ::google::protobuf::Message {
 public:
  GamblingDataBinary();
  virtual ~GamblingDataBinary();

  GamblingDataBinary(const GamblingDataBinary& from);

  inline GamblingDataBinary& operator=(const GamblingDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamblingDataBinary& default_instance();

  void Swap(GamblingDataBinary* other);

  // implements Message ----------------------------------------------

  GamblingDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamblingDataBinary& from);
  void MergeFrom(const GamblingDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gamblingDuplID = 1;
  inline bool has_gamblingduplid() const;
  inline void clear_gamblingduplid();
  static const int kGamblingDuplIDFieldNumber = 1;
  inline ::google::protobuf::uint32 gamblingduplid() const;
  inline void set_gamblingduplid(::google::protobuf::uint32 value);

  // optional uint32 gamblingDuplRemainTimes = 2;
  inline bool has_gamblingduplremaintimes() const;
  inline void clear_gamblingduplremaintimes();
  static const int kGamblingDuplRemainTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 gamblingduplremaintimes() const;
  inline void set_gamblingduplremaintimes(::google::protobuf::uint32 value);

  // optional bool canAward = 3;
  inline bool has_canaward() const;
  inline void clear_canaward();
  static const int kCanAwardFieldNumber = 3;
  inline bool canaward() const;
  inline void set_canaward(bool value);

  // repeated .protocol.user.GamblingDropItem gamblingDropItem = 4;
  inline int gamblingdropitem_size() const;
  inline void clear_gamblingdropitem();
  static const int kGamblingDropItemFieldNumber = 4;
  inline const ::protocol::user::GamblingDropItem& gamblingdropitem(int index) const;
  inline ::protocol::user::GamblingDropItem* mutable_gamblingdropitem(int index);
  inline ::protocol::user::GamblingDropItem* add_gamblingdropitem();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingDropItem >&
      gamblingdropitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingDropItem >*
      mutable_gamblingdropitem();

  // optional uint32 willExp = 5;
  inline bool has_willexp() const;
  inline void clear_willexp();
  static const int kWillExpFieldNumber = 5;
  inline ::google::protobuf::uint32 willexp() const;
  inline void set_willexp(::google::protobuf::uint32 value);

  // optional uint32 willMoney = 6;
  inline bool has_willmoney() const;
  inline void clear_willmoney();
  static const int kWillMoneyFieldNumber = 6;
  inline ::google::protobuf::uint32 willmoney() const;
  inline void set_willmoney(::google::protobuf::uint32 value);

  // repeated .protocol.user.GamblingWillDropItem gamblingWillDropItem = 7;
  inline int gamblingwilldropitem_size() const;
  inline void clear_gamblingwilldropitem();
  static const int kGamblingWillDropItemFieldNumber = 7;
  inline const ::protocol::user::GamblingWillDropItem& gamblingwilldropitem(int index) const;
  inline ::protocol::user::GamblingWillDropItem* mutable_gamblingwilldropitem(int index);
  inline ::protocol::user::GamblingWillDropItem* add_gamblingwilldropitem();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingWillDropItem >&
      gamblingwilldropitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingWillDropItem >*
      mutable_gamblingwilldropitem();

  // optional uint32 bossID = 8;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 8;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 isReward = 9;
  inline bool has_isreward() const;
  inline void clear_isreward();
  static const int kIsRewardFieldNumber = 9;
  inline ::google::protobuf::uint32 isreward() const;
  inline void set_isreward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.GamblingDataBinary)
 private:
  inline void set_has_gamblingduplid();
  inline void clear_has_gamblingduplid();
  inline void set_has_gamblingduplremaintimes();
  inline void clear_has_gamblingduplremaintimes();
  inline void set_has_canaward();
  inline void clear_has_canaward();
  inline void set_has_willexp();
  inline void clear_has_willexp();
  inline void set_has_willmoney();
  inline void clear_has_willmoney();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_isreward();
  inline void clear_has_isreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gamblingduplid_;
  ::google::protobuf::uint32 gamblingduplremaintimes_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingDropItem > gamblingdropitem_;
  bool canaward_;
  ::google::protobuf::uint32 willexp_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingWillDropItem > gamblingwilldropitem_;
  ::google::protobuf::uint32 willmoney_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 isreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static GamblingDataBinary* default_instance_;
};
// -------------------------------------------------------------------

class GamblingDropItem : public ::google::protobuf::Message {
 public:
  GamblingDropItem();
  virtual ~GamblingDropItem();

  GamblingDropItem(const GamblingDropItem& from);

  inline GamblingDropItem& operator=(const GamblingDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamblingDropItem& default_instance();

  void Swap(GamblingDropItem* other);

  // implements Message ----------------------------------------------

  GamblingDropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamblingDropItem& from);
  void MergeFrom(const GamblingDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemBaseID = 1;
  inline bool has_itembaseid() const;
  inline void clear_itembaseid();
  static const int kItemBaseIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itembaseid() const;
  inline void set_itembaseid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 identify = 4;
  inline bool has_identify() const;
  inline void clear_identify();
  static const int kIdentifyFieldNumber = 4;
  inline ::google::protobuf::uint32 identify() const;
  inline void set_identify(::google::protobuf::uint32 value);

  // optional uint32 needBind = 5;
  inline bool has_needbind() const;
  inline void clear_needbind();
  static const int kNeedBindFieldNumber = 5;
  inline ::google::protobuf::uint32 needbind() const;
  inline void set_needbind(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.GamblingDropItem)
 private:
  inline void set_has_itembaseid();
  inline void clear_has_itembaseid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_identify();
  inline void clear_has_identify();
  inline void set_has_needbind();
  inline void clear_has_needbind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itembaseid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 identify_;
  ::google::protobuf::uint32 needbind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static GamblingDropItem* default_instance_;
};
// -------------------------------------------------------------------

class GamblingWillDropItem : public ::google::protobuf::Message {
 public:
  GamblingWillDropItem();
  virtual ~GamblingWillDropItem();

  GamblingWillDropItem(const GamblingWillDropItem& from);

  inline GamblingWillDropItem& operator=(const GamblingWillDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamblingWillDropItem& default_instance();

  void Swap(GamblingWillDropItem* other);

  // implements Message ----------------------------------------------

  GamblingWillDropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamblingWillDropItem& from);
  void MergeFrom(const GamblingWillDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemBaseID = 1;
  inline bool has_itembaseid() const;
  inline void clear_itembaseid();
  static const int kItemBaseIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itembaseid() const;
  inline void set_itembaseid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 identify = 4;
  inline bool has_identify() const;
  inline void clear_identify();
  static const int kIdentifyFieldNumber = 4;
  inline ::google::protobuf::uint32 identify() const;
  inline void set_identify(::google::protobuf::uint32 value);

  // optional uint32 needBind = 5;
  inline bool has_needbind() const;
  inline void clear_needbind();
  static const int kNeedBindFieldNumber = 5;
  inline ::google::protobuf::uint32 needbind() const;
  inline void set_needbind(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.GamblingWillDropItem)
 private:
  inline void set_has_itembaseid();
  inline void clear_has_itembaseid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_identify();
  inline void clear_has_identify();
  inline void set_has_needbind();
  inline void clear_has_needbind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itembaseid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 identify_;
  ::google::protobuf::uint32 needbind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static GamblingWillDropItem* default_instance_;
};
// -------------------------------------------------------------------

class StoneData : public ::google::protobuf::Message {
 public:
  StoneData();
  virtual ~StoneData();

  StoneData(const StoneData& from);

  inline StoneData& operator=(const StoneData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoneData& default_instance();

  void Swap(StoneData* other);

  // implements Message ----------------------------------------------

  StoneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoneData& from);
  void MergeFrom(const StoneData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 stoneID = 1;
  inline bool has_stoneid() const;
  inline void clear_stoneid();
  static const int kStoneIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stoneid() const;
  inline void set_stoneid(::google::protobuf::uint32 value);

  // required uint32 stoneLevel = 2;
  inline bool has_stonelevel() const;
  inline void clear_stonelevel();
  static const int kStoneLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 stonelevel() const;
  inline void set_stonelevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.StoneData)
 private:
  inline void set_has_stoneid();
  inline void clear_has_stoneid();
  inline void set_has_stonelevel();
  inline void clear_has_stonelevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stoneid_;
  ::google::protobuf::uint32 stonelevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static StoneData* default_instance_;
};
// -------------------------------------------------------------------

class EquipPosData : public ::google::protobuf::Message {
 public:
  EquipPosData();
  virtual ~EquipPosData();

  EquipPosData(const EquipPosData& from);

  inline EquipPosData& operator=(const EquipPosData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipPosData& default_instance();

  void Swap(EquipPosData* other);

  // implements Message ----------------------------------------------

  EquipPosData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipPosData& from);
  void MergeFrom(const EquipPosData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 equipPos = 1;
  inline bool has_equippos() const;
  inline void clear_equippos();
  static const int kEquipPosFieldNumber = 1;
  inline ::google::protobuf::uint32 equippos() const;
  inline void set_equippos(::google::protobuf::uint32 value);

  // required uint32 intensifyLevel = 2;
  inline bool has_intensifylevel() const;
  inline void clear_intensifylevel();
  static const int kIntensifyLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 intensifylevel() const;
  inline void set_intensifylevel(::google::protobuf::uint32 value);

  // repeated .protocol.user.StoneData stoneData = 3;
  inline int stonedata_size() const;
  inline void clear_stonedata();
  static const int kStoneDataFieldNumber = 3;
  inline const ::protocol::user::StoneData& stonedata(int index) const;
  inline ::protocol::user::StoneData* mutable_stonedata(int index);
  inline ::protocol::user::StoneData* add_stonedata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::StoneData >&
      stonedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::StoneData >*
      mutable_stonedata();

  // @@protoc_insertion_point(class_scope:protocol.user.EquipPosData)
 private:
  inline void set_has_equippos();
  inline void clear_has_equippos();
  inline void set_has_intensifylevel();
  inline void clear_has_intensifylevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 equippos_;
  ::google::protobuf::uint32 intensifylevel_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::StoneData > stonedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static EquipPosData* default_instance_;
};
// -------------------------------------------------------------------

class EquipPosBinary : public ::google::protobuf::Message {
 public:
  EquipPosBinary();
  virtual ~EquipPosBinary();

  EquipPosBinary(const EquipPosBinary& from);

  inline EquipPosBinary& operator=(const EquipPosBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipPosBinary& default_instance();

  void Swap(EquipPosBinary* other);

  // implements Message ----------------------------------------------

  EquipPosBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipPosBinary& from);
  void MergeFrom(const EquipPosBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.EquipPosData equipPosData = 1;
  inline int equipposdata_size() const;
  inline void clear_equipposdata();
  static const int kEquipPosDataFieldNumber = 1;
  inline const ::protocol::user::EquipPosData& equipposdata(int index) const;
  inline ::protocol::user::EquipPosData* mutable_equipposdata(int index);
  inline ::protocol::user::EquipPosData* add_equipposdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipPosData >&
      equipposdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipPosData >*
      mutable_equipposdata();

  // @@protoc_insertion_point(class_scope:protocol.user.EquipPosBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipPosData > equipposdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static EquipPosBinary* default_instance_;
};
// -------------------------------------------------------------------

class TrumpBinary : public ::google::protobuf::Message {
 public:
  TrumpBinary();
  virtual ~TrumpBinary();

  TrumpBinary(const TrumpBinary& from);

  inline TrumpBinary& operator=(const TrumpBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrumpBinary& default_instance();

  void Swap(TrumpBinary* other);

  // implements Message ----------------------------------------------

  TrumpBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrumpBinary& from);
  void MergeFrom(const TrumpBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.TrumpData trumpData = 1;
  inline int trumpdata_size() const;
  inline void clear_trumpdata();
  static const int kTrumpDataFieldNumber = 1;
  inline const ::protocol::user::TrumpData& trumpdata(int index) const;
  inline ::protocol::user::TrumpData* mutable_trumpdata(int index);
  inline ::protocol::user::TrumpData* add_trumpdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpData >&
      trumpdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpData >*
      mutable_trumpdata();

  // required uint32 useTrumpID = 2;
  inline bool has_usetrumpid() const;
  inline void clear_usetrumpid();
  static const int kUseTrumpIDFieldNumber = 2;
  inline ::google::protobuf::uint32 usetrumpid() const;
  inline void set_usetrumpid(::google::protobuf::uint32 value);

  // required uint32 useTrumpLevel = 3;
  inline bool has_usetrumplevel() const;
  inline void clear_usetrumplevel();
  static const int kUseTrumpLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 usetrumplevel() const;
  inline void set_usetrumplevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.TrumpBinary)
 private:
  inline void set_has_usetrumpid();
  inline void clear_has_usetrumpid();
  inline void set_has_usetrumplevel();
  inline void clear_has_usetrumplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpData > trumpdata_;
  ::google::protobuf::uint32 usetrumpid_;
  ::google::protobuf::uint32 usetrumplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static TrumpBinary* default_instance_;
};
// -------------------------------------------------------------------

class TrumpData : public ::google::protobuf::Message {
 public:
  TrumpData();
  virtual ~TrumpData();

  TrumpData(const TrumpData& from);

  inline TrumpData& operator=(const TrumpData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrumpData& default_instance();

  void Swap(TrumpData* other);

  // implements Message ----------------------------------------------

  TrumpData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrumpData& from);
  void MergeFrom(const TrumpData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 trumpID = 1;
  inline bool has_trumpid() const;
  inline void clear_trumpid();
  static const int kTrumpIDFieldNumber = 1;
  inline ::google::protobuf::uint32 trumpid() const;
  inline void set_trumpid(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated .protocol.user.TrumpSkillData skillData = 3;
  inline int skilldata_size() const;
  inline void clear_skilldata();
  static const int kSkillDataFieldNumber = 3;
  inline const ::protocol::user::TrumpSkillData& skilldata(int index) const;
  inline ::protocol::user::TrumpSkillData* mutable_skilldata(int index);
  inline ::protocol::user::TrumpSkillData* add_skilldata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpSkillData >&
      skilldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpSkillData >*
      mutable_skilldata();

  // required uint32 blessingValue = 4;
  inline bool has_blessingvalue() const;
  inline void clear_blessingvalue();
  static const int kBlessingValueFieldNumber = 4;
  inline ::google::protobuf::uint32 blessingvalue() const;
  inline void set_blessingvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.TrumpData)
 private:
  inline void set_has_trumpid();
  inline void clear_has_trumpid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_blessingvalue();
  inline void clear_has_blessingvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 trumpid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpSkillData > skilldata_;
  ::google::protobuf::uint32 blessingvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static TrumpData* default_instance_;
};
// -------------------------------------------------------------------

class TrumpSkillData : public ::google::protobuf::Message {
 public:
  TrumpSkillData();
  virtual ~TrumpSkillData();

  TrumpSkillData(const TrumpSkillData& from);

  inline TrumpSkillData& operator=(const TrumpSkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrumpSkillData& default_instance();

  void Swap(TrumpSkillData* other);

  // implements Message ----------------------------------------------

  TrumpSkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrumpSkillData& from);
  void MergeFrom(const TrumpSkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // required uint32 skillLevel = 2;
  inline bool has_skilllevel() const;
  inline void clear_skilllevel();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 skilllevel() const;
  inline void set_skilllevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.TrumpSkillData)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllevel();
  inline void clear_has_skilllevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static TrumpSkillData* default_instance_;
};
// -------------------------------------------------------------------

class UserRewardBinary : public ::google::protobuf::Message {
 public:
  UserRewardBinary();
  virtual ~UserRewardBinary();

  UserRewardBinary(const UserRewardBinary& from);

  inline UserRewardBinary& operator=(const UserRewardBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRewardBinary& default_instance();

  void Swap(UserRewardBinary* other);

  // implements Message ----------------------------------------------

  UserRewardBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRewardBinary& from);
  void MergeFrom(const UserRewardBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 saveDayStartInSec = 1;
  inline bool has_savedaystartinsec() const;
  inline void clear_savedaystartinsec();
  static const int kSaveDayStartInSecFieldNumber = 1;
  inline ::google::protobuf::uint32 savedaystartinsec() const;
  inline void set_savedaystartinsec(::google::protobuf::uint32 value);

  // optional .protocol.user.LoginSignRewardBinary loginSignRewardBinary = 2;
  inline bool has_loginsignrewardbinary() const;
  inline void clear_loginsignrewardbinary();
  static const int kLoginSignRewardBinaryFieldNumber = 2;
  inline const ::protocol::user::LoginSignRewardBinary& loginsignrewardbinary() const;
  inline ::protocol::user::LoginSignRewardBinary* mutable_loginsignrewardbinary();
  inline ::protocol::user::LoginSignRewardBinary* release_loginsignrewardbinary();
  inline void set_allocated_loginsignrewardbinary(::protocol::user::LoginSignRewardBinary* loginsignrewardbinary);

  // required .protocol.user.SummonRaffleBinary summonRaffleBinary = 3;
  inline bool has_summonrafflebinary() const;
  inline void clear_summonrafflebinary();
  static const int kSummonRaffleBinaryFieldNumber = 3;
  inline const ::protocol::user::SummonRaffleBinary& summonrafflebinary() const;
  inline ::protocol::user::SummonRaffleBinary* mutable_summonrafflebinary();
  inline ::protocol::user::SummonRaffleBinary* release_summonrafflebinary();
  inline void set_allocated_summonrafflebinary(::protocol::user::SummonRaffleBinary* summonrafflebinary);

  // required .protocol.user.MoneyDrawingBinary moneyDrawingBinary = 4;
  inline bool has_moneydrawingbinary() const;
  inline void clear_moneydrawingbinary();
  static const int kMoneyDrawingBinaryFieldNumber = 4;
  inline const ::protocol::user::MoneyDrawingBinary& moneydrawingbinary() const;
  inline ::protocol::user::MoneyDrawingBinary* mutable_moneydrawingbinary();
  inline ::protocol::user::MoneyDrawingBinary* release_moneydrawingbinary();
  inline void set_allocated_moneydrawingbinary(::protocol::user::MoneyDrawingBinary* moneydrawingbinary);

  // required .protocol.user.BuyVitalityBinary BuyVitalityBinary = 5;
  inline bool has_buyvitalitybinary() const;
  inline void clear_buyvitalitybinary();
  static const int kBuyVitalityBinaryFieldNumber = 5;
  inline const ::protocol::user::BuyVitalityBinary& buyvitalitybinary() const;
  inline ::protocol::user::BuyVitalityBinary* mutable_buyvitalitybinary();
  inline ::protocol::user::BuyVitalityBinary* release_buyvitalitybinary();
  inline void set_allocated_buyvitalitybinary(::protocol::user::BuyVitalityBinary* buyvitalitybinary);

  // repeated .protocol.user.RechargeDataBinary RechargeDataBinary = 6;
  inline int rechargedatabinary_size() const;
  inline void clear_rechargedatabinary();
  static const int kRechargeDataBinaryFieldNumber = 6;
  inline const ::protocol::user::RechargeDataBinary& rechargedatabinary(int index) const;
  inline ::protocol::user::RechargeDataBinary* mutable_rechargedatabinary(int index);
  inline ::protocol::user::RechargeDataBinary* add_rechargedatabinary();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::RechargeDataBinary >&
      rechargedatabinary() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::RechargeDataBinary >*
      mutable_rechargedatabinary();

  // optional .protocol.user.SignBinary signBinary = 7;
  inline bool has_signbinary() const;
  inline void clear_signbinary();
  static const int kSignBinaryFieldNumber = 7;
  inline const ::protocol::user::SignBinary& signbinary() const;
  inline ::protocol::user::SignBinary* mutable_signbinary();
  inline ::protocol::user::SignBinary* release_signbinary();
  inline void set_allocated_signbinary(::protocol::user::SignBinary* signbinary);

  // repeated uint32 vipBoxID = 8;
  inline int vipboxid_size() const;
  inline void clear_vipboxid();
  static const int kVipBoxIDFieldNumber = 8;
  inline ::google::protobuf::uint32 vipboxid(int index) const;
  inline void set_vipboxid(int index, ::google::protobuf::uint32 value);
  inline void add_vipboxid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vipboxid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vipboxid();

  // @@protoc_insertion_point(class_scope:protocol.user.UserRewardBinary)
 private:
  inline void set_has_savedaystartinsec();
  inline void clear_has_savedaystartinsec();
  inline void set_has_loginsignrewardbinary();
  inline void clear_has_loginsignrewardbinary();
  inline void set_has_summonrafflebinary();
  inline void clear_has_summonrafflebinary();
  inline void set_has_moneydrawingbinary();
  inline void clear_has_moneydrawingbinary();
  inline void set_has_buyvitalitybinary();
  inline void clear_has_buyvitalitybinary();
  inline void set_has_signbinary();
  inline void clear_has_signbinary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protocol::user::LoginSignRewardBinary* loginsignrewardbinary_;
  ::protocol::user::SummonRaffleBinary* summonrafflebinary_;
  ::protocol::user::MoneyDrawingBinary* moneydrawingbinary_;
  ::protocol::user::BuyVitalityBinary* buyvitalitybinary_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::RechargeDataBinary > rechargedatabinary_;
  ::protocol::user::SignBinary* signbinary_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vipboxid_;
  ::google::protobuf::uint32 savedaystartinsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UserRewardBinary* default_instance_;
};
// -------------------------------------------------------------------

class LoginSignRewardBinary : public ::google::protobuf::Message {
 public:
  LoginSignRewardBinary();
  virtual ~LoginSignRewardBinary();

  LoginSignRewardBinary(const LoginSignRewardBinary& from);

  inline LoginSignRewardBinary& operator=(const LoginSignRewardBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSignRewardBinary& default_instance();

  void Swap(LoginSignRewardBinary* other);

  // implements Message ----------------------------------------------

  LoginSignRewardBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginSignRewardBinary& from);
  void MergeFrom(const LoginSignRewardBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lastSignDayStartInSec = 1;
  inline bool has_lastsigndaystartinsec() const;
  inline void clear_lastsigndaystartinsec();
  static const int kLastSignDayStartInSecFieldNumber = 1;
  inline ::google::protobuf::uint32 lastsigndaystartinsec() const;
  inline void set_lastsigndaystartinsec(::google::protobuf::uint32 value);

  // required uint32 continueSignDayNum = 2;
  inline bool has_continuesigndaynum() const;
  inline void clear_continuesigndaynum();
  static const int kContinueSignDayNumFieldNumber = 2;
  inline ::google::protobuf::uint32 continuesigndaynum() const;
  inline void set_continuesigndaynum(::google::protobuf::uint32 value);

  // optional bool isHaveWeekReward = 3;
  inline bool has_ishaveweekreward() const;
  inline void clear_ishaveweekreward();
  static const int kIsHaveWeekRewardFieldNumber = 3;
  inline bool ishaveweekreward() const;
  inline void set_ishaveweekreward(bool value);

  // required uint32 loginDayNum = 4;
  inline bool has_logindaynum() const;
  inline void clear_logindaynum();
  static const int kLoginDayNumFieldNumber = 4;
  inline ::google::protobuf::uint32 logindaynum() const;
  inline void set_logindaynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.LoginSignRewardBinary)
 private:
  inline void set_has_lastsigndaystartinsec();
  inline void clear_has_lastsigndaystartinsec();
  inline void set_has_continuesigndaynum();
  inline void clear_has_continuesigndaynum();
  inline void set_has_ishaveweekreward();
  inline void clear_has_ishaveweekreward();
  inline void set_has_logindaynum();
  inline void clear_has_logindaynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lastsigndaystartinsec_;
  ::google::protobuf::uint32 continuesigndaynum_;
  bool ishaveweekreward_;
  ::google::protobuf::uint32 logindaynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static LoginSignRewardBinary* default_instance_;
};
// -------------------------------------------------------------------

class SummonRaffleBinary : public ::google::protobuf::Message {
 public:
  SummonRaffleBinary();
  virtual ~SummonRaffleBinary();

  SummonRaffleBinary(const SummonRaffleBinary& from);

  inline SummonRaffleBinary& operator=(const SummonRaffleBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummonRaffleBinary& default_instance();

  void Swap(SummonRaffleBinary* other);

  // implements Message ----------------------------------------------

  SummonRaffleBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummonRaffleBinary& from);
  void MergeFrom(const SummonRaffleBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isHadRaffleNormalFirst = 1;
  inline bool has_ishadrafflenormalfirst() const;
  inline void clear_ishadrafflenormalfirst();
  static const int kIsHadRaffleNormalFirstFieldNumber = 1;
  inline bool ishadrafflenormalfirst() const;
  inline void set_ishadrafflenormalfirst(bool value);

  // required bool isHadRaffleEquipFirst = 2;
  inline bool has_ishadraffleequipfirst() const;
  inline void clear_ishadraffleequipfirst();
  static const int kIsHadRaffleEquipFirstFieldNumber = 2;
  inline bool ishadraffleequipfirst() const;
  inline void set_ishadraffleequipfirst(bool value);

  // required uint64 lastRaffleNormalTime = 3;
  inline bool has_lastrafflenormaltime() const;
  inline void clear_lastrafflenormaltime();
  static const int kLastRaffleNormalTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 lastrafflenormaltime() const;
  inline void set_lastrafflenormaltime(::google::protobuf::uint64 value);

  // required uint32 normalFreeRemainTimes = 4;
  inline bool has_normalfreeremaintimes() const;
  inline void clear_normalfreeremaintimes();
  static const int kNormalFreeRemainTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 normalfreeremaintimes() const;
  inline void set_normalfreeremaintimes(::google::protobuf::uint32 value);

  // required uint64 equipLastFreeRaffleTime = 5;
  inline bool has_equiplastfreeraffletime() const;
  inline void clear_equiplastfreeraffletime();
  static const int kEquipLastFreeRaffleTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 equiplastfreeraffletime() const;
  inline void set_equiplastfreeraffletime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.user.SummonRaffleBinary)
 private:
  inline void set_has_ishadrafflenormalfirst();
  inline void clear_has_ishadrafflenormalfirst();
  inline void set_has_ishadraffleequipfirst();
  inline void clear_has_ishadraffleequipfirst();
  inline void set_has_lastrafflenormaltime();
  inline void clear_has_lastrafflenormaltime();
  inline void set_has_normalfreeremaintimes();
  inline void clear_has_normalfreeremaintimes();
  inline void set_has_equiplastfreeraffletime();
  inline void clear_has_equiplastfreeraffletime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ishadrafflenormalfirst_;
  bool ishadraffleequipfirst_;
  ::google::protobuf::uint32 normalfreeremaintimes_;
  ::google::protobuf::uint64 lastrafflenormaltime_;
  ::google::protobuf::uint64 equiplastfreeraffletime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static SummonRaffleBinary* default_instance_;
};
// -------------------------------------------------------------------

class MoneyDrawingBinary : public ::google::protobuf::Message {
 public:
  MoneyDrawingBinary();
  virtual ~MoneyDrawingBinary();

  MoneyDrawingBinary(const MoneyDrawingBinary& from);

  inline MoneyDrawingBinary& operator=(const MoneyDrawingBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoneyDrawingBinary& default_instance();

  void Swap(MoneyDrawingBinary* other);

  // implements Message ----------------------------------------------

  MoneyDrawingBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoneyDrawingBinary& from);
  void MergeFrom(const MoneyDrawingBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 moneyDrawingTime = 1;
  inline bool has_moneydrawingtime() const;
  inline void clear_moneydrawingtime();
  static const int kMoneyDrawingTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 moneydrawingtime() const;
  inline void set_moneydrawingtime(::google::protobuf::uint32 value);

  // required uint32 maxMoneyDrawingTime = 2;
  inline bool has_maxmoneydrawingtime() const;
  inline void clear_maxmoneydrawingtime();
  static const int kMaxMoneyDrawingTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 maxmoneydrawingtime() const;
  inline void set_maxmoneydrawingtime(::google::protobuf::uint32 value);

  // required uint32 totalMoneyDrawingTime = 3;
  inline bool has_totalmoneydrawingtime() const;
  inline void clear_totalmoneydrawingtime();
  static const int kTotalMoneyDrawingTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 totalmoneydrawingtime() const;
  inline void set_totalmoneydrawingtime(::google::protobuf::uint32 value);

  // repeated uint32 moneyDrawingboxID = 4;
  inline int moneydrawingboxid_size() const;
  inline void clear_moneydrawingboxid();
  static const int kMoneyDrawingboxIDFieldNumber = 4;
  inline ::google::protobuf::uint32 moneydrawingboxid(int index) const;
  inline void set_moneydrawingboxid(int index, ::google::protobuf::uint32 value);
  inline void add_moneydrawingboxid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      moneydrawingboxid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_moneydrawingboxid();

  // @@protoc_insertion_point(class_scope:protocol.user.MoneyDrawingBinary)
 private:
  inline void set_has_moneydrawingtime();
  inline void clear_has_moneydrawingtime();
  inline void set_has_maxmoneydrawingtime();
  inline void clear_has_maxmoneydrawingtime();
  inline void set_has_totalmoneydrawingtime();
  inline void clear_has_totalmoneydrawingtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 moneydrawingtime_;
  ::google::protobuf::uint32 maxmoneydrawingtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > moneydrawingboxid_;
  ::google::protobuf::uint32 totalmoneydrawingtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static MoneyDrawingBinary* default_instance_;
};
// -------------------------------------------------------------------

class BuyVitalityBinary : public ::google::protobuf::Message {
 public:
  BuyVitalityBinary();
  virtual ~BuyVitalityBinary();

  BuyVitalityBinary(const BuyVitalityBinary& from);

  inline BuyVitalityBinary& operator=(const BuyVitalityBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyVitalityBinary& default_instance();

  void Swap(BuyVitalityBinary* other);

  // implements Message ----------------------------------------------

  BuyVitalityBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyVitalityBinary& from);
  void MergeFrom(const BuyVitalityBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 buyVitalityTimes = 1;
  inline bool has_buyvitalitytimes() const;
  inline void clear_buyvitalitytimes();
  static const int kBuyVitalityTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 buyvitalitytimes() const;
  inline void set_buyvitalitytimes(::google::protobuf::uint32 value);

  // required uint32 maxBuyVitalityTimes = 2;
  inline bool has_maxbuyvitalitytimes() const;
  inline void clear_maxbuyvitalitytimes();
  static const int kMaxBuyVitalityTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 maxbuyvitalitytimes() const;
  inline void set_maxbuyvitalitytimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.BuyVitalityBinary)
 private:
  inline void set_has_buyvitalitytimes();
  inline void clear_has_buyvitalitytimes();
  inline void set_has_maxbuyvitalitytimes();
  inline void clear_has_maxbuyvitalitytimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 buyvitalitytimes_;
  ::google::protobuf::uint32 maxbuyvitalitytimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static BuyVitalityBinary* default_instance_;
};
// -------------------------------------------------------------------

class RechargeDataBinary : public ::google::protobuf::Message {
 public:
  RechargeDataBinary();
  virtual ~RechargeDataBinary();

  RechargeDataBinary(const RechargeDataBinary& from);

  inline RechargeDataBinary& operator=(const RechargeDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RechargeDataBinary& default_instance();

  void Swap(RechargeDataBinary* other);

  // implements Message ----------------------------------------------

  RechargeDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RechargeDataBinary& from);
  void MergeFrom(const RechargeDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rechargeID = 1;
  inline bool has_rechargeid() const;
  inline void clear_rechargeid();
  static const int kRechargeIDFieldNumber = 1;
  inline ::google::protobuf::uint32 rechargeid() const;
  inline void set_rechargeid(::google::protobuf::uint32 value);

  // optional uint32 rechargeNum = 2;
  inline bool has_rechargenum() const;
  inline void clear_rechargenum();
  static const int kRechargeNumFieldNumber = 2;
  inline ::google::protobuf::uint32 rechargenum() const;
  inline void set_rechargenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.RechargeDataBinary)
 private:
  inline void set_has_rechargeid();
  inline void clear_has_rechargeid();
  inline void set_has_rechargenum();
  inline void clear_has_rechargenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rechargeid_;
  ::google::protobuf::uint32 rechargenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static RechargeDataBinary* default_instance_;
};
// -------------------------------------------------------------------

class SignBinary : public ::google::protobuf::Message {
 public:
  SignBinary();
  virtual ~SignBinary();

  SignBinary(const SignBinary& from);

  inline SignBinary& operator=(const SignBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignBinary& default_instance();

  void Swap(SignBinary* other);

  // implements Message ----------------------------------------------

  SignBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignBinary& from);
  void MergeFrom(const SignBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 signTimes = 1;
  inline bool has_signtimes() const;
  inline void clear_signtimes();
  static const int kSignTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 signtimes() const;
  inline void set_signtimes(::google::protobuf::uint32 value);

  // optional uint32 signState = 2;
  inline bool has_signstate() const;
  inline void clear_signstate();
  static const int kSignStateFieldNumber = 2;
  inline ::google::protobuf::uint32 signstate() const;
  inline void set_signstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.SignBinary)
 private:
  inline void set_has_signtimes();
  inline void clear_has_signtimes();
  inline void set_has_signstate();
  inline void clear_has_signstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 signtimes_;
  ::google::protobuf::uint32 signstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static SignBinary* default_instance_;
};
// -------------------------------------------------------------------

class FunctionUnlockFlag : public ::google::protobuf::Message {
 public:
  FunctionUnlockFlag();
  virtual ~FunctionUnlockFlag();

  FunctionUnlockFlag(const FunctionUnlockFlag& from);

  inline FunctionUnlockFlag& operator=(const FunctionUnlockFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionUnlockFlag& default_instance();

  void Swap(FunctionUnlockFlag* other);

  // implements Message ----------------------------------------------

  FunctionUnlockFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionUnlockFlag& from);
  void MergeFrom(const FunctionUnlockFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.FunctionUnlockFlag)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static FunctionUnlockFlag* default_instance_;
};
// -------------------------------------------------------------------

class FunctionUnlockData : public ::google::protobuf::Message {
 public:
  FunctionUnlockData();
  virtual ~FunctionUnlockData();

  FunctionUnlockData(const FunctionUnlockData& from);

  inline FunctionUnlockData& operator=(const FunctionUnlockData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionUnlockData& default_instance();

  void Swap(FunctionUnlockData* other);

  // implements Message ----------------------------------------------

  FunctionUnlockData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionUnlockData& from);
  void MergeFrom(const FunctionUnlockData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.FunctionUnlockFlag functionVec = 1;
  inline int functionvec_size() const;
  inline void clear_functionvec();
  static const int kFunctionVecFieldNumber = 1;
  inline const ::protocol::user::FunctionUnlockFlag& functionvec(int index) const;
  inline ::protocol::user::FunctionUnlockFlag* mutable_functionvec(int index);
  inline ::protocol::user::FunctionUnlockFlag* add_functionvec();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::FunctionUnlockFlag >&
      functionvec() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::FunctionUnlockFlag >*
      mutable_functionvec();

  // @@protoc_insertion_point(class_scope:protocol.user.FunctionUnlockData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::FunctionUnlockFlag > functionvec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static FunctionUnlockData* default_instance_;
};
// -------------------------------------------------------------------

class UserDataBinary : public ::google::protobuf::Message {
 public:
  UserDataBinary();
  virtual ~UserDataBinary();

  UserDataBinary(const UserDataBinary& from);

  inline UserDataBinary& operator=(const UserDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDataBinary& default_instance();

  void Swap(UserDataBinary* other);

  // implements Message ----------------------------------------------

  UserDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDataBinary& from);
  void MergeFrom(const UserDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes isUnlockFunctionVec = 1;
  inline bool has_isunlockfunctionvec() const;
  inline void clear_isunlockfunctionvec();
  static const int kIsUnlockFunctionVecFieldNumber = 1;
  inline const ::std::string& isunlockfunctionvec() const;
  inline void set_isunlockfunctionvec(const ::std::string& value);
  inline void set_isunlockfunctionvec(const char* value);
  inline void set_isunlockfunctionvec(const void* value, size_t size);
  inline ::std::string* mutable_isunlockfunctionvec();
  inline ::std::string* release_isunlockfunctionvec();
  inline void set_allocated_isunlockfunctionvec(::std::string* isunlockfunctionvec);

  // repeated uint32 loginDayVec = 2;
  inline int logindayvec_size() const;
  inline void clear_logindayvec();
  static const int kLoginDayVecFieldNumber = 2;
  inline ::google::protobuf::uint32 logindayvec(int index) const;
  inline void set_logindayvec(int index, ::google::protobuf::uint32 value);
  inline void add_logindayvec(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      logindayvec() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_logindayvec();

  // required uint32 completedGuideStage = 3;
  inline bool has_completedguidestage() const;
  inline void clear_completedguidestage();
  static const int kCompletedGuideStageFieldNumber = 3;
  inline ::google::protobuf::uint32 completedguidestage() const;
  inline void set_completedguidestage(::google::protobuf::uint32 value);

  // optional bool hasPassNewCharGuide = 4;
  inline bool has_haspassnewcharguide() const;
  inline void clear_haspassnewcharguide();
  static const int kHasPassNewCharGuideFieldNumber = 4;
  inline bool haspassnewcharguide() const;
  inline void set_haspassnewcharguide(bool value);

  // @@protoc_insertion_point(class_scope:protocol.user.UserDataBinary)
 private:
  inline void set_has_isunlockfunctionvec();
  inline void clear_has_isunlockfunctionvec();
  inline void set_has_completedguidestage();
  inline void clear_has_completedguidestage();
  inline void set_has_haspassnewcharguide();
  inline void clear_has_haspassnewcharguide();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* isunlockfunctionvec_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > logindayvec_;
  ::google::protobuf::uint32 completedguidestage_;
  bool haspassnewcharguide_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UserDataBinary* default_instance_;
};
// -------------------------------------------------------------------

class DiscoveryBinary : public ::google::protobuf::Message {
 public:
  DiscoveryBinary();
  virtual ~DiscoveryBinary();

  DiscoveryBinary(const DiscoveryBinary& from);

  inline DiscoveryBinary& operator=(const DiscoveryBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveryBinary& default_instance();

  void Swap(DiscoveryBinary* other);

  // implements Message ----------------------------------------------

  DiscoveryBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiscoveryBinary& from);
  void MergeFrom(const DiscoveryBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 nowSceneID = 1;
  inline bool has_nowsceneid() const;
  inline void clear_nowsceneid();
  static const int kNowSceneIDFieldNumber = 1;
  inline ::google::protobuf::uint32 nowsceneid() const;
  inline void set_nowsceneid(::google::protobuf::uint32 value);

  // required uint32 posX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  inline ::google::protobuf::uint32 posx() const;
  inline void set_posx(::google::protobuf::uint32 value);

  // required uint32 posY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  inline ::google::protobuf::uint32 posy() const;
  inline void set_posy(::google::protobuf::uint32 value);

  // required uint32 thoughtLevel = 4;
  inline bool has_thoughtlevel() const;
  inline void clear_thoughtlevel();
  static const int kThoughtLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 thoughtlevel() const;
  inline void set_thoughtlevel(::google::protobuf::uint32 value);

  // required uint32 thoughtExp = 5;
  inline bool has_thoughtexp() const;
  inline void clear_thoughtexp();
  static const int kThoughtExpFieldNumber = 5;
  inline ::google::protobuf::uint32 thoughtexp() const;
  inline void set_thoughtexp(::google::protobuf::uint32 value);

  // repeated .protocol.user.DiscoveryData discoveryData = 7;
  inline int discoverydata_size() const;
  inline void clear_discoverydata();
  static const int kDiscoveryDataFieldNumber = 7;
  inline const ::protocol::user::DiscoveryData& discoverydata(int index) const;
  inline ::protocol::user::DiscoveryData* mutable_discoverydata(int index);
  inline ::protocol::user::DiscoveryData* add_discoverydata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DiscoveryData >&
      discoverydata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DiscoveryData >*
      mutable_discoverydata();

  // repeated .protocol.user.GridData gridData = 8;
  inline int griddata_size() const;
  inline void clear_griddata();
  static const int kGridDataFieldNumber = 8;
  inline const ::protocol::user::GridData& griddata(int index) const;
  inline ::protocol::user::GridData* mutable_griddata(int index);
  inline ::protocol::user::GridData* add_griddata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::GridData >&
      griddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::GridData >*
      mutable_griddata();

  // required uint32 monsterLevel = 9;
  inline bool has_monsterlevel() const;
  inline void clear_monsterlevel();
  static const int kMonsterLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 monsterlevel() const;
  inline void set_monsterlevel(::google::protobuf::uint32 value);

  // repeated .protocol.user.OfflineRewardData offlineRewardData = 10;
  inline int offlinerewarddata_size() const;
  inline void clear_offlinerewarddata();
  static const int kOfflineRewardDataFieldNumber = 10;
  inline const ::protocol::user::OfflineRewardData& offlinerewarddata(int index) const;
  inline ::protocol::user::OfflineRewardData* mutable_offlinerewarddata(int index);
  inline ::protocol::user::OfflineRewardData* add_offlinerewarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineRewardData >&
      offlinerewarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineRewardData >*
      mutable_offlinerewarddata();

  // @@protoc_insertion_point(class_scope:protocol.user.DiscoveryBinary)
 private:
  inline void set_has_nowsceneid();
  inline void clear_has_nowsceneid();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_thoughtlevel();
  inline void clear_has_thoughtlevel();
  inline void set_has_thoughtexp();
  inline void clear_has_thoughtexp();
  inline void set_has_monsterlevel();
  inline void clear_has_monsterlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 nowsceneid_;
  ::google::protobuf::uint32 posx_;
  ::google::protobuf::uint32 posy_;
  ::google::protobuf::uint32 thoughtlevel_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::DiscoveryData > discoverydata_;
  ::google::protobuf::uint32 thoughtexp_;
  ::google::protobuf::uint32 monsterlevel_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::GridData > griddata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineRewardData > offlinerewarddata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DiscoveryBinary* default_instance_;
};
// -------------------------------------------------------------------

class OfflineRewardData : public ::google::protobuf::Message {
 public:
  OfflineRewardData();
  virtual ~OfflineRewardData();

  OfflineRewardData(const OfflineRewardData& from);

  inline OfflineRewardData& operator=(const OfflineRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineRewardData& default_instance();

  void Swap(OfflineRewardData* other);

  // implements Message ----------------------------------------------

  OfflineRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineRewardData& from);
  void MergeFrom(const OfflineRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 sceneID = 2;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 2;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // required uint32 needTimeInSec = 3;
  inline bool has_needtimeinsec() const;
  inline void clear_needtimeinsec();
  static const int kNeedTimeInSecFieldNumber = 3;
  inline ::google::protobuf::uint32 needtimeinsec() const;
  inline void set_needtimeinsec(::google::protobuf::uint32 value);

  // required uint32 startTimeInSec = 4;
  inline bool has_starttimeinsec() const;
  inline void clear_starttimeinsec();
  static const int kStartTimeInSecFieldNumber = 4;
  inline ::google::protobuf::uint32 starttimeinsec() const;
  inline void set_starttimeinsec(::google::protobuf::uint32 value);

  // required uint32 isUnlock = 5;
  inline bool has_isunlock() const;
  inline void clear_isunlock();
  static const int kIsUnlockFieldNumber = 5;
  inline ::google::protobuf::uint32 isunlock() const;
  inline void set_isunlock(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.OfflineRewardData)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_needtimeinsec();
  inline void clear_has_needtimeinsec();
  inline void set_has_starttimeinsec();
  inline void clear_has_starttimeinsec();
  inline void set_has_isunlock();
  inline void clear_has_isunlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 needtimeinsec_;
  ::google::protobuf::uint32 starttimeinsec_;
  ::google::protobuf::uint32 isunlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static OfflineRewardData* default_instance_;
};
// -------------------------------------------------------------------

class DiscoveryData : public ::google::protobuf::Message {
 public:
  DiscoveryData();
  virtual ~DiscoveryData();

  DiscoveryData(const DiscoveryData& from);

  inline DiscoveryData& operator=(const DiscoveryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveryData& default_instance();

  void Swap(DiscoveryData* other);

  // implements Message ----------------------------------------------

  DiscoveryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiscoveryData& from);
  void MergeFrom(const DiscoveryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sceneID = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // required uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.DiscoveryData)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DiscoveryData* default_instance_;
};
// -------------------------------------------------------------------

class GridData : public ::google::protobuf::Message {
 public:
  GridData();
  virtual ~GridData();

  GridData(const GridData& from);

  inline GridData& operator=(const GridData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridData& default_instance();

  void Swap(GridData* other);

  // implements Message ----------------------------------------------

  GridData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridData& from);
  void MergeFrom(const GridData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::uint32 objid() const;
  inline void set_objid(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 isBind = 3;
  inline bool has_isbind() const;
  inline void clear_isbind();
  static const int kIsBindFieldNumber = 3;
  inline ::google::protobuf::uint32 isbind() const;
  inline void set_isbind(::google::protobuf::uint32 value);

  // required uint32 timeInSec = 4;
  inline bool has_timeinsec() const;
  inline void clear_timeinsec();
  static const int kTimeInSecFieldNumber = 4;
  inline ::google::protobuf::uint32 timeinsec() const;
  inline void set_timeinsec(::google::protobuf::uint32 value);

  // required uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 index = 6;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required bool isOpen = 7;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 7;
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // required bool openTimeInSec = 8;
  inline bool has_opentimeinsec() const;
  inline void clear_opentimeinsec();
  static const int kOpenTimeInSecFieldNumber = 8;
  inline bool opentimeinsec() const;
  inline void set_opentimeinsec(bool value);

  // required uint32 addSpeedNeedItemNum = 9;
  inline bool has_addspeedneeditemnum() const;
  inline void clear_addspeedneeditemnum();
  static const int kAddSpeedNeedItemNumFieldNumber = 9;
  inline ::google::protobuf::uint32 addspeedneeditemnum() const;
  inline void set_addspeedneeditemnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.GridData)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_isbind();
  inline void clear_has_isbind();
  inline void set_has_timeinsec();
  inline void clear_has_timeinsec();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_isopen();
  inline void clear_has_isopen();
  inline void set_has_opentimeinsec();
  inline void clear_has_opentimeinsec();
  inline void set_has_addspeedneeditemnum();
  inline void clear_has_addspeedneeditemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 objid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 isbind_;
  ::google::protobuf::uint32 timeinsec_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 index_;
  bool isopen_;
  bool opentimeinsec_;
  ::google::protobuf::uint32 addspeedneeditemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static GridData* default_instance_;
};
// -------------------------------------------------------------------

class UserRelationSaveData : public ::google::protobuf::Message {
 public:
  UserRelationSaveData();
  virtual ~UserRelationSaveData();

  UserRelationSaveData(const UserRelationSaveData& from);

  inline UserRelationSaveData& operator=(const UserRelationSaveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRelationSaveData& default_instance();

  void Swap(UserRelationSaveData* other);

  // implements Message ----------------------------------------------

  UserRelationSaveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRelationSaveData& from);
  void MergeFrom(const UserRelationSaveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bytes clubData = 2;
  inline bool has_clubdata() const;
  inline void clear_clubdata();
  static const int kClubDataFieldNumber = 2;
  inline const ::std::string& clubdata() const;
  inline void set_clubdata(const ::std::string& value);
  inline void set_clubdata(const char* value);
  inline void set_clubdata(const void* value, size_t size);
  inline ::std::string* mutable_clubdata();
  inline ::std::string* release_clubdata();
  inline void set_allocated_clubdata(::std::string* clubdata);

  // optional bytes message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:protocol.user.UserRelationSaveData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_clubdata();
  inline void clear_has_clubdata();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clubdata_;
  ::std::string* message_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static UserRelationSaveData* default_instance_;
};
// -------------------------------------------------------------------

class WaitJoinClubData : public ::google::protobuf::Message {
 public:
  WaitJoinClubData();
  virtual ~WaitJoinClubData();

  WaitJoinClubData(const WaitJoinClubData& from);

  inline WaitJoinClubData& operator=(const WaitJoinClubData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitJoinClubData& default_instance();

  void Swap(WaitJoinClubData* other);

  // implements Message ----------------------------------------------

  WaitJoinClubData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitJoinClubData& from);
  void MergeFrom(const WaitJoinClubData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clubID = 1;
  inline bool has_clubid() const;
  inline void clear_clubid();
  static const int kClubIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clubid() const;
  inline void set_clubid(::google::protobuf::uint32 value);

  // required uint32 requestTimeInSec = 2;
  inline bool has_requesttimeinsec() const;
  inline void clear_requesttimeinsec();
  static const int kRequestTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 requesttimeinsec() const;
  inline void set_requesttimeinsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.WaitJoinClubData)
 private:
  inline void set_has_clubid();
  inline void clear_has_clubid();
  inline void set_has_requesttimeinsec();
  inline void clear_has_requesttimeinsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 clubid_;
  ::google::protobuf::uint32 requesttimeinsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static WaitJoinClubData* default_instance_;
};
// -------------------------------------------------------------------

class ClubSaveData : public ::google::protobuf::Message {
 public:
  ClubSaveData();
  virtual ~ClubSaveData();

  ClubSaveData(const ClubSaveData& from);

  inline ClubSaveData& operator=(const ClubSaveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubSaveData& default_instance();

  void Swap(ClubSaveData* other);

  // implements Message ----------------------------------------------

  ClubSaveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubSaveData& from);
  void MergeFrom(const ClubSaveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 clubID = 1;
  inline bool has_clubid() const;
  inline void clear_clubid();
  static const int kClubIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clubid() const;
  inline void set_clubid(::google::protobuf::uint32 value);

  // optional uint32 lastLeaveClubTimeInSec = 2;
  inline bool has_lastleaveclubtimeinsec() const;
  inline void clear_lastleaveclubtimeinsec();
  static const int kLastLeaveClubTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 lastleaveclubtimeinsec() const;
  inline void set_lastleaveclubtimeinsec(::google::protobuf::uint32 value);

  // optional uint32 clubContributionLevel = 3;
  inline bool has_clubcontributionlevel() const;
  inline void clear_clubcontributionlevel();
  static const int kClubContributionLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 clubcontributionlevel() const;
  inline void set_clubcontributionlevel(::google::protobuf::uint32 value);

  // optional uint32 clubContributionValue = 4;
  inline bool has_clubcontributionvalue() const;
  inline void clear_clubcontributionvalue();
  static const int kClubContributionValueFieldNumber = 4;
  inline ::google::protobuf::uint32 clubcontributionvalue() const;
  inline void set_clubcontributionvalue(::google::protobuf::uint32 value);

  // repeated .protocol.user.WaitJoinClubData waitJoinClubList = 5;
  inline int waitjoinclublist_size() const;
  inline void clear_waitjoinclublist();
  static const int kWaitJoinClubListFieldNumber = 5;
  inline const ::protocol::user::WaitJoinClubData& waitjoinclublist(int index) const;
  inline ::protocol::user::WaitJoinClubData* mutable_waitjoinclublist(int index);
  inline ::protocol::user::WaitJoinClubData* add_waitjoinclublist();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::WaitJoinClubData >&
      waitjoinclublist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::WaitJoinClubData >*
      mutable_waitjoinclublist();

  // optional uint32 saveTimeInSec = 6;
  inline bool has_savetimeinsec() const;
  inline void clear_savetimeinsec();
  static const int kSaveTimeInSecFieldNumber = 6;
  inline ::google::protobuf::uint32 savetimeinsec() const;
  inline void set_savetimeinsec(::google::protobuf::uint32 value);

  // optional uint32 clubTitle = 7;
  inline bool has_clubtitle() const;
  inline void clear_clubtitle();
  static const int kClubTitleFieldNumber = 7;
  inline ::google::protobuf::uint32 clubtitle() const;
  inline void set_clubtitle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.ClubSaveData)
 private:
  inline void set_has_clubid();
  inline void clear_has_clubid();
  inline void set_has_lastleaveclubtimeinsec();
  inline void clear_has_lastleaveclubtimeinsec();
  inline void set_has_clubcontributionlevel();
  inline void clear_has_clubcontributionlevel();
  inline void set_has_clubcontributionvalue();
  inline void clear_has_clubcontributionvalue();
  inline void set_has_savetimeinsec();
  inline void clear_has_savetimeinsec();
  inline void set_has_clubtitle();
  inline void clear_has_clubtitle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 clubid_;
  ::google::protobuf::uint32 lastleaveclubtimeinsec_;
  ::google::protobuf::uint32 clubcontributionlevel_;
  ::google::protobuf::uint32 clubcontributionvalue_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::WaitJoinClubData > waitjoinclublist_;
  ::google::protobuf::uint32 savetimeinsec_;
  ::google::protobuf::uint32 clubtitle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static ClubSaveData* default_instance_;
};
// -------------------------------------------------------------------

class VipTypeData : public ::google::protobuf::Message {
 public:
  VipTypeData();
  virtual ~VipTypeData();

  VipTypeData(const VipTypeData& from);

  inline VipTypeData& operator=(const VipTypeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipTypeData& default_instance();

  void Swap(VipTypeData* other);

  // implements Message ----------------------------------------------

  VipTypeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipTypeData& from);
  void MergeFrom(const VipTypeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 vipType = 1;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kVipTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 viptype() const;
  inline void set_viptype(::google::protobuf::uint32 value);

  // required uint32 endTimeInSec = 2;
  inline bool has_endtimeinsec() const;
  inline void clear_endtimeinsec();
  static const int kEndTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 endtimeinsec() const;
  inline void set_endtimeinsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.VipTypeData)
 private:
  inline void set_has_viptype();
  inline void clear_has_viptype();
  inline void set_has_endtimeinsec();
  inline void clear_has_endtimeinsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 viptype_;
  ::google::protobuf::uint32 endtimeinsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static VipTypeData* default_instance_;
};
// -------------------------------------------------------------------

class OfflineOpenVipData : public ::google::protobuf::Message {
 public:
  OfflineOpenVipData();
  virtual ~OfflineOpenVipData();

  OfflineOpenVipData(const OfflineOpenVipData& from);

  inline OfflineOpenVipData& operator=(const OfflineOpenVipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineOpenVipData& default_instance();

  void Swap(OfflineOpenVipData* other);

  // implements Message ----------------------------------------------

  OfflineOpenVipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineOpenVipData& from);
  void MergeFrom(const OfflineOpenVipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string requestUserName = 1;
  inline bool has_requestusername() const;
  inline void clear_requestusername();
  static const int kRequestUserNameFieldNumber = 1;
  inline const ::std::string& requestusername() const;
  inline void set_requestusername(const ::std::string& value);
  inline void set_requestusername(const char* value);
  inline void set_requestusername(const char* value, size_t size);
  inline ::std::string* mutable_requestusername();
  inline ::std::string* release_requestusername();
  inline void set_allocated_requestusername(::std::string* requestusername);

  // required uint32 openTimeInSec = 2;
  inline bool has_opentimeinsec() const;
  inline void clear_opentimeinsec();
  static const int kOpenTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 opentimeinsec() const;
  inline void set_opentimeinsec(::google::protobuf::uint32 value);

  // required uint32 effectTimeInDay = 3;
  inline bool has_effecttimeinday() const;
  inline void clear_effecttimeinday();
  static const int kEffectTimeInDayFieldNumber = 3;
  inline ::google::protobuf::uint32 effecttimeinday() const;
  inline void set_effecttimeinday(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.OfflineOpenVipData)
 private:
  inline void set_has_requestusername();
  inline void clear_has_requestusername();
  inline void set_has_opentimeinsec();
  inline void clear_has_opentimeinsec();
  inline void set_has_effecttimeinday();
  inline void clear_has_effecttimeinday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* requestusername_;
  ::google::protobuf::uint32 opentimeinsec_;
  ::google::protobuf::uint32 effecttimeinday_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static OfflineOpenVipData* default_instance_;
};
// -------------------------------------------------------------------

class VipBinary : public ::google::protobuf::Message {
 public:
  VipBinary();
  virtual ~VipBinary();

  VipBinary(const VipBinary& from);

  inline VipBinary& operator=(const VipBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipBinary& default_instance();

  void Swap(VipBinary* other);

  // implements Message ----------------------------------------------

  VipBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipBinary& from);
  void MergeFrom(const VipBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 vipLevel = 1;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional uint32 vipGrowValue = 2;
  inline bool has_vipgrowvalue() const;
  inline void clear_vipgrowvalue();
  static const int kVipGrowValueFieldNumber = 2;
  inline ::google::protobuf::uint32 vipgrowvalue() const;
  inline void set_vipgrowvalue(::google::protobuf::uint32 value);

  // repeated .protocol.user.OfflineOpenVipData offlineOpenVipDataList = 3;
  inline int offlineopenvipdatalist_size() const;
  inline void clear_offlineopenvipdatalist();
  static const int kOfflineOpenVipDataListFieldNumber = 3;
  inline const ::protocol::user::OfflineOpenVipData& offlineopenvipdatalist(int index) const;
  inline ::protocol::user::OfflineOpenVipData* mutable_offlineopenvipdatalist(int index);
  inline ::protocol::user::OfflineOpenVipData* add_offlineopenvipdatalist();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineOpenVipData >&
      offlineopenvipdatalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineOpenVipData >*
      mutable_offlineopenvipdatalist();

  // optional uint32 vipEndTimeInSec = 4;
  inline bool has_vipendtimeinsec() const;
  inline void clear_vipendtimeinsec();
  static const int kVipEndTimeInSecFieldNumber = 4;
  inline ::google::protobuf::uint32 vipendtimeinsec() const;
  inline void set_vipendtimeinsec(::google::protobuf::uint32 value);

  // repeated .protocol.user.VipTypeData vipTypeDataList = 5;
  inline int viptypedatalist_size() const;
  inline void clear_viptypedatalist();
  static const int kVipTypeDataListFieldNumber = 5;
  inline const ::protocol::user::VipTypeData& viptypedatalist(int index) const;
  inline ::protocol::user::VipTypeData* mutable_viptypedatalist(int index);
  inline ::protocol::user::VipTypeData* add_viptypedatalist();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::VipTypeData >&
      viptypedatalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::VipTypeData >*
      mutable_viptypedatalist();

  // optional uint32 lastCheckOverdueTimeInSec = 6;
  inline bool has_lastcheckoverduetimeinsec() const;
  inline void clear_lastcheckoverduetimeinsec();
  static const int kLastCheckOverdueTimeInSecFieldNumber = 6;
  inline ::google::protobuf::uint32 lastcheckoverduetimeinsec() const;
  inline void set_lastcheckoverduetimeinsec(::google::protobuf::uint32 value);

  // optional uint32 vipType = 7;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kVipTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 viptype() const;
  inline void set_viptype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.VipBinary)
 private:
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_vipgrowvalue();
  inline void clear_has_vipgrowvalue();
  inline void set_has_vipendtimeinsec();
  inline void clear_has_vipendtimeinsec();
  inline void set_has_lastcheckoverduetimeinsec();
  inline void clear_has_lastcheckoverduetimeinsec();
  inline void set_has_viptype();
  inline void clear_has_viptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 vipgrowvalue_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineOpenVipData > offlineopenvipdatalist_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::VipTypeData > viptypedatalist_;
  ::google::protobuf::uint32 vipendtimeinsec_;
  ::google::protobuf::uint32 lastcheckoverduetimeinsec_;
  ::google::protobuf::uint32 viptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static VipBinary* default_instance_;
};
// -------------------------------------------------------------------

class WarDataBinary : public ::google::protobuf::Message {
 public:
  WarDataBinary();
  virtual ~WarDataBinary();

  WarDataBinary(const WarDataBinary& from);

  inline WarDataBinary& operator=(const WarDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarDataBinary& default_instance();

  void Swap(WarDataBinary* other);

  // implements Message ----------------------------------------------

  WarDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarDataBinary& from);
  void MergeFrom(const WarDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 winTimes = 1;
  inline bool has_wintimes() const;
  inline void clear_wintimes();
  static const int kWinTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 wintimes() const;
  inline void set_wintimes(::google::protobuf::uint32 value);

  // optional uint32 loseTimes = 2;
  inline bool has_losetimes() const;
  inline void clear_losetimes();
  static const int kLoseTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 losetimes() const;
  inline void set_losetimes(::google::protobuf::uint32 value);

  // optional uint32 pvpTimes = 3;
  inline bool has_pvptimes() const;
  inline void clear_pvptimes();
  static const int kPvpTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 pvptimes() const;
  inline void set_pvptimes(::google::protobuf::uint32 value);

  // optional uint32 saveTimeInSec = 4;
  inline bool has_savetimeinsec() const;
  inline void clear_savetimeinsec();
  static const int kSaveTimeInSecFieldNumber = 4;
  inline ::google::protobuf::uint32 savetimeinsec() const;
  inline void set_savetimeinsec(::google::protobuf::uint32 value);

  // optional uint32 weekWinTimes = 5;
  inline bool has_weekwintimes() const;
  inline void clear_weekwintimes();
  static const int kWeekWinTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 weekwintimes() const;
  inline void set_weekwintimes(::google::protobuf::uint32 value);

  // optional uint32 weekLoseTimes = 6;
  inline bool has_weeklosetimes() const;
  inline void clear_weeklosetimes();
  static const int kWeekLoseTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 weeklosetimes() const;
  inline void set_weeklosetimes(::google::protobuf::uint32 value);

  // optional uint32 weekPvpTimes = 7;
  inline bool has_weekpvptimes() const;
  inline void clear_weekpvptimes();
  static const int kWeekPvpTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 weekpvptimes() const;
  inline void set_weekpvptimes(::google::protobuf::uint32 value);

  // optional uint32 weekKillNum = 8;
  inline bool has_weekkillnum() const;
  inline void clear_weekkillnum();
  static const int kWeekKillNumFieldNumber = 8;
  inline ::google::protobuf::uint32 weekkillnum() const;
  inline void set_weekkillnum(::google::protobuf::uint32 value);

  // optional uint32 weekKilledNum = 9;
  inline bool has_weekkillednum() const;
  inline void clear_weekkillednum();
  static const int kWeekKilledNumFieldNumber = 9;
  inline ::google::protobuf::uint32 weekkillednum() const;
  inline void set_weekkillednum(::google::protobuf::uint32 value);

  // optional uint32 killNum = 10;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 10;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 killedNum = 11;
  inline bool has_killednum() const;
  inline void clear_killednum();
  static const int kKilledNumFieldNumber = 11;
  inline ::google::protobuf::uint32 killednum() const;
  inline void set_killednum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.WarDataBinary)
 private:
  inline void set_has_wintimes();
  inline void clear_has_wintimes();
  inline void set_has_losetimes();
  inline void clear_has_losetimes();
  inline void set_has_pvptimes();
  inline void clear_has_pvptimes();
  inline void set_has_savetimeinsec();
  inline void clear_has_savetimeinsec();
  inline void set_has_weekwintimes();
  inline void clear_has_weekwintimes();
  inline void set_has_weeklosetimes();
  inline void clear_has_weeklosetimes();
  inline void set_has_weekpvptimes();
  inline void clear_has_weekpvptimes();
  inline void set_has_weekkillnum();
  inline void clear_has_weekkillnum();
  inline void set_has_weekkillednum();
  inline void clear_has_weekkillednum();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_killednum();
  inline void clear_has_killednum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 wintimes_;
  ::google::protobuf::uint32 losetimes_;
  ::google::protobuf::uint32 pvptimes_;
  ::google::protobuf::uint32 savetimeinsec_;
  ::google::protobuf::uint32 weekwintimes_;
  ::google::protobuf::uint32 weeklosetimes_;
  ::google::protobuf::uint32 weekpvptimes_;
  ::google::protobuf::uint32 weekkillnum_;
  ::google::protobuf::uint32 weekkillednum_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 killednum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static WarDataBinary* default_instance_;
};
// -------------------------------------------------------------------

class FriendDataBinary : public ::google::protobuf::Message {
 public:
  FriendDataBinary();
  virtual ~FriendDataBinary();

  FriendDataBinary(const FriendDataBinary& from);

  inline FriendDataBinary& operator=(const FriendDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDataBinary& default_instance();

  void Swap(FriendDataBinary* other);

  // implements Message ----------------------------------------------

  FriendDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDataBinary& from);
  void MergeFrom(const FriendDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 addMeUserIDList = 1;
  inline int addmeuseridlist_size() const;
  inline void clear_addmeuseridlist();
  static const int kAddMeUserIDListFieldNumber = 1;
  inline ::google::protobuf::uint32 addmeuseridlist(int index) const;
  inline void set_addmeuseridlist(int index, ::google::protobuf::uint32 value);
  inline void add_addmeuseridlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      addmeuseridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_addmeuseridlist();

  // required uint32 todayGetVitalityTimes = 2;
  inline bool has_todaygetvitalitytimes() const;
  inline void clear_todaygetvitalitytimes();
  static const int kTodayGetVitalityTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 todaygetvitalitytimes() const;
  inline void set_todaygetvitalitytimes(::google::protobuf::uint32 value);

  // required uint32 lastGetVitalityTimeInSec = 3;
  inline bool has_lastgetvitalitytimeinsec() const;
  inline void clear_lastgetvitalitytimeinsec();
  static const int kLastGetVitalityTimeInSecFieldNumber = 3;
  inline ::google::protobuf::uint32 lastgetvitalitytimeinsec() const;
  inline void set_lastgetvitalitytimeinsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.FriendDataBinary)
 private:
  inline void set_has_todaygetvitalitytimes();
  inline void clear_has_todaygetvitalitytimes();
  inline void set_has_lastgetvitalitytimeinsec();
  inline void clear_has_lastgetvitalitytimeinsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > addmeuseridlist_;
  ::google::protobuf::uint32 todaygetvitalitytimes_;
  ::google::protobuf::uint32 lastgetvitalitytimeinsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static FriendDataBinary* default_instance_;
};
// -------------------------------------------------------------------

class DuplDropBinary : public ::google::protobuf::Message {
 public:
  DuplDropBinary();
  virtual ~DuplDropBinary();

  DuplDropBinary(const DuplDropBinary& from);

  inline DuplDropBinary& operator=(const DuplDropBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplDropBinary& default_instance();

  void Swap(DuplDropBinary* other);

  // implements Message ----------------------------------------------

  DuplDropBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplDropBinary& from);
  void MergeFrom(const DuplDropBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 duplID = 1;
  inline bool has_duplid() const;
  inline void clear_duplid();
  static const int kDuplIDFieldNumber = 1;
  inline ::google::protobuf::uint32 duplid() const;
  inline void set_duplid(::google::protobuf::uint32 value);

  // required uint32 dropExp = 2;
  inline bool has_dropexp() const;
  inline void clear_dropexp();
  static const int kDropExpFieldNumber = 2;
  inline ::google::protobuf::uint32 dropexp() const;
  inline void set_dropexp(::google::protobuf::uint32 value);

  // required uint32 dropMoney = 3;
  inline bool has_dropmoney() const;
  inline void clear_dropmoney();
  static const int kDropMoneyFieldNumber = 3;
  inline ::google::protobuf::uint32 dropmoney() const;
  inline void set_dropmoney(::google::protobuf::uint32 value);

  // repeated .protocol.user.DropItemData itemData = 4;
  inline int itemdata_size() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 4;
  inline const ::protocol::user::DropItemData& itemdata(int index) const;
  inline ::protocol::user::DropItemData* mutable_itemdata(int index);
  inline ::protocol::user::DropItemData* add_itemdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DropItemData >&
      itemdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DropItemData >*
      mutable_itemdata();

  // repeated .protocol.user.DropEquipData equipData = 5;
  inline int equipdata_size() const;
  inline void clear_equipdata();
  static const int kEquipDataFieldNumber = 5;
  inline const ::protocol::user::DropEquipData& equipdata(int index) const;
  inline ::protocol::user::DropEquipData* mutable_equipdata(int index);
  inline ::protocol::user::DropEquipData* add_equipdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DropEquipData >&
      equipdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DropEquipData >*
      mutable_equipdata();

  // repeated .protocol.user.DropPetData petData = 6;
  inline int petdata_size() const;
  inline void clear_petdata();
  static const int kPetDataFieldNumber = 6;
  inline const ::protocol::user::DropPetData& petdata(int index) const;
  inline ::protocol::user::DropPetData* mutable_petdata(int index);
  inline ::protocol::user::DropPetData* add_petdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DropPetData >&
      petdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DropPetData >*
      mutable_petdata();

  // @@protoc_insertion_point(class_scope:protocol.user.DuplDropBinary)
 private:
  inline void set_has_duplid();
  inline void clear_has_duplid();
  inline void set_has_dropexp();
  inline void clear_has_dropexp();
  inline void set_has_dropmoney();
  inline void clear_has_dropmoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 duplid_;
  ::google::protobuf::uint32 dropexp_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::DropItemData > itemdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::DropEquipData > equipdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::DropPetData > petdata_;
  ::google::protobuf::uint32 dropmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DuplDropBinary* default_instance_;
};
// -------------------------------------------------------------------

class DropItemData : public ::google::protobuf::Message {
 public:
  DropItemData();
  virtual ~DropItemData();

  DropItemData(const DropItemData& from);

  inline DropItemData& operator=(const DropItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropItemData& default_instance();

  void Swap(DropItemData* other);

  // implements Message ----------------------------------------------

  DropItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropItemData& from);
  void MergeFrom(const DropItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 itemBaseID = 1;
  inline bool has_itembaseid() const;
  inline void clear_itembaseid();
  static const int kItemBaseIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itembaseid() const;
  inline void set_itembaseid(::google::protobuf::uint32 value);

  // required uint32 bindType = 2;
  inline bool has_bindtype() const;
  inline void clear_bindtype();
  static const int kBindTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 bindtype() const;
  inline void set_bindtype(::google::protobuf::uint32 value);

  // required uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.DropItemData)
 private:
  inline void set_has_itembaseid();
  inline void clear_has_itembaseid();
  inline void set_has_bindtype();
  inline void clear_has_bindtype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itembaseid_;
  ::google::protobuf::uint32 bindtype_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DropItemData* default_instance_;
};
// -------------------------------------------------------------------

class DropEquipData : public ::google::protobuf::Message {
 public:
  DropEquipData();
  virtual ~DropEquipData();

  DropEquipData(const DropEquipData& from);

  inline DropEquipData& operator=(const DropEquipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropEquipData& default_instance();

  void Swap(DropEquipData* other);

  // implements Message ----------------------------------------------

  DropEquipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropEquipData& from);
  void MergeFrom(const DropEquipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 equipBaseID = 1;
  inline bool has_equipbaseid() const;
  inline void clear_equipbaseid();
  static const int kEquipBaseIDFieldNumber = 1;
  inline ::google::protobuf::uint32 equipbaseid() const;
  inline void set_equipbaseid(::google::protobuf::uint32 value);

  // required uint32 bindType = 2;
  inline bool has_bindtype() const;
  inline void clear_bindtype();
  static const int kBindTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 bindtype() const;
  inline void set_bindtype(::google::protobuf::uint32 value);

  // required uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 identify = 5;
  inline bool has_identify() const;
  inline void clear_identify();
  static const int kIdentifyFieldNumber = 5;
  inline ::google::protobuf::uint32 identify() const;
  inline void set_identify(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.DropEquipData)
 private:
  inline void set_has_equipbaseid();
  inline void clear_has_equipbaseid();
  inline void set_has_bindtype();
  inline void clear_has_bindtype();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_identify();
  inline void clear_has_identify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 equipbaseid_;
  ::google::protobuf::uint32 bindtype_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 identify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DropEquipData* default_instance_;
};
// -------------------------------------------------------------------

class DropPetData : public ::google::protobuf::Message {
 public:
  DropPetData();
  virtual ~DropPetData();

  DropPetData(const DropPetData& from);

  inline DropPetData& operator=(const DropPetData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropPetData& default_instance();

  void Swap(DropPetData* other);

  // implements Message ----------------------------------------------

  DropPetData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropPetData& from);
  void MergeFrom(const DropPetData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 petID = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIDFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // required uint32 petExp = 2;
  inline bool has_petexp() const;
  inline void clear_petexp();
  static const int kPetExpFieldNumber = 2;
  inline ::google::protobuf::uint32 petexp() const;
  inline void set_petexp(::google::protobuf::uint32 value);

  // required uint32 petUpLevel = 3;
  inline bool has_petuplevel() const;
  inline void clear_petuplevel();
  static const int kPetUpLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 petuplevel() const;
  inline void set_petuplevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.DropPetData)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_petexp();
  inline void clear_has_petexp();
  inline void set_has_petuplevel();
  inline void clear_has_petuplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 petid_;
  ::google::protobuf::uint32 petexp_;
  ::google::protobuf::uint32 petuplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static DropPetData* default_instance_;
};
// -------------------------------------------------------------------

class TaskBinary : public ::google::protobuf::Message {
 public:
  TaskBinary();
  virtual ~TaskBinary();

  TaskBinary(const TaskBinary& from);

  inline TaskBinary& operator=(const TaskBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskBinary& default_instance();

  void Swap(TaskBinary* other);

  // implements Message ----------------------------------------------

  TaskBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskBinary& from);
  void MergeFrom(const TaskBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.user.MainTaskData mainTaskData = 1;
  inline int maintaskdata_size() const;
  inline void clear_maintaskdata();
  static const int kMainTaskDataFieldNumber = 1;
  inline const ::protocol::user::MainTaskData& maintaskdata(int index) const;
  inline ::protocol::user::MainTaskData* mutable_maintaskdata(int index);
  inline ::protocol::user::MainTaskData* add_maintaskdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::MainTaskData >&
      maintaskdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::MainTaskData >*
      mutable_maintaskdata();

  // repeated .protocol.user.EquipTaskData equipTaskData = 2;
  inline int equiptaskdata_size() const;
  inline void clear_equiptaskdata();
  static const int kEquipTaskDataFieldNumber = 2;
  inline const ::protocol::user::EquipTaskData& equiptaskdata(int index) const;
  inline ::protocol::user::EquipTaskData* mutable_equiptaskdata(int index);
  inline ::protocol::user::EquipTaskData* add_equiptaskdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipTaskData >&
      equiptaskdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipTaskData >*
      mutable_equiptaskdata();

  // repeated .protocol.user.PetTaskData petTaskData = 3;
  inline int pettaskdata_size() const;
  inline void clear_pettaskdata();
  static const int kPetTaskDataFieldNumber = 3;
  inline const ::protocol::user::PetTaskData& pettaskdata(int index) const;
  inline ::protocol::user::PetTaskData* mutable_pettaskdata(int index);
  inline ::protocol::user::PetTaskData* add_pettaskdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::PetTaskData >&
      pettaskdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::PetTaskData >*
      mutable_pettaskdata();

  // repeated .protocol.user.TrumpTaskData trumpTaskData = 4;
  inline int trumptaskdata_size() const;
  inline void clear_trumptaskdata();
  static const int kTrumpTaskDataFieldNumber = 4;
  inline const ::protocol::user::TrumpTaskData& trumptaskdata(int index) const;
  inline ::protocol::user::TrumpTaskData* mutable_trumptaskdata(int index);
  inline ::protocol::user::TrumpTaskData* add_trumptaskdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpTaskData >&
      trumptaskdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpTaskData >*
      mutable_trumptaskdata();

  // repeated .protocol.user.IntensifyTaskData intensifyTaskData = 5;
  inline int intensifytaskdata_size() const;
  inline void clear_intensifytaskdata();
  static const int kIntensifyTaskDataFieldNumber = 5;
  inline const ::protocol::user::IntensifyTaskData& intensifytaskdata(int index) const;
  inline ::protocol::user::IntensifyTaskData* mutable_intensifytaskdata(int index);
  inline ::protocol::user::IntensifyTaskData* add_intensifytaskdata();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::IntensifyTaskData >&
      intensifytaskdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::user::IntensifyTaskData >*
      mutable_intensifytaskdata();

  // @@protoc_insertion_point(class_scope:protocol.user.TaskBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::user::MainTaskData > maintaskdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipTaskData > equiptaskdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::PetTaskData > pettaskdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpTaskData > trumptaskdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::user::IntensifyTaskData > intensifytaskdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static TaskBinary* default_instance_;
};
// -------------------------------------------------------------------

class MainTaskData : public ::google::protobuf::Message {
 public:
  MainTaskData();
  virtual ~MainTaskData();

  MainTaskData(const MainTaskData& from);

  inline MainTaskData& operator=(const MainTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainTaskData& default_instance();

  void Swap(MainTaskData* other);

  // implements Message ----------------------------------------------

  MainTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainTaskData& from);
  void MergeFrom(const MainTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required uint32 taskFinishNum = 2;
  inline bool has_taskfinishnum() const;
  inline void clear_taskfinishnum();
  static const int kTaskFinishNumFieldNumber = 2;
  inline ::google::protobuf::uint32 taskfinishnum() const;
  inline void set_taskfinishnum(::google::protobuf::uint32 value);

  // required uint32 isFinish = 3;
  inline bool has_isfinish() const;
  inline void clear_isfinish();
  static const int kIsFinishFieldNumber = 3;
  inline ::google::protobuf::uint32 isfinish() const;
  inline void set_isfinish(::google::protobuf::uint32 value);

  // required uint32 isReward = 4;
  inline bool has_isreward() const;
  inline void clear_isreward();
  static const int kIsRewardFieldNumber = 4;
  inline ::google::protobuf::uint32 isreward() const;
  inline void set_isreward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.MainTaskData)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskfinishnum();
  inline void clear_has_taskfinishnum();
  inline void set_has_isfinish();
  inline void clear_has_isfinish();
  inline void set_has_isreward();
  inline void clear_has_isreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 taskfinishnum_;
  ::google::protobuf::uint32 isfinish_;
  ::google::protobuf::uint32 isreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static MainTaskData* default_instance_;
};
// -------------------------------------------------------------------

class EquipTaskData : public ::google::protobuf::Message {
 public:
  EquipTaskData();
  virtual ~EquipTaskData();

  EquipTaskData(const EquipTaskData& from);

  inline EquipTaskData& operator=(const EquipTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipTaskData& default_instance();

  void Swap(EquipTaskData* other);

  // implements Message ----------------------------------------------

  EquipTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipTaskData& from);
  void MergeFrom(const EquipTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 equipPos = 1;
  inline bool has_equippos() const;
  inline void clear_equippos();
  static const int kEquipPosFieldNumber = 1;
  inline ::google::protobuf::uint32 equippos() const;
  inline void set_equippos(::google::protobuf::uint32 value);

  // optional uint32 equipQuality = 2;
  inline bool has_equipquality() const;
  inline void clear_equipquality();
  static const int kEquipQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 equipquality() const;
  inline void set_equipquality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.EquipTaskData)
 private:
  inline void set_has_equippos();
  inline void clear_has_equippos();
  inline void set_has_equipquality();
  inline void clear_has_equipquality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 equippos_;
  ::google::protobuf::uint32 equipquality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static EquipTaskData* default_instance_;
};
// -------------------------------------------------------------------

class PetTaskData : public ::google::protobuf::Message {
 public:
  PetTaskData();
  virtual ~PetTaskData();

  PetTaskData(const PetTaskData& from);

  inline PetTaskData& operator=(const PetTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetTaskData& default_instance();

  void Swap(PetTaskData* other);

  // implements Message ----------------------------------------------

  PetTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetTaskData& from);
  void MergeFrom(const PetTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 petID = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIDFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // optional uint32 petStar = 2;
  inline bool has_petstar() const;
  inline void clear_petstar();
  static const int kPetStarFieldNumber = 2;
  inline ::google::protobuf::uint32 petstar() const;
  inline void set_petstar(::google::protobuf::uint32 value);

  // optional uint32 petQuality = 3;
  inline bool has_petquality() const;
  inline void clear_petquality();
  static const int kPetQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 petquality() const;
  inline void set_petquality(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.PetTaskData)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_petstar();
  inline void clear_has_petstar();
  inline void set_has_petquality();
  inline void clear_has_petquality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 petid_;
  ::google::protobuf::uint32 petstar_;
  ::google::protobuf::uint32 petquality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static PetTaskData* default_instance_;
};
// -------------------------------------------------------------------

class TrumpTaskData : public ::google::protobuf::Message {
 public:
  TrumpTaskData();
  virtual ~TrumpTaskData();

  TrumpTaskData(const TrumpTaskData& from);

  inline TrumpTaskData& operator=(const TrumpTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrumpTaskData& default_instance();

  void Swap(TrumpTaskData* other);

  // implements Message ----------------------------------------------

  TrumpTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrumpTaskData& from);
  void MergeFrom(const TrumpTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 trumpID = 1;
  inline bool has_trumpid() const;
  inline void clear_trumpid();
  static const int kTrumpIDFieldNumber = 1;
  inline ::google::protobuf::uint32 trumpid() const;
  inline void set_trumpid(::google::protobuf::uint32 value);

  // optional uint32 trumpLevel = 2;
  inline bool has_trumplevel() const;
  inline void clear_trumplevel();
  static const int kTrumpLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 trumplevel() const;
  inline void set_trumplevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.TrumpTaskData)
 private:
  inline void set_has_trumpid();
  inline void clear_has_trumpid();
  inline void set_has_trumplevel();
  inline void clear_has_trumplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 trumpid_;
  ::google::protobuf::uint32 trumplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static TrumpTaskData* default_instance_;
};
// -------------------------------------------------------------------

class IntensifyTaskData : public ::google::protobuf::Message {
 public:
  IntensifyTaskData();
  virtual ~IntensifyTaskData();

  IntensifyTaskData(const IntensifyTaskData& from);

  inline IntensifyTaskData& operator=(const IntensifyTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntensifyTaskData& default_instance();

  void Swap(IntensifyTaskData* other);

  // implements Message ----------------------------------------------

  IntensifyTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntensifyTaskData& from);
  void MergeFrom(const IntensifyTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 intensifyPos = 1;
  inline bool has_intensifypos() const;
  inline void clear_intensifypos();
  static const int kIntensifyPosFieldNumber = 1;
  inline ::google::protobuf::uint32 intensifypos() const;
  inline void set_intensifypos(::google::protobuf::uint32 value);

  // optional uint32 intensifyLevel = 2;
  inline bool has_intensifylevel() const;
  inline void clear_intensifylevel();
  static const int kIntensifyLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 intensifylevel() const;
  inline void set_intensifylevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.IntensifyTaskData)
 private:
  inline void set_has_intensifypos();
  inline void clear_has_intensifypos();
  inline void set_has_intensifylevel();
  inline void clear_has_intensifylevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 intensifypos_;
  ::google::protobuf::uint32 intensifylevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static IntensifyTaskData* default_instance_;
};
// -------------------------------------------------------------------

class WingBinary : public ::google::protobuf::Message {
 public:
  WingBinary();
  virtual ~WingBinary();

  WingBinary(const WingBinary& from);

  inline WingBinary& operator=(const WingBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WingBinary& default_instance();

  void Swap(WingBinary* other);

  // implements Message ----------------------------------------------

  WingBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WingBinary& from);
  void MergeFrom(const WingBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 wingLevel = 1;
  inline bool has_winglevel() const;
  inline void clear_winglevel();
  static const int kWingLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 winglevel() const;
  inline void set_winglevel(::google::protobuf::uint32 value);

  // optional uint32 wingState = 2;
  inline bool has_wingstate() const;
  inline void clear_wingstate();
  static const int kWingStateFieldNumber = 2;
  inline ::google::protobuf::uint32 wingstate() const;
  inline void set_wingstate(::google::protobuf::uint32 value);

  // optional uint32 useWingID = 3;
  inline bool has_usewingid() const;
  inline void clear_usewingid();
  static const int kUseWingIDFieldNumber = 3;
  inline ::google::protobuf::uint32 usewingid() const;
  inline void set_usewingid(::google::protobuf::uint32 value);

  // optional uint32 blessingValue = 4;
  inline bool has_blessingvalue() const;
  inline void clear_blessingvalue();
  static const int kBlessingValueFieldNumber = 4;
  inline ::google::protobuf::uint32 blessingvalue() const;
  inline void set_blessingvalue(::google::protobuf::uint32 value);

  // optional uint32 upStarItemID = 5;
  inline bool has_upstaritemid() const;
  inline void clear_upstaritemid();
  static const int kUpStarItemIDFieldNumber = 5;
  inline ::google::protobuf::uint32 upstaritemid() const;
  inline void set_upstaritemid(::google::protobuf::uint32 value);

  // optional uint32 attack = 6;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 6;
  inline ::google::protobuf::uint32 attack() const;
  inline void set_attack(::google::protobuf::uint32 value);

  // optional uint32 defence = 7;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 7;
  inline ::google::protobuf::uint32 defence() const;
  inline void set_defence(::google::protobuf::uint32 value);

  // optional uint32 maxBlood = 8;
  inline bool has_maxblood() const;
  inline void clear_maxblood();
  static const int kMaxBloodFieldNumber = 8;
  inline ::google::protobuf::uint32 maxblood() const;
  inline void set_maxblood(::google::protobuf::uint32 value);

  // optional uint32 hitValue = 9;
  inline bool has_hitvalue() const;
  inline void clear_hitvalue();
  static const int kHitValueFieldNumber = 9;
  inline ::google::protobuf::uint32 hitvalue() const;
  inline void set_hitvalue(::google::protobuf::uint32 value);

  // optional uint32 avoidValue = 10;
  inline bool has_avoidvalue() const;
  inline void clear_avoidvalue();
  static const int kAvoidValueFieldNumber = 10;
  inline ::google::protobuf::uint32 avoidvalue() const;
  inline void set_avoidvalue(::google::protobuf::uint32 value);

  // optional uint32 critValue = 11;
  inline bool has_critvalue() const;
  inline void clear_critvalue();
  static const int kCritValueFieldNumber = 11;
  inline ::google::protobuf::uint32 critvalue() const;
  inline void set_critvalue(::google::protobuf::uint32 value);

  // optional uint32 critDefenceValue = 12;
  inline bool has_critdefencevalue() const;
  inline void clear_critdefencevalue();
  static const int kCritDefenceValueFieldNumber = 12;
  inline ::google::protobuf::uint32 critdefencevalue() const;
  inline void set_critdefencevalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.WingBinary)
 private:
  inline void set_has_winglevel();
  inline void clear_has_winglevel();
  inline void set_has_wingstate();
  inline void clear_has_wingstate();
  inline void set_has_usewingid();
  inline void clear_has_usewingid();
  inline void set_has_blessingvalue();
  inline void clear_has_blessingvalue();
  inline void set_has_upstaritemid();
  inline void clear_has_upstaritemid();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defence();
  inline void clear_has_defence();
  inline void set_has_maxblood();
  inline void clear_has_maxblood();
  inline void set_has_hitvalue();
  inline void clear_has_hitvalue();
  inline void set_has_avoidvalue();
  inline void clear_has_avoidvalue();
  inline void set_has_critvalue();
  inline void clear_has_critvalue();
  inline void set_has_critdefencevalue();
  inline void clear_has_critdefencevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 winglevel_;
  ::google::protobuf::uint32 wingstate_;
  ::google::protobuf::uint32 usewingid_;
  ::google::protobuf::uint32 blessingvalue_;
  ::google::protobuf::uint32 upstaritemid_;
  ::google::protobuf::uint32 attack_;
  ::google::protobuf::uint32 defence_;
  ::google::protobuf::uint32 maxblood_;
  ::google::protobuf::uint32 hitvalue_;
  ::google::protobuf::uint32 avoidvalue_;
  ::google::protobuf::uint32 critvalue_;
  ::google::protobuf::uint32 critdefencevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static WingBinary* default_instance_;
};
// -------------------------------------------------------------------

class VipDataBinary : public ::google::protobuf::Message {
 public:
  VipDataBinary();
  virtual ~VipDataBinary();

  VipDataBinary(const VipDataBinary& from);

  inline VipDataBinary& operator=(const VipDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipDataBinary& default_instance();

  void Swap(VipDataBinary* other);

  // implements Message ----------------------------------------------

  VipDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipDataBinary& from);
  void MergeFrom(const VipDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.user.VipDataBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static VipDataBinary* default_instance_;
};
// -------------------------------------------------------------------

class MatchDataBinary : public ::google::protobuf::Message {
 public:
  MatchDataBinary();
  virtual ~MatchDataBinary();

  MatchDataBinary(const MatchDataBinary& from);

  inline MatchDataBinary& operator=(const MatchDataBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchDataBinary& default_instance();

  void Swap(MatchDataBinary* other);

  // implements Message ----------------------------------------------

  MatchDataBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchDataBinary& from);
  void MergeFrom(const MatchDataBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 saveTimeInSec = 1;
  inline bool has_savetimeinsec() const;
  inline void clear_savetimeinsec();
  static const int kSaveTimeInSecFieldNumber = 1;
  inline ::google::protobuf::uint32 savetimeinsec() const;
  inline void set_savetimeinsec(::google::protobuf::uint32 value);

  // optional uint32 commonEloValue = 2;
  inline bool has_commonelovalue() const;
  inline void clear_commonelovalue();
  static const int kCommonEloValueFieldNumber = 2;
  inline ::google::protobuf::uint32 commonelovalue() const;
  inline void set_commonelovalue(::google::protobuf::uint32 value);

  // optional uint32 commonEloGroup = 3;
  inline bool has_commonelogroup() const;
  inline void clear_commonelogroup();
  static const int kCommonEloGroupFieldNumber = 3;
  inline ::google::protobuf::uint32 commonelogroup() const;
  inline void set_commonelogroup(::google::protobuf::uint32 value);

  // optional uint32 commonMatchWinTimes = 4;
  inline bool has_commonmatchwintimes() const;
  inline void clear_commonmatchwintimes();
  static const int kCommonMatchWinTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 commonmatchwintimes() const;
  inline void set_commonmatchwintimes(::google::protobuf::uint32 value);

  // optional uint32 commonMatchLoseTimes = 5;
  inline bool has_commonmatchlosetimes() const;
  inline void clear_commonmatchlosetimes();
  static const int kCommonMatchLoseTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 commonmatchlosetimes() const;
  inline void set_commonmatchlosetimes(::google::protobuf::uint32 value);

  // optional uint32 commonMatchRunOffTimes = 6;
  inline bool has_commonmatchrunofftimes() const;
  inline void clear_commonmatchrunofftimes();
  static const int kCommonMatchRunOffTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 commonmatchrunofftimes() const;
  inline void set_commonmatchrunofftimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.user.MatchDataBinary)
 private:
  inline void set_has_savetimeinsec();
  inline void clear_has_savetimeinsec();
  inline void set_has_commonelovalue();
  inline void clear_has_commonelovalue();
  inline void set_has_commonelogroup();
  inline void clear_has_commonelogroup();
  inline void set_has_commonmatchwintimes();
  inline void clear_has_commonmatchwintimes();
  inline void set_has_commonmatchlosetimes();
  inline void clear_has_commonmatchlosetimes();
  inline void set_has_commonmatchrunofftimes();
  inline void clear_has_commonmatchrunofftimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 savetimeinsec_;
  ::google::protobuf::uint32 commonelovalue_;
  ::google::protobuf::uint32 commonelogroup_;
  ::google::protobuf::uint32 commonmatchwintimes_;
  ::google::protobuf::uint32 commonmatchlosetimes_;
  ::google::protobuf::uint32 commonmatchrunofftimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto();

  void InitAsDefaultInstance();
  static MatchDataBinary* default_instance_;
};
// ===================================================================


// ===================================================================

// MainPackageBinary

// required uint32 packageID = 1;
inline bool MainPackageBinary::has_packageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainPackageBinary::set_has_packageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainPackageBinary::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainPackageBinary::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
inline ::google::protobuf::uint32 MainPackageBinary::packageid() const {
  return packageid_;
}
inline void MainPackageBinary::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
}

// required uint32 capacity = 2;
inline bool MainPackageBinary::has_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainPackageBinary::set_has_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainPackageBinary::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainPackageBinary::clear_capacity() {
  capacity_ = 0u;
  clear_has_capacity();
}
inline ::google::protobuf::uint32 MainPackageBinary::capacity() const {
  return capacity_;
}
inline void MainPackageBinary::set_capacity(::google::protobuf::uint32 value) {
  set_has_capacity();
  capacity_ = value;
}

// -------------------------------------------------------------------

// EquipPackageBinary

// repeated .protocol.item.ItemBinary items = 1;
inline int EquipPackageBinary::items_size() const {
  return items_.size();
}
inline void EquipPackageBinary::clear_items() {
  items_.Clear();
}
inline const ::protocol::item::ItemBinary& EquipPackageBinary::items(int index) const {
  return items_.Get(index);
}
inline ::protocol::item::ItemBinary* EquipPackageBinary::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protocol::item::ItemBinary* EquipPackageBinary::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >&
EquipPackageBinary::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >*
EquipPackageBinary::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// TimeEndEffectData

// required uint32 effectType = 1;
inline bool TimeEndEffectData::has_effecttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeEndEffectData::set_has_effecttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeEndEffectData::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeEndEffectData::clear_effecttype() {
  effecttype_ = 0u;
  clear_has_effecttype();
}
inline ::google::protobuf::uint32 TimeEndEffectData::effecttype() const {
  return effecttype_;
}
inline void TimeEndEffectData::set_effecttype(::google::protobuf::uint32 value) {
  set_has_effecttype();
  effecttype_ = value;
}

// required uint32 endTimeInSec = 2;
inline bool TimeEndEffectData::has_endtimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeEndEffectData::set_has_endtimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeEndEffectData::clear_has_endtimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeEndEffectData::clear_endtimeinsec() {
  endtimeinsec_ = 0u;
  clear_has_endtimeinsec();
}
inline ::google::protobuf::uint32 TimeEndEffectData::endtimeinsec() const {
  return endtimeinsec_;
}
inline void TimeEndEffectData::set_endtimeinsec(::google::protobuf::uint32 value) {
  set_has_endtimeinsec();
  endtimeinsec_ = value;
}

// optional uint32 param = 3;
inline bool TimeEndEffectData::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeEndEffectData::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeEndEffectData::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeEndEffectData::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 TimeEndEffectData::param() const {
  return param_;
}
inline void TimeEndEffectData::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// UseTimesEffectData

// required uint32 effectType = 1;
inline bool UseTimesEffectData::has_effecttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseTimesEffectData::set_has_effecttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseTimesEffectData::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseTimesEffectData::clear_effecttype() {
  effecttype_ = 0u;
  clear_has_effecttype();
}
inline ::google::protobuf::uint32 UseTimesEffectData::effecttype() const {
  return effecttype_;
}
inline void UseTimesEffectData::set_effecttype(::google::protobuf::uint32 value) {
  set_has_effecttype();
  effecttype_ = value;
}

// required uint32 useTimes = 2;
inline bool UseTimesEffectData::has_usetimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseTimesEffectData::set_has_usetimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseTimesEffectData::clear_has_usetimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseTimesEffectData::clear_usetimes() {
  usetimes_ = 0u;
  clear_has_usetimes();
}
inline ::google::protobuf::uint32 UseTimesEffectData::usetimes() const {
  return usetimes_;
}
inline void UseTimesEffectData::set_usetimes(::google::protobuf::uint32 value) {
  set_has_usetimes();
  usetimes_ = value;
}

// optional uint32 param = 3;
inline bool UseTimesEffectData::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseTimesEffectData::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseTimesEffectData::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseTimesEffectData::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 UseTimesEffectData::param() const {
  return param_;
}
inline void UseTimesEffectData::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// MiscUserDataBinary

// repeated uint32 loginDayVec = 1;
inline int MiscUserDataBinary::logindayvec_size() const {
  return logindayvec_.size();
}
inline void MiscUserDataBinary::clear_logindayvec() {
  logindayvec_.Clear();
}
inline ::google::protobuf::uint32 MiscUserDataBinary::logindayvec(int index) const {
  return logindayvec_.Get(index);
}
inline void MiscUserDataBinary::set_logindayvec(int index, ::google::protobuf::uint32 value) {
  logindayvec_.Set(index, value);
}
inline void MiscUserDataBinary::add_logindayvec(::google::protobuf::uint32 value) {
  logindayvec_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MiscUserDataBinary::logindayvec() const {
  return logindayvec_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MiscUserDataBinary::mutable_logindayvec() {
  return &logindayvec_;
}

// repeated .protocol.user.TimeEndEffectData timeEndEffectData = 3;
inline int MiscUserDataBinary::timeendeffectdata_size() const {
  return timeendeffectdata_.size();
}
inline void MiscUserDataBinary::clear_timeendeffectdata() {
  timeendeffectdata_.Clear();
}
inline const ::protocol::user::TimeEndEffectData& MiscUserDataBinary::timeendeffectdata(int index) const {
  return timeendeffectdata_.Get(index);
}
inline ::protocol::user::TimeEndEffectData* MiscUserDataBinary::mutable_timeendeffectdata(int index) {
  return timeendeffectdata_.Mutable(index);
}
inline ::protocol::user::TimeEndEffectData* MiscUserDataBinary::add_timeendeffectdata() {
  return timeendeffectdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TimeEndEffectData >&
MiscUserDataBinary::timeendeffectdata() const {
  return timeendeffectdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TimeEndEffectData >*
MiscUserDataBinary::mutable_timeendeffectdata() {
  return &timeendeffectdata_;
}

// repeated .protocol.user.UseTimesEffectData useTimesEffectData = 4;
inline int MiscUserDataBinary::usetimeseffectdata_size() const {
  return usetimeseffectdata_.size();
}
inline void MiscUserDataBinary::clear_usetimeseffectdata() {
  usetimeseffectdata_.Clear();
}
inline const ::protocol::user::UseTimesEffectData& MiscUserDataBinary::usetimeseffectdata(int index) const {
  return usetimeseffectdata_.Get(index);
}
inline ::protocol::user::UseTimesEffectData* MiscUserDataBinary::mutable_usetimeseffectdata(int index) {
  return usetimeseffectdata_.Mutable(index);
}
inline ::protocol::user::UseTimesEffectData* MiscUserDataBinary::add_usetimeseffectdata() {
  return usetimeseffectdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseTimesEffectData >&
MiscUserDataBinary::usetimeseffectdata() const {
  return usetimeseffectdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseTimesEffectData >*
MiscUserDataBinary::mutable_usetimeseffectdata() {
  return &usetimeseffectdata_;
}

// -------------------------------------------------------------------

// LoginSerializeBinary

// optional bytes packageBinary = 1;
inline bool LoginSerializeBinary::has_packagebinary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSerializeBinary::set_has_packagebinary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSerializeBinary::clear_has_packagebinary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSerializeBinary::clear_packagebinary() {
  if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
    packagebinary_->clear();
  }
  clear_has_packagebinary();
}
inline const ::std::string& LoginSerializeBinary::packagebinary() const {
  return *packagebinary_;
}
inline void LoginSerializeBinary::set_packagebinary(const ::std::string& value) {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  packagebinary_->assign(value);
}
inline void LoginSerializeBinary::set_packagebinary(const char* value) {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  packagebinary_->assign(value);
}
inline void LoginSerializeBinary::set_packagebinary(const void* value, size_t size) {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  packagebinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_packagebinary() {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  return packagebinary_;
}
inline ::std::string* LoginSerializeBinary::release_packagebinary() {
  clear_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagebinary_;
    packagebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_packagebinary(::std::string* packagebinary) {
  if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete packagebinary_;
  }
  if (packagebinary) {
    set_has_packagebinary();
    packagebinary_ = packagebinary;
  } else {
    clear_has_packagebinary();
    packagebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes miscBinary = 2;
inline bool LoginSerializeBinary::has_miscbinary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSerializeBinary::set_has_miscbinary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSerializeBinary::clear_has_miscbinary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSerializeBinary::clear_miscbinary() {
  if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
    miscbinary_->clear();
  }
  clear_has_miscbinary();
}
inline const ::std::string& LoginSerializeBinary::miscbinary() const {
  return *miscbinary_;
}
inline void LoginSerializeBinary::set_miscbinary(const ::std::string& value) {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  miscbinary_->assign(value);
}
inline void LoginSerializeBinary::set_miscbinary(const char* value) {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  miscbinary_->assign(value);
}
inline void LoginSerializeBinary::set_miscbinary(const void* value, size_t size) {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  miscbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_miscbinary() {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  return miscbinary_;
}
inline ::std::string* LoginSerializeBinary::release_miscbinary() {
  clear_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miscbinary_;
    miscbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_miscbinary(::std::string* miscbinary) {
  if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete miscbinary_;
  }
  if (miscbinary) {
    set_has_miscbinary();
    miscbinary_ = miscbinary;
  } else {
    clear_has_miscbinary();
    miscbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes userDataBinary = 3;
inline bool LoginSerializeBinary::has_userdatabinary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginSerializeBinary::set_has_userdatabinary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginSerializeBinary::clear_has_userdatabinary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginSerializeBinary::clear_userdatabinary() {
  if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    userdatabinary_->clear();
  }
  clear_has_userdatabinary();
}
inline const ::std::string& LoginSerializeBinary::userdatabinary() const {
  return *userdatabinary_;
}
inline void LoginSerializeBinary::set_userdatabinary(const ::std::string& value) {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  userdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_userdatabinary(const char* value) {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  userdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_userdatabinary(const void* value, size_t size) {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  userdatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_userdatabinary() {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  return userdatabinary_;
}
inline ::std::string* LoginSerializeBinary::release_userdatabinary() {
  clear_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userdatabinary_;
    userdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_userdatabinary(::std::string* userdatabinary) {
  if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete userdatabinary_;
  }
  if (userdatabinary) {
    set_has_userdatabinary();
    userdatabinary_ = userdatabinary;
  } else {
    clear_has_userdatabinary();
    userdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rechargeMoney = 4;
inline bool LoginSerializeBinary::has_rechargemoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginSerializeBinary::set_has_rechargemoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginSerializeBinary::clear_has_rechargemoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginSerializeBinary::clear_rechargemoney() {
  rechargemoney_ = 0u;
  clear_has_rechargemoney();
}
inline ::google::protobuf::uint32 LoginSerializeBinary::rechargemoney() const {
  return rechargemoney_;
}
inline void LoginSerializeBinary::set_rechargemoney(::google::protobuf::uint32 value) {
  set_has_rechargemoney();
  rechargemoney_ = value;
}

// optional bytes petDataBinary = 5;
inline bool LoginSerializeBinary::has_petdatabinary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginSerializeBinary::set_has_petdatabinary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginSerializeBinary::clear_has_petdatabinary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginSerializeBinary::clear_petdatabinary() {
  if (petdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    petdatabinary_->clear();
  }
  clear_has_petdatabinary();
}
inline const ::std::string& LoginSerializeBinary::petdatabinary() const {
  return *petdatabinary_;
}
inline void LoginSerializeBinary::set_petdatabinary(const ::std::string& value) {
  set_has_petdatabinary();
  if (petdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    petdatabinary_ = new ::std::string;
  }
  petdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_petdatabinary(const char* value) {
  set_has_petdatabinary();
  if (petdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    petdatabinary_ = new ::std::string;
  }
  petdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_petdatabinary(const void* value, size_t size) {
  set_has_petdatabinary();
  if (petdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    petdatabinary_ = new ::std::string;
  }
  petdatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_petdatabinary() {
  set_has_petdatabinary();
  if (petdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    petdatabinary_ = new ::std::string;
  }
  return petdatabinary_;
}
inline ::std::string* LoginSerializeBinary::release_petdatabinary() {
  clear_has_petdatabinary();
  if (petdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = petdatabinary_;
    petdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_petdatabinary(::std::string* petdatabinary) {
  if (petdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete petdatabinary_;
  }
  if (petdatabinary) {
    set_has_petdatabinary();
    petdatabinary_ = petdatabinary;
  } else {
    clear_has_petdatabinary();
    petdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes itemColdBinary = 6;
inline bool LoginSerializeBinary::has_itemcoldbinary() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginSerializeBinary::set_has_itemcoldbinary() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginSerializeBinary::clear_has_itemcoldbinary() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginSerializeBinary::clear_itemcoldbinary() {
  if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_->clear();
  }
  clear_has_itemcoldbinary();
}
inline const ::std::string& LoginSerializeBinary::itemcoldbinary() const {
  return *itemcoldbinary_;
}
inline void LoginSerializeBinary::set_itemcoldbinary(const ::std::string& value) {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  itemcoldbinary_->assign(value);
}
inline void LoginSerializeBinary::set_itemcoldbinary(const char* value) {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  itemcoldbinary_->assign(value);
}
inline void LoginSerializeBinary::set_itemcoldbinary(const void* value, size_t size) {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  itemcoldbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_itemcoldbinary() {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  return itemcoldbinary_;
}
inline ::std::string* LoginSerializeBinary::release_itemcoldbinary() {
  clear_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemcoldbinary_;
    itemcoldbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_itemcoldbinary(::std::string* itemcoldbinary) {
  if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete itemcoldbinary_;
  }
  if (itemcoldbinary) {
    set_has_itemcoldbinary();
    itemcoldbinary_ = itemcoldbinary;
  } else {
    clear_has_itemcoldbinary();
    itemcoldbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes useSkillBinary = 7;
inline bool LoginSerializeBinary::has_useskillbinary() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginSerializeBinary::set_has_useskillbinary() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginSerializeBinary::clear_has_useskillbinary() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginSerializeBinary::clear_useskillbinary() {
  if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    useskillbinary_->clear();
  }
  clear_has_useskillbinary();
}
inline const ::std::string& LoginSerializeBinary::useskillbinary() const {
  return *useskillbinary_;
}
inline void LoginSerializeBinary::set_useskillbinary(const ::std::string& value) {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  useskillbinary_->assign(value);
}
inline void LoginSerializeBinary::set_useskillbinary(const char* value) {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  useskillbinary_->assign(value);
}
inline void LoginSerializeBinary::set_useskillbinary(const void* value, size_t size) {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  useskillbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_useskillbinary() {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  return useskillbinary_;
}
inline ::std::string* LoginSerializeBinary::release_useskillbinary() {
  clear_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useskillbinary_;
    useskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_useskillbinary(::std::string* useskillbinary) {
  if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete useskillbinary_;
  }
  if (useskillbinary) {
    set_has_useskillbinary();
    useskillbinary_ = useskillbinary;
  } else {
    clear_has_useskillbinary();
    useskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes haveSkillBinary = 8;
inline bool LoginSerializeBinary::has_haveskillbinary() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginSerializeBinary::set_has_haveskillbinary() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginSerializeBinary::clear_has_haveskillbinary() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginSerializeBinary::clear_haveskillbinary() {
  if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_->clear();
  }
  clear_has_haveskillbinary();
}
inline const ::std::string& LoginSerializeBinary::haveskillbinary() const {
  return *haveskillbinary_;
}
inline void LoginSerializeBinary::set_haveskillbinary(const ::std::string& value) {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  haveskillbinary_->assign(value);
}
inline void LoginSerializeBinary::set_haveskillbinary(const char* value) {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  haveskillbinary_->assign(value);
}
inline void LoginSerializeBinary::set_haveskillbinary(const void* value, size_t size) {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  haveskillbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_haveskillbinary() {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  return haveskillbinary_;
}
inline ::std::string* LoginSerializeBinary::release_haveskillbinary() {
  clear_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = haveskillbinary_;
    haveskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_haveskillbinary(::std::string* haveskillbinary) {
  if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete haveskillbinary_;
  }
  if (haveskillbinary) {
    set_has_haveskillbinary();
    haveskillbinary_ = haveskillbinary;
  } else {
    clear_has_haveskillbinary();
    haveskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes havePassiveBinary = 9;
inline bool LoginSerializeBinary::has_havepassivebinary() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LoginSerializeBinary::set_has_havepassivebinary() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LoginSerializeBinary::clear_has_havepassivebinary() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LoginSerializeBinary::clear_havepassivebinary() {
  if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_->clear();
  }
  clear_has_havepassivebinary();
}
inline const ::std::string& LoginSerializeBinary::havepassivebinary() const {
  return *havepassivebinary_;
}
inline void LoginSerializeBinary::set_havepassivebinary(const ::std::string& value) {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  havepassivebinary_->assign(value);
}
inline void LoginSerializeBinary::set_havepassivebinary(const char* value) {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  havepassivebinary_->assign(value);
}
inline void LoginSerializeBinary::set_havepassivebinary(const void* value, size_t size) {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  havepassivebinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_havepassivebinary() {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  return havepassivebinary_;
}
inline ::std::string* LoginSerializeBinary::release_havepassivebinary() {
  clear_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = havepassivebinary_;
    havepassivebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_havepassivebinary(::std::string* havepassivebinary) {
  if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete havepassivebinary_;
  }
  if (havepassivebinary) {
    set_has_havepassivebinary();
    havepassivebinary_ = havepassivebinary;
  } else {
    clear_has_havepassivebinary();
    havepassivebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes duplBinary = 10;
inline bool LoginSerializeBinary::has_duplbinary() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LoginSerializeBinary::set_has_duplbinary() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LoginSerializeBinary::clear_has_duplbinary() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LoginSerializeBinary::clear_duplbinary() {
  if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
    duplbinary_->clear();
  }
  clear_has_duplbinary();
}
inline const ::std::string& LoginSerializeBinary::duplbinary() const {
  return *duplbinary_;
}
inline void LoginSerializeBinary::set_duplbinary(const ::std::string& value) {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  duplbinary_->assign(value);
}
inline void LoginSerializeBinary::set_duplbinary(const char* value) {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  duplbinary_->assign(value);
}
inline void LoginSerializeBinary::set_duplbinary(const void* value, size_t size) {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  duplbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_duplbinary() {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  return duplbinary_;
}
inline ::std::string* LoginSerializeBinary::release_duplbinary() {
  clear_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duplbinary_;
    duplbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_duplbinary(::std::string* duplbinary) {
  if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete duplbinary_;
  }
  if (duplbinary) {
    set_has_duplbinary();
    duplbinary_ = duplbinary;
  } else {
    clear_has_duplbinary();
    duplbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes equipPosBinary = 11;
inline bool LoginSerializeBinary::has_equipposbinary() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LoginSerializeBinary::set_has_equipposbinary() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LoginSerializeBinary::clear_has_equipposbinary() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LoginSerializeBinary::clear_equipposbinary() {
  if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
    equipposbinary_->clear();
  }
  clear_has_equipposbinary();
}
inline const ::std::string& LoginSerializeBinary::equipposbinary() const {
  return *equipposbinary_;
}
inline void LoginSerializeBinary::set_equipposbinary(const ::std::string& value) {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  equipposbinary_->assign(value);
}
inline void LoginSerializeBinary::set_equipposbinary(const char* value) {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  equipposbinary_->assign(value);
}
inline void LoginSerializeBinary::set_equipposbinary(const void* value, size_t size) {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  equipposbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_equipposbinary() {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  return equipposbinary_;
}
inline ::std::string* LoginSerializeBinary::release_equipposbinary() {
  clear_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipposbinary_;
    equipposbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_equipposbinary(::std::string* equipposbinary) {
  if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete equipposbinary_;
  }
  if (equipposbinary) {
    set_has_equipposbinary();
    equipposbinary_ = equipposbinary;
  } else {
    clear_has_equipposbinary();
    equipposbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes trumpBinary = 12;
inline bool LoginSerializeBinary::has_trumpbinary() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LoginSerializeBinary::set_has_trumpbinary() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LoginSerializeBinary::clear_has_trumpbinary() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LoginSerializeBinary::clear_trumpbinary() {
  if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
    trumpbinary_->clear();
  }
  clear_has_trumpbinary();
}
inline const ::std::string& LoginSerializeBinary::trumpbinary() const {
  return *trumpbinary_;
}
inline void LoginSerializeBinary::set_trumpbinary(const ::std::string& value) {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  trumpbinary_->assign(value);
}
inline void LoginSerializeBinary::set_trumpbinary(const char* value) {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  trumpbinary_->assign(value);
}
inline void LoginSerializeBinary::set_trumpbinary(const void* value, size_t size) {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  trumpbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_trumpbinary() {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  return trumpbinary_;
}
inline ::std::string* LoginSerializeBinary::release_trumpbinary() {
  clear_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trumpbinary_;
    trumpbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_trumpbinary(::std::string* trumpbinary) {
  if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete trumpbinary_;
  }
  if (trumpbinary) {
    set_has_trumpbinary();
    trumpbinary_ = trumpbinary;
  } else {
    clear_has_trumpbinary();
    trumpbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes rewardBinary = 13;
inline bool LoginSerializeBinary::has_rewardbinary() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LoginSerializeBinary::set_has_rewardbinary() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LoginSerializeBinary::clear_has_rewardbinary() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LoginSerializeBinary::clear_rewardbinary() {
  if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
    rewardbinary_->clear();
  }
  clear_has_rewardbinary();
}
inline const ::std::string& LoginSerializeBinary::rewardbinary() const {
  return *rewardbinary_;
}
inline void LoginSerializeBinary::set_rewardbinary(const ::std::string& value) {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  rewardbinary_->assign(value);
}
inline void LoginSerializeBinary::set_rewardbinary(const char* value) {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  rewardbinary_->assign(value);
}
inline void LoginSerializeBinary::set_rewardbinary(const void* value, size_t size) {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  rewardbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_rewardbinary() {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  return rewardbinary_;
}
inline ::std::string* LoginSerializeBinary::release_rewardbinary() {
  clear_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rewardbinary_;
    rewardbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_rewardbinary(::std::string* rewardbinary) {
  if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardbinary_;
  }
  if (rewardbinary) {
    set_has_rewardbinary();
    rewardbinary_ = rewardbinary;
  } else {
    clear_has_rewardbinary();
    rewardbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes discoveryBinary = 14;
inline bool LoginSerializeBinary::has_discoverybinary() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LoginSerializeBinary::set_has_discoverybinary() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LoginSerializeBinary::clear_has_discoverybinary() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LoginSerializeBinary::clear_discoverybinary() {
  if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
    discoverybinary_->clear();
  }
  clear_has_discoverybinary();
}
inline const ::std::string& LoginSerializeBinary::discoverybinary() const {
  return *discoverybinary_;
}
inline void LoginSerializeBinary::set_discoverybinary(const ::std::string& value) {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  discoverybinary_->assign(value);
}
inline void LoginSerializeBinary::set_discoverybinary(const char* value) {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  discoverybinary_->assign(value);
}
inline void LoginSerializeBinary::set_discoverybinary(const void* value, size_t size) {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  discoverybinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_discoverybinary() {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  return discoverybinary_;
}
inline ::std::string* LoginSerializeBinary::release_discoverybinary() {
  clear_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = discoverybinary_;
    discoverybinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_discoverybinary(::std::string* discoverybinary) {
  if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
    delete discoverybinary_;
  }
  if (discoverybinary) {
    set_has_discoverybinary();
    discoverybinary_ = discoverybinary;
  } else {
    clear_has_discoverybinary();
    discoverybinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes friendDataBinary = 15;
inline bool LoginSerializeBinary::has_frienddatabinary() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LoginSerializeBinary::set_has_frienddatabinary() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LoginSerializeBinary::clear_has_frienddatabinary() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LoginSerializeBinary::clear_frienddatabinary() {
  if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_->clear();
  }
  clear_has_frienddatabinary();
}
inline const ::std::string& LoginSerializeBinary::frienddatabinary() const {
  return *frienddatabinary_;
}
inline void LoginSerializeBinary::set_frienddatabinary(const ::std::string& value) {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  frienddatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_frienddatabinary(const char* value) {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  frienddatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_frienddatabinary(const void* value, size_t size) {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  frienddatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_frienddatabinary() {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  return frienddatabinary_;
}
inline ::std::string* LoginSerializeBinary::release_frienddatabinary() {
  clear_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frienddatabinary_;
    frienddatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_frienddatabinary(::std::string* frienddatabinary) {
  if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete frienddatabinary_;
  }
  if (frienddatabinary) {
    set_has_frienddatabinary();
    frienddatabinary_ = frienddatabinary;
  } else {
    clear_has_frienddatabinary();
    frienddatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes duplDropBinary = 16;
inline bool LoginSerializeBinary::has_dupldropbinary() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LoginSerializeBinary::set_has_dupldropbinary() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LoginSerializeBinary::clear_has_dupldropbinary() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LoginSerializeBinary::clear_dupldropbinary() {
  if (dupldropbinary_ != &::google::protobuf::internal::kEmptyString) {
    dupldropbinary_->clear();
  }
  clear_has_dupldropbinary();
}
inline const ::std::string& LoginSerializeBinary::dupldropbinary() const {
  return *dupldropbinary_;
}
inline void LoginSerializeBinary::set_dupldropbinary(const ::std::string& value) {
  set_has_dupldropbinary();
  if (dupldropbinary_ == &::google::protobuf::internal::kEmptyString) {
    dupldropbinary_ = new ::std::string;
  }
  dupldropbinary_->assign(value);
}
inline void LoginSerializeBinary::set_dupldropbinary(const char* value) {
  set_has_dupldropbinary();
  if (dupldropbinary_ == &::google::protobuf::internal::kEmptyString) {
    dupldropbinary_ = new ::std::string;
  }
  dupldropbinary_->assign(value);
}
inline void LoginSerializeBinary::set_dupldropbinary(const void* value, size_t size) {
  set_has_dupldropbinary();
  if (dupldropbinary_ == &::google::protobuf::internal::kEmptyString) {
    dupldropbinary_ = new ::std::string;
  }
  dupldropbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_dupldropbinary() {
  set_has_dupldropbinary();
  if (dupldropbinary_ == &::google::protobuf::internal::kEmptyString) {
    dupldropbinary_ = new ::std::string;
  }
  return dupldropbinary_;
}
inline ::std::string* LoginSerializeBinary::release_dupldropbinary() {
  clear_has_dupldropbinary();
  if (dupldropbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dupldropbinary_;
    dupldropbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_dupldropbinary(::std::string* dupldropbinary) {
  if (dupldropbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete dupldropbinary_;
  }
  if (dupldropbinary) {
    set_has_dupldropbinary();
    dupldropbinary_ = dupldropbinary;
  } else {
    clear_has_dupldropbinary();
    dupldropbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes mysteryShopBinary = 17;
inline bool LoginSerializeBinary::has_mysteryshopbinary() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LoginSerializeBinary::set_has_mysteryshopbinary() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LoginSerializeBinary::clear_has_mysteryshopbinary() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LoginSerializeBinary::clear_mysteryshopbinary() {
  if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_->clear();
  }
  clear_has_mysteryshopbinary();
}
inline const ::std::string& LoginSerializeBinary::mysteryshopbinary() const {
  return *mysteryshopbinary_;
}
inline void LoginSerializeBinary::set_mysteryshopbinary(const ::std::string& value) {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  mysteryshopbinary_->assign(value);
}
inline void LoginSerializeBinary::set_mysteryshopbinary(const char* value) {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  mysteryshopbinary_->assign(value);
}
inline void LoginSerializeBinary::set_mysteryshopbinary(const void* value, size_t size) {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  mysteryshopbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_mysteryshopbinary() {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  return mysteryshopbinary_;
}
inline ::std::string* LoginSerializeBinary::release_mysteryshopbinary() {
  clear_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mysteryshopbinary_;
    mysteryshopbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_mysteryshopbinary(::std::string* mysteryshopbinary) {
  if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete mysteryshopbinary_;
  }
  if (mysteryshopbinary) {
    set_has_mysteryshopbinary();
    mysteryshopbinary_ = mysteryshopbinary;
  } else {
    clear_has_mysteryshopbinary();
    mysteryshopbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes taskBinary = 18;
inline bool LoginSerializeBinary::has_taskbinary() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LoginSerializeBinary::set_has_taskbinary() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LoginSerializeBinary::clear_has_taskbinary() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LoginSerializeBinary::clear_taskbinary() {
  if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
    taskbinary_->clear();
  }
  clear_has_taskbinary();
}
inline const ::std::string& LoginSerializeBinary::taskbinary() const {
  return *taskbinary_;
}
inline void LoginSerializeBinary::set_taskbinary(const ::std::string& value) {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  taskbinary_->assign(value);
}
inline void LoginSerializeBinary::set_taskbinary(const char* value) {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  taskbinary_->assign(value);
}
inline void LoginSerializeBinary::set_taskbinary(const void* value, size_t size) {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  taskbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_taskbinary() {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  return taskbinary_;
}
inline ::std::string* LoginSerializeBinary::release_taskbinary() {
  clear_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskbinary_;
    taskbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_taskbinary(::std::string* taskbinary) {
  if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete taskbinary_;
  }
  if (taskbinary) {
    set_has_taskbinary();
    taskbinary_ = taskbinary;
  } else {
    clear_has_taskbinary();
    taskbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes matchDataBinary = 19;
inline bool LoginSerializeBinary::has_matchdatabinary() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LoginSerializeBinary::set_has_matchdatabinary() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LoginSerializeBinary::clear_has_matchdatabinary() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LoginSerializeBinary::clear_matchdatabinary() {
  if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_->clear();
  }
  clear_has_matchdatabinary();
}
inline const ::std::string& LoginSerializeBinary::matchdatabinary() const {
  return *matchdatabinary_;
}
inline void LoginSerializeBinary::set_matchdatabinary(const ::std::string& value) {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  matchdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_matchdatabinary(const char* value) {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  matchdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_matchdatabinary(const void* value, size_t size) {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  matchdatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_matchdatabinary() {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  return matchdatabinary_;
}
inline ::std::string* LoginSerializeBinary::release_matchdatabinary() {
  clear_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = matchdatabinary_;
    matchdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_matchdatabinary(::std::string* matchdatabinary) {
  if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete matchdatabinary_;
  }
  if (matchdatabinary) {
    set_has_matchdatabinary();
    matchdatabinary_ = matchdatabinary;
  } else {
    clear_has_matchdatabinary();
    matchdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes wingBinary = 20;
inline bool LoginSerializeBinary::has_wingbinary() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LoginSerializeBinary::set_has_wingbinary() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LoginSerializeBinary::clear_has_wingbinary() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LoginSerializeBinary::clear_wingbinary() {
  if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
    wingbinary_->clear();
  }
  clear_has_wingbinary();
}
inline const ::std::string& LoginSerializeBinary::wingbinary() const {
  return *wingbinary_;
}
inline void LoginSerializeBinary::set_wingbinary(const ::std::string& value) {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  wingbinary_->assign(value);
}
inline void LoginSerializeBinary::set_wingbinary(const char* value) {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  wingbinary_->assign(value);
}
inline void LoginSerializeBinary::set_wingbinary(const void* value, size_t size) {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  wingbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_wingbinary() {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  return wingbinary_;
}
inline ::std::string* LoginSerializeBinary::release_wingbinary() {
  clear_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wingbinary_;
    wingbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_wingbinary(::std::string* wingbinary) {
  if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete wingbinary_;
  }
  if (wingbinary) {
    set_has_wingbinary();
    wingbinary_ = wingbinary;
  } else {
    clear_has_wingbinary();
    wingbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes vipDataBinary = 21;
inline bool LoginSerializeBinary::has_vipdatabinary() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LoginSerializeBinary::set_has_vipdatabinary() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LoginSerializeBinary::clear_has_vipdatabinary() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LoginSerializeBinary::clear_vipdatabinary() {
  if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_->clear();
  }
  clear_has_vipdatabinary();
}
inline const ::std::string& LoginSerializeBinary::vipdatabinary() const {
  return *vipdatabinary_;
}
inline void LoginSerializeBinary::set_vipdatabinary(const ::std::string& value) {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  vipdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_vipdatabinary(const char* value) {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  vipdatabinary_->assign(value);
}
inline void LoginSerializeBinary::set_vipdatabinary(const void* value, size_t size) {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  vipdatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSerializeBinary::mutable_vipdatabinary() {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  return vipdatabinary_;
}
inline ::std::string* LoginSerializeBinary::release_vipdatabinary() {
  clear_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vipdatabinary_;
    vipdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSerializeBinary::set_allocated_vipdatabinary(::std::string* vipdatabinary) {
  if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete vipdatabinary_;
  }
  if (vipdatabinary) {
    set_has_vipdatabinary();
    vipdatabinary_ = vipdatabinary;
  } else {
    clear_has_vipdatabinary();
    vipdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PetDataSerializeBinary

// repeated .protocol.user.PetData petData = 1;
inline int PetDataSerializeBinary::petdata_size() const {
  return petdata_.size();
}
inline void PetDataSerializeBinary::clear_petdata() {
  petdata_.Clear();
}
inline const ::protocol::user::PetData& PetDataSerializeBinary::petdata(int index) const {
  return petdata_.Get(index);
}
inline ::protocol::user::PetData* PetDataSerializeBinary::mutable_petdata(int index) {
  return petdata_.Mutable(index);
}
inline ::protocol::user::PetData* PetDataSerializeBinary::add_petdata() {
  return petdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::PetData >&
PetDataSerializeBinary::petdata() const {
  return petdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::PetData >*
PetDataSerializeBinary::mutable_petdata() {
  return &petdata_;
}

// required uint32 totalFightPower = 2;
inline bool PetDataSerializeBinary::has_totalfightpower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetDataSerializeBinary::set_has_totalfightpower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetDataSerializeBinary::clear_has_totalfightpower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetDataSerializeBinary::clear_totalfightpower() {
  totalfightpower_ = 0u;
  clear_has_totalfightpower();
}
inline ::google::protobuf::uint32 PetDataSerializeBinary::totalfightpower() const {
  return totalfightpower_;
}
inline void PetDataSerializeBinary::set_totalfightpower(::google::protobuf::uint32 value) {
  set_has_totalfightpower();
  totalfightpower_ = value;
}

// -------------------------------------------------------------------

// UserSaveData

// optional bytes packageBinary = 1;
inline bool UserSaveData::has_packagebinary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSaveData::set_has_packagebinary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSaveData::clear_has_packagebinary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSaveData::clear_packagebinary() {
  if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
    packagebinary_->clear();
  }
  clear_has_packagebinary();
}
inline const ::std::string& UserSaveData::packagebinary() const {
  return *packagebinary_;
}
inline void UserSaveData::set_packagebinary(const ::std::string& value) {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  packagebinary_->assign(value);
}
inline void UserSaveData::set_packagebinary(const char* value) {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  packagebinary_->assign(value);
}
inline void UserSaveData::set_packagebinary(const void* value, size_t size) {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  packagebinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_packagebinary() {
  set_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    packagebinary_ = new ::std::string;
  }
  return packagebinary_;
}
inline ::std::string* UserSaveData::release_packagebinary() {
  clear_has_packagebinary();
  if (packagebinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagebinary_;
    packagebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_packagebinary(::std::string* packagebinary) {
  if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete packagebinary_;
  }
  if (packagebinary) {
    set_has_packagebinary();
    packagebinary_ = packagebinary;
  } else {
    clear_has_packagebinary();
    packagebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes miscBinary = 2;
inline bool UserSaveData::has_miscbinary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSaveData::set_has_miscbinary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSaveData::clear_has_miscbinary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSaveData::clear_miscbinary() {
  if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
    miscbinary_->clear();
  }
  clear_has_miscbinary();
}
inline const ::std::string& UserSaveData::miscbinary() const {
  return *miscbinary_;
}
inline void UserSaveData::set_miscbinary(const ::std::string& value) {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  miscbinary_->assign(value);
}
inline void UserSaveData::set_miscbinary(const char* value) {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  miscbinary_->assign(value);
}
inline void UserSaveData::set_miscbinary(const void* value, size_t size) {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  miscbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_miscbinary() {
  set_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    miscbinary_ = new ::std::string;
  }
  return miscbinary_;
}
inline ::std::string* UserSaveData::release_miscbinary() {
  clear_has_miscbinary();
  if (miscbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = miscbinary_;
    miscbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_miscbinary(::std::string* miscbinary) {
  if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete miscbinary_;
  }
  if (miscbinary) {
    set_has_miscbinary();
    miscbinary_ = miscbinary;
  } else {
    clear_has_miscbinary();
    miscbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes userDataBinary = 3;
inline bool UserSaveData::has_userdatabinary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSaveData::set_has_userdatabinary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSaveData::clear_has_userdatabinary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSaveData::clear_userdatabinary() {
  if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    userdatabinary_->clear();
  }
  clear_has_userdatabinary();
}
inline const ::std::string& UserSaveData::userdatabinary() const {
  return *userdatabinary_;
}
inline void UserSaveData::set_userdatabinary(const ::std::string& value) {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  userdatabinary_->assign(value);
}
inline void UserSaveData::set_userdatabinary(const char* value) {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  userdatabinary_->assign(value);
}
inline void UserSaveData::set_userdatabinary(const void* value, size_t size) {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  userdatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_userdatabinary() {
  set_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    userdatabinary_ = new ::std::string;
  }
  return userdatabinary_;
}
inline ::std::string* UserSaveData::release_userdatabinary() {
  clear_has_userdatabinary();
  if (userdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userdatabinary_;
    userdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_userdatabinary(::std::string* userdatabinary) {
  if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete userdatabinary_;
  }
  if (userdatabinary) {
    set_has_userdatabinary();
    userdatabinary_ = userdatabinary;
  } else {
    clear_has_userdatabinary();
    userdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rechargeMoney = 4;
inline bool UserSaveData::has_rechargemoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSaveData::set_has_rechargemoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSaveData::clear_has_rechargemoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSaveData::clear_rechargemoney() {
  rechargemoney_ = 0u;
  clear_has_rechargemoney();
}
inline ::google::protobuf::uint32 UserSaveData::rechargemoney() const {
  return rechargemoney_;
}
inline void UserSaveData::set_rechargemoney(::google::protobuf::uint32 value) {
  set_has_rechargemoney();
  rechargemoney_ = value;
}

// optional uint32 curExp = 5;
inline bool UserSaveData::has_curexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSaveData::set_has_curexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSaveData::clear_has_curexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSaveData::clear_curexp() {
  curexp_ = 0u;
  clear_has_curexp();
}
inline ::google::protobuf::uint32 UserSaveData::curexp() const {
  return curexp_;
}
inline void UserSaveData::set_curexp(::google::protobuf::uint32 value) {
  set_has_curexp();
  curexp_ = value;
}

// optional uint32 level = 7;
inline bool UserSaveData::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserSaveData::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserSaveData::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserSaveData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 UserSaveData::level() const {
  return level_;
}
inline void UserSaveData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 bitMask = 8;
inline bool UserSaveData::has_bitmask() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserSaveData::set_has_bitmask() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserSaveData::clear_has_bitmask() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserSaveData::clear_bitmask() {
  bitmask_ = 0u;
  clear_has_bitmask();
}
inline ::google::protobuf::uint32 UserSaveData::bitmask() const {
  return bitmask_;
}
inline void UserSaveData::set_bitmask(::google::protobuf::uint32 value) {
  set_has_bitmask();
  bitmask_ = value;
}

// optional uint32 vitality = 9;
inline bool UserSaveData::has_vitality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserSaveData::set_has_vitality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserSaveData::clear_has_vitality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserSaveData::clear_vitality() {
  vitality_ = 0u;
  clear_has_vitality();
}
inline ::google::protobuf::uint32 UserSaveData::vitality() const {
  return vitality_;
}
inline void UserSaveData::set_vitality(::google::protobuf::uint32 value) {
  set_has_vitality();
  vitality_ = value;
}

// optional uint32 skillPoint = 10;
inline bool UserSaveData::has_skillpoint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserSaveData::set_has_skillpoint() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserSaveData::clear_has_skillpoint() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserSaveData::clear_skillpoint() {
  skillpoint_ = 0u;
  clear_has_skillpoint();
}
inline ::google::protobuf::uint32 UserSaveData::skillpoint() const {
  return skillpoint_;
}
inline void UserSaveData::set_skillpoint(::google::protobuf::uint32 value) {
  set_has_skillpoint();
  skillpoint_ = value;
}

// optional bytes itemColdBinary = 11;
inline bool UserSaveData::has_itemcoldbinary() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserSaveData::set_has_itemcoldbinary() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserSaveData::clear_has_itemcoldbinary() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserSaveData::clear_itemcoldbinary() {
  if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_->clear();
  }
  clear_has_itemcoldbinary();
}
inline const ::std::string& UserSaveData::itemcoldbinary() const {
  return *itemcoldbinary_;
}
inline void UserSaveData::set_itemcoldbinary(const ::std::string& value) {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  itemcoldbinary_->assign(value);
}
inline void UserSaveData::set_itemcoldbinary(const char* value) {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  itemcoldbinary_->assign(value);
}
inline void UserSaveData::set_itemcoldbinary(const void* value, size_t size) {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  itemcoldbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_itemcoldbinary() {
  set_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    itemcoldbinary_ = new ::std::string;
  }
  return itemcoldbinary_;
}
inline ::std::string* UserSaveData::release_itemcoldbinary() {
  clear_has_itemcoldbinary();
  if (itemcoldbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemcoldbinary_;
    itemcoldbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_itemcoldbinary(::std::string* itemcoldbinary) {
  if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete itemcoldbinary_;
  }
  if (itemcoldbinary) {
    set_has_itemcoldbinary();
    itemcoldbinary_ = itemcoldbinary;
  } else {
    clear_has_itemcoldbinary();
    itemcoldbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 silver = 12;
inline bool UserSaveData::has_silver() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserSaveData::set_has_silver() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserSaveData::clear_has_silver() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserSaveData::clear_silver() {
  silver_ = 0u;
  clear_has_silver();
}
inline ::google::protobuf::uint32 UserSaveData::silver() const {
  return silver_;
}
inline void UserSaveData::set_silver(::google::protobuf::uint32 value) {
  set_has_silver();
  silver_ = value;
}

// optional uint32 diamond = 13;
inline bool UserSaveData::has_diamond() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserSaveData::set_has_diamond() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserSaveData::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserSaveData::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 UserSaveData::diamond() const {
  return diamond_;
}
inline void UserSaveData::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional uint32 bindDiamond = 14;
inline bool UserSaveData::has_binddiamond() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserSaveData::set_has_binddiamond() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserSaveData::clear_has_binddiamond() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserSaveData::clear_binddiamond() {
  binddiamond_ = 0u;
  clear_has_binddiamond();
}
inline ::google::protobuf::uint32 UserSaveData::binddiamond() const {
  return binddiamond_;
}
inline void UserSaveData::set_binddiamond(::google::protobuf::uint32 value) {
  set_has_binddiamond();
  binddiamond_ = value;
}

// optional bytes useSkillBinary = 15;
inline bool UserSaveData::has_useskillbinary() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserSaveData::set_has_useskillbinary() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserSaveData::clear_has_useskillbinary() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserSaveData::clear_useskillbinary() {
  if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    useskillbinary_->clear();
  }
  clear_has_useskillbinary();
}
inline const ::std::string& UserSaveData::useskillbinary() const {
  return *useskillbinary_;
}
inline void UserSaveData::set_useskillbinary(const ::std::string& value) {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  useskillbinary_->assign(value);
}
inline void UserSaveData::set_useskillbinary(const char* value) {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  useskillbinary_->assign(value);
}
inline void UserSaveData::set_useskillbinary(const void* value, size_t size) {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  useskillbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_useskillbinary() {
  set_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    useskillbinary_ = new ::std::string;
  }
  return useskillbinary_;
}
inline ::std::string* UserSaveData::release_useskillbinary() {
  clear_has_useskillbinary();
  if (useskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useskillbinary_;
    useskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_useskillbinary(::std::string* useskillbinary) {
  if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete useskillbinary_;
  }
  if (useskillbinary) {
    set_has_useskillbinary();
    useskillbinary_ = useskillbinary;
  } else {
    clear_has_useskillbinary();
    useskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes haveSkillBinary = 16;
inline bool UserSaveData::has_haveskillbinary() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserSaveData::set_has_haveskillbinary() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserSaveData::clear_has_haveskillbinary() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserSaveData::clear_haveskillbinary() {
  if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_->clear();
  }
  clear_has_haveskillbinary();
}
inline const ::std::string& UserSaveData::haveskillbinary() const {
  return *haveskillbinary_;
}
inline void UserSaveData::set_haveskillbinary(const ::std::string& value) {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  haveskillbinary_->assign(value);
}
inline void UserSaveData::set_haveskillbinary(const char* value) {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  haveskillbinary_->assign(value);
}
inline void UserSaveData::set_haveskillbinary(const void* value, size_t size) {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  haveskillbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_haveskillbinary() {
  set_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    haveskillbinary_ = new ::std::string;
  }
  return haveskillbinary_;
}
inline ::std::string* UserSaveData::release_haveskillbinary() {
  clear_has_haveskillbinary();
  if (haveskillbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = haveskillbinary_;
    haveskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_haveskillbinary(::std::string* haveskillbinary) {
  if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete haveskillbinary_;
  }
  if (haveskillbinary) {
    set_has_haveskillbinary();
    haveskillbinary_ = haveskillbinary;
  } else {
    clear_has_haveskillbinary();
    haveskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes havePassiveBinary = 17;
inline bool UserSaveData::has_havepassivebinary() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserSaveData::set_has_havepassivebinary() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserSaveData::clear_has_havepassivebinary() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserSaveData::clear_havepassivebinary() {
  if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_->clear();
  }
  clear_has_havepassivebinary();
}
inline const ::std::string& UserSaveData::havepassivebinary() const {
  return *havepassivebinary_;
}
inline void UserSaveData::set_havepassivebinary(const ::std::string& value) {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  havepassivebinary_->assign(value);
}
inline void UserSaveData::set_havepassivebinary(const char* value) {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  havepassivebinary_->assign(value);
}
inline void UserSaveData::set_havepassivebinary(const void* value, size_t size) {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  havepassivebinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_havepassivebinary() {
  set_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    havepassivebinary_ = new ::std::string;
  }
  return havepassivebinary_;
}
inline ::std::string* UserSaveData::release_havepassivebinary() {
  clear_has_havepassivebinary();
  if (havepassivebinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = havepassivebinary_;
    havepassivebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_havepassivebinary(::std::string* havepassivebinary) {
  if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete havepassivebinary_;
  }
  if (havepassivebinary) {
    set_has_havepassivebinary();
    havepassivebinary_ = havepassivebinary;
  } else {
    clear_has_havepassivebinary();
    havepassivebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes unlockPetData = 18;
inline bool UserSaveData::has_unlockpetdata() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserSaveData::set_has_unlockpetdata() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserSaveData::clear_has_unlockpetdata() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserSaveData::clear_unlockpetdata() {
  if (unlockpetdata_ != &::google::protobuf::internal::kEmptyString) {
    unlockpetdata_->clear();
  }
  clear_has_unlockpetdata();
}
inline const ::std::string& UserSaveData::unlockpetdata() const {
  return *unlockpetdata_;
}
inline void UserSaveData::set_unlockpetdata(const ::std::string& value) {
  set_has_unlockpetdata();
  if (unlockpetdata_ == &::google::protobuf::internal::kEmptyString) {
    unlockpetdata_ = new ::std::string;
  }
  unlockpetdata_->assign(value);
}
inline void UserSaveData::set_unlockpetdata(const char* value) {
  set_has_unlockpetdata();
  if (unlockpetdata_ == &::google::protobuf::internal::kEmptyString) {
    unlockpetdata_ = new ::std::string;
  }
  unlockpetdata_->assign(value);
}
inline void UserSaveData::set_unlockpetdata(const void* value, size_t size) {
  set_has_unlockpetdata();
  if (unlockpetdata_ == &::google::protobuf::internal::kEmptyString) {
    unlockpetdata_ = new ::std::string;
  }
  unlockpetdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_unlockpetdata() {
  set_has_unlockpetdata();
  if (unlockpetdata_ == &::google::protobuf::internal::kEmptyString) {
    unlockpetdata_ = new ::std::string;
  }
  return unlockpetdata_;
}
inline ::std::string* UserSaveData::release_unlockpetdata() {
  clear_has_unlockpetdata();
  if (unlockpetdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unlockpetdata_;
    unlockpetdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_unlockpetdata(::std::string* unlockpetdata) {
  if (unlockpetdata_ != &::google::protobuf::internal::kEmptyString) {
    delete unlockpetdata_;
  }
  if (unlockpetdata) {
    set_has_unlockpetdata();
    unlockpetdata_ = unlockpetdata;
  } else {
    clear_has_unlockpetdata();
    unlockpetdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes duplBinary = 19;
inline bool UserSaveData::has_duplbinary() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserSaveData::set_has_duplbinary() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserSaveData::clear_has_duplbinary() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserSaveData::clear_duplbinary() {
  if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
    duplbinary_->clear();
  }
  clear_has_duplbinary();
}
inline const ::std::string& UserSaveData::duplbinary() const {
  return *duplbinary_;
}
inline void UserSaveData::set_duplbinary(const ::std::string& value) {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  duplbinary_->assign(value);
}
inline void UserSaveData::set_duplbinary(const char* value) {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  duplbinary_->assign(value);
}
inline void UserSaveData::set_duplbinary(const void* value, size_t size) {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  duplbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_duplbinary() {
  set_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    duplbinary_ = new ::std::string;
  }
  return duplbinary_;
}
inline ::std::string* UserSaveData::release_duplbinary() {
  clear_has_duplbinary();
  if (duplbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duplbinary_;
    duplbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_duplbinary(::std::string* duplbinary) {
  if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete duplbinary_;
  }
  if (duplbinary) {
    set_has_duplbinary();
    duplbinary_ = duplbinary;
  } else {
    clear_has_duplbinary();
    duplbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes equipPosBinary = 20;
inline bool UserSaveData::has_equipposbinary() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserSaveData::set_has_equipposbinary() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserSaveData::clear_has_equipposbinary() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserSaveData::clear_equipposbinary() {
  if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
    equipposbinary_->clear();
  }
  clear_has_equipposbinary();
}
inline const ::std::string& UserSaveData::equipposbinary() const {
  return *equipposbinary_;
}
inline void UserSaveData::set_equipposbinary(const ::std::string& value) {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  equipposbinary_->assign(value);
}
inline void UserSaveData::set_equipposbinary(const char* value) {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  equipposbinary_->assign(value);
}
inline void UserSaveData::set_equipposbinary(const void* value, size_t size) {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  equipposbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_equipposbinary() {
  set_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    equipposbinary_ = new ::std::string;
  }
  return equipposbinary_;
}
inline ::std::string* UserSaveData::release_equipposbinary() {
  clear_has_equipposbinary();
  if (equipposbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipposbinary_;
    equipposbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_equipposbinary(::std::string* equipposbinary) {
  if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete equipposbinary_;
  }
  if (equipposbinary) {
    set_has_equipposbinary();
    equipposbinary_ = equipposbinary;
  } else {
    clear_has_equipposbinary();
    equipposbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gmLevel = 21;
inline bool UserSaveData::has_gmlevel() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserSaveData::set_has_gmlevel() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserSaveData::clear_has_gmlevel() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserSaveData::clear_gmlevel() {
  gmlevel_ = 0u;
  clear_has_gmlevel();
}
inline ::google::protobuf::uint32 UserSaveData::gmlevel() const {
  return gmlevel_;
}
inline void UserSaveData::set_gmlevel(::google::protobuf::uint32 value) {
  set_has_gmlevel();
  gmlevel_ = value;
}

// optional bytes trumpBinary = 22;
inline bool UserSaveData::has_trumpbinary() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserSaveData::set_has_trumpbinary() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserSaveData::clear_has_trumpbinary() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserSaveData::clear_trumpbinary() {
  if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
    trumpbinary_->clear();
  }
  clear_has_trumpbinary();
}
inline const ::std::string& UserSaveData::trumpbinary() const {
  return *trumpbinary_;
}
inline void UserSaveData::set_trumpbinary(const ::std::string& value) {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  trumpbinary_->assign(value);
}
inline void UserSaveData::set_trumpbinary(const char* value) {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  trumpbinary_->assign(value);
}
inline void UserSaveData::set_trumpbinary(const void* value, size_t size) {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  trumpbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_trumpbinary() {
  set_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    trumpbinary_ = new ::std::string;
  }
  return trumpbinary_;
}
inline ::std::string* UserSaveData::release_trumpbinary() {
  clear_has_trumpbinary();
  if (trumpbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trumpbinary_;
    trumpbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_trumpbinary(::std::string* trumpbinary) {
  if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete trumpbinary_;
  }
  if (trumpbinary) {
    set_has_trumpbinary();
    trumpbinary_ = trumpbinary;
  } else {
    clear_has_trumpbinary();
    trumpbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes rewardBinary = 23;
inline bool UserSaveData::has_rewardbinary() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserSaveData::set_has_rewardbinary() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserSaveData::clear_has_rewardbinary() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserSaveData::clear_rewardbinary() {
  if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
    rewardbinary_->clear();
  }
  clear_has_rewardbinary();
}
inline const ::std::string& UserSaveData::rewardbinary() const {
  return *rewardbinary_;
}
inline void UserSaveData::set_rewardbinary(const ::std::string& value) {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  rewardbinary_->assign(value);
}
inline void UserSaveData::set_rewardbinary(const char* value) {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  rewardbinary_->assign(value);
}
inline void UserSaveData::set_rewardbinary(const void* value, size_t size) {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  rewardbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_rewardbinary() {
  set_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    rewardbinary_ = new ::std::string;
  }
  return rewardbinary_;
}
inline ::std::string* UserSaveData::release_rewardbinary() {
  clear_has_rewardbinary();
  if (rewardbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rewardbinary_;
    rewardbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_rewardbinary(::std::string* rewardbinary) {
  if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardbinary_;
  }
  if (rewardbinary) {
    set_has_rewardbinary();
    rewardbinary_ = rewardbinary;
  } else {
    clear_has_rewardbinary();
    rewardbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes discoveryBinary = 24;
inline bool UserSaveData::has_discoverybinary() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserSaveData::set_has_discoverybinary() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserSaveData::clear_has_discoverybinary() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserSaveData::clear_discoverybinary() {
  if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
    discoverybinary_->clear();
  }
  clear_has_discoverybinary();
}
inline const ::std::string& UserSaveData::discoverybinary() const {
  return *discoverybinary_;
}
inline void UserSaveData::set_discoverybinary(const ::std::string& value) {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  discoverybinary_->assign(value);
}
inline void UserSaveData::set_discoverybinary(const char* value) {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  discoverybinary_->assign(value);
}
inline void UserSaveData::set_discoverybinary(const void* value, size_t size) {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  discoverybinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_discoverybinary() {
  set_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    discoverybinary_ = new ::std::string;
  }
  return discoverybinary_;
}
inline ::std::string* UserSaveData::release_discoverybinary() {
  clear_has_discoverybinary();
  if (discoverybinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = discoverybinary_;
    discoverybinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_discoverybinary(::std::string* discoverybinary) {
  if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
    delete discoverybinary_;
  }
  if (discoverybinary) {
    set_has_discoverybinary();
    discoverybinary_ = discoverybinary;
  } else {
    clear_has_discoverybinary();
    discoverybinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 monthCardStopTime = 25;
inline bool UserSaveData::has_monthcardstoptime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UserSaveData::set_has_monthcardstoptime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UserSaveData::clear_has_monthcardstoptime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UserSaveData::clear_monthcardstoptime() {
  monthcardstoptime_ = 0u;
  clear_has_monthcardstoptime();
}
inline ::google::protobuf::uint32 UserSaveData::monthcardstoptime() const {
  return monthcardstoptime_;
}
inline void UserSaveData::set_monthcardstoptime(::google::protobuf::uint32 value) {
  set_has_monthcardstoptime();
  monthcardstoptime_ = value;
}

// optional bytes friendDataBinary = 26;
inline bool UserSaveData::has_frienddatabinary() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UserSaveData::set_has_frienddatabinary() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UserSaveData::clear_has_frienddatabinary() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UserSaveData::clear_frienddatabinary() {
  if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_->clear();
  }
  clear_has_frienddatabinary();
}
inline const ::std::string& UserSaveData::frienddatabinary() const {
  return *frienddatabinary_;
}
inline void UserSaveData::set_frienddatabinary(const ::std::string& value) {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  frienddatabinary_->assign(value);
}
inline void UserSaveData::set_frienddatabinary(const char* value) {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  frienddatabinary_->assign(value);
}
inline void UserSaveData::set_frienddatabinary(const void* value, size_t size) {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  frienddatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_frienddatabinary() {
  set_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    frienddatabinary_ = new ::std::string;
  }
  return frienddatabinary_;
}
inline ::std::string* UserSaveData::release_frienddatabinary() {
  clear_has_frienddatabinary();
  if (frienddatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frienddatabinary_;
    frienddatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_frienddatabinary(::std::string* frienddatabinary) {
  if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete frienddatabinary_;
  }
  if (frienddatabinary) {
    set_has_frienddatabinary();
    frienddatabinary_ = frienddatabinary;
  } else {
    clear_has_frienddatabinary();
    frienddatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes mysteryShopBinary = 27;
inline bool UserSaveData::has_mysteryshopbinary() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UserSaveData::set_has_mysteryshopbinary() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UserSaveData::clear_has_mysteryshopbinary() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UserSaveData::clear_mysteryshopbinary() {
  if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_->clear();
  }
  clear_has_mysteryshopbinary();
}
inline const ::std::string& UserSaveData::mysteryshopbinary() const {
  return *mysteryshopbinary_;
}
inline void UserSaveData::set_mysteryshopbinary(const ::std::string& value) {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  mysteryshopbinary_->assign(value);
}
inline void UserSaveData::set_mysteryshopbinary(const char* value) {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  mysteryshopbinary_->assign(value);
}
inline void UserSaveData::set_mysteryshopbinary(const void* value, size_t size) {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  mysteryshopbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_mysteryshopbinary() {
  set_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    mysteryshopbinary_ = new ::std::string;
  }
  return mysteryshopbinary_;
}
inline ::std::string* UserSaveData::release_mysteryshopbinary() {
  clear_has_mysteryshopbinary();
  if (mysteryshopbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mysteryshopbinary_;
    mysteryshopbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_mysteryshopbinary(::std::string* mysteryshopbinary) {
  if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete mysteryshopbinary_;
  }
  if (mysteryshopbinary) {
    set_has_mysteryshopbinary();
    mysteryshopbinary_ = mysteryshopbinary;
  } else {
    clear_has_mysteryshopbinary();
    mysteryshopbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes taskBinary = 28;
inline bool UserSaveData::has_taskbinary() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UserSaveData::set_has_taskbinary() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UserSaveData::clear_has_taskbinary() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UserSaveData::clear_taskbinary() {
  if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
    taskbinary_->clear();
  }
  clear_has_taskbinary();
}
inline const ::std::string& UserSaveData::taskbinary() const {
  return *taskbinary_;
}
inline void UserSaveData::set_taskbinary(const ::std::string& value) {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  taskbinary_->assign(value);
}
inline void UserSaveData::set_taskbinary(const char* value) {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  taskbinary_->assign(value);
}
inline void UserSaveData::set_taskbinary(const void* value, size_t size) {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  taskbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_taskbinary() {
  set_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    taskbinary_ = new ::std::string;
  }
  return taskbinary_;
}
inline ::std::string* UserSaveData::release_taskbinary() {
  clear_has_taskbinary();
  if (taskbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskbinary_;
    taskbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_taskbinary(::std::string* taskbinary) {
  if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete taskbinary_;
  }
  if (taskbinary) {
    set_has_taskbinary();
    taskbinary_ = taskbinary;
  } else {
    clear_has_taskbinary();
    taskbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 thoughtValue = 29;
inline bool UserSaveData::has_thoughtvalue() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UserSaveData::set_has_thoughtvalue() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UserSaveData::clear_has_thoughtvalue() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UserSaveData::clear_thoughtvalue() {
  thoughtvalue_ = 0u;
  clear_has_thoughtvalue();
}
inline ::google::protobuf::uint32 UserSaveData::thoughtvalue() const {
  return thoughtvalue_;
}
inline void UserSaveData::set_thoughtvalue(::google::protobuf::uint32 value) {
  set_has_thoughtvalue();
  thoughtvalue_ = value;
}

// optional uint32 fightPower = 30;
inline bool UserSaveData::has_fightpower() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UserSaveData::set_has_fightpower() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UserSaveData::clear_has_fightpower() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UserSaveData::clear_fightpower() {
  fightpower_ = 0u;
  clear_has_fightpower();
}
inline ::google::protobuf::uint32 UserSaveData::fightpower() const {
  return fightpower_;
}
inline void UserSaveData::set_fightpower(::google::protobuf::uint32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// optional bytes matchDataBinary = 31;
inline bool UserSaveData::has_matchdatabinary() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void UserSaveData::set_has_matchdatabinary() {
  _has_bits_[0] |= 0x20000000u;
}
inline void UserSaveData::clear_has_matchdatabinary() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void UserSaveData::clear_matchdatabinary() {
  if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_->clear();
  }
  clear_has_matchdatabinary();
}
inline const ::std::string& UserSaveData::matchdatabinary() const {
  return *matchdatabinary_;
}
inline void UserSaveData::set_matchdatabinary(const ::std::string& value) {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  matchdatabinary_->assign(value);
}
inline void UserSaveData::set_matchdatabinary(const char* value) {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  matchdatabinary_->assign(value);
}
inline void UserSaveData::set_matchdatabinary(const void* value, size_t size) {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  matchdatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_matchdatabinary() {
  set_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    matchdatabinary_ = new ::std::string;
  }
  return matchdatabinary_;
}
inline ::std::string* UserSaveData::release_matchdatabinary() {
  clear_has_matchdatabinary();
  if (matchdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = matchdatabinary_;
    matchdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_matchdatabinary(::std::string* matchdatabinary) {
  if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete matchdatabinary_;
  }
  if (matchdatabinary) {
    set_has_matchdatabinary();
    matchdatabinary_ = matchdatabinary;
  } else {
    clear_has_matchdatabinary();
    matchdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes wingBinary = 32;
inline bool UserSaveData::has_wingbinary() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void UserSaveData::set_has_wingbinary() {
  _has_bits_[0] |= 0x40000000u;
}
inline void UserSaveData::clear_has_wingbinary() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void UserSaveData::clear_wingbinary() {
  if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
    wingbinary_->clear();
  }
  clear_has_wingbinary();
}
inline const ::std::string& UserSaveData::wingbinary() const {
  return *wingbinary_;
}
inline void UserSaveData::set_wingbinary(const ::std::string& value) {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  wingbinary_->assign(value);
}
inline void UserSaveData::set_wingbinary(const char* value) {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  wingbinary_->assign(value);
}
inline void UserSaveData::set_wingbinary(const void* value, size_t size) {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  wingbinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_wingbinary() {
  set_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    wingbinary_ = new ::std::string;
  }
  return wingbinary_;
}
inline ::std::string* UserSaveData::release_wingbinary() {
  clear_has_wingbinary();
  if (wingbinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wingbinary_;
    wingbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_wingbinary(::std::string* wingbinary) {
  if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete wingbinary_;
  }
  if (wingbinary) {
    set_has_wingbinary();
    wingbinary_ = wingbinary;
  } else {
    clear_has_wingbinary();
    wingbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 honorPoints = 43;
inline bool UserSaveData::has_honorpoints() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void UserSaveData::set_has_honorpoints() {
  _has_bits_[0] |= 0x80000000u;
}
inline void UserSaveData::clear_has_honorpoints() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void UserSaveData::clear_honorpoints() {
  honorpoints_ = 0u;
  clear_has_honorpoints();
}
inline ::google::protobuf::uint32 UserSaveData::honorpoints() const {
  return honorpoints_;
}
inline void UserSaveData::set_honorpoints(::google::protobuf::uint32 value) {
  set_has_honorpoints();
  honorpoints_ = value;
}

// optional uint32 vipExp = 44;
inline bool UserSaveData::has_vipexp() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void UserSaveData::set_has_vipexp() {
  _has_bits_[1] |= 0x00000001u;
}
inline void UserSaveData::clear_has_vipexp() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void UserSaveData::clear_vipexp() {
  vipexp_ = 0u;
  clear_has_vipexp();
}
inline ::google::protobuf::uint32 UserSaveData::vipexp() const {
  return vipexp_;
}
inline void UserSaveData::set_vipexp(::google::protobuf::uint32 value) {
  set_has_vipexp();
  vipexp_ = value;
}

// optional uint32 vipLevel = 45;
inline bool UserSaveData::has_viplevel() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void UserSaveData::set_has_viplevel() {
  _has_bits_[1] |= 0x00000002u;
}
inline void UserSaveData::clear_has_viplevel() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void UserSaveData::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 UserSaveData::viplevel() const {
  return viplevel_;
}
inline void UserSaveData::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional bytes vipDataBinary = 46;
inline bool UserSaveData::has_vipdatabinary() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void UserSaveData::set_has_vipdatabinary() {
  _has_bits_[1] |= 0x00000004u;
}
inline void UserSaveData::clear_has_vipdatabinary() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void UserSaveData::clear_vipdatabinary() {
  if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_->clear();
  }
  clear_has_vipdatabinary();
}
inline const ::std::string& UserSaveData::vipdatabinary() const {
  return *vipdatabinary_;
}
inline void UserSaveData::set_vipdatabinary(const ::std::string& value) {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  vipdatabinary_->assign(value);
}
inline void UserSaveData::set_vipdatabinary(const char* value) {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  vipdatabinary_->assign(value);
}
inline void UserSaveData::set_vipdatabinary(const void* value, size_t size) {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  vipdatabinary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSaveData::mutable_vipdatabinary() {
  set_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    vipdatabinary_ = new ::std::string;
  }
  return vipdatabinary_;
}
inline ::std::string* UserSaveData::release_vipdatabinary() {
  clear_has_vipdatabinary();
  if (vipdatabinary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vipdatabinary_;
    vipdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSaveData::set_allocated_vipdatabinary(::std::string* vipdatabinary) {
  if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete vipdatabinary_;
  }
  if (vipdatabinary) {
    set_has_vipdatabinary();
    vipdatabinary_ = vipdatabinary;
  } else {
    clear_has_vipdatabinary();
    vipdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 clubPoints = 47;
inline bool UserSaveData::has_clubpoints() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void UserSaveData::set_has_clubpoints() {
  _has_bits_[1] |= 0x00000008u;
}
inline void UserSaveData::clear_has_clubpoints() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void UserSaveData::clear_clubpoints() {
  clubpoints_ = 0u;
  clear_has_clubpoints();
}
inline ::google::protobuf::uint32 UserSaveData::clubpoints() const {
  return clubpoints_;
}
inline void UserSaveData::set_clubpoints(::google::protobuf::uint32 value) {
  set_has_clubpoints();
  clubpoints_ = value;
}

// -------------------------------------------------------------------

// LogoutCallbackData

// optional uint32 destZoneID = 1;
inline bool LogoutCallbackData::has_destzoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutCallbackData::set_has_destzoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutCallbackData::clear_has_destzoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutCallbackData::clear_destzoneid() {
  destzoneid_ = 0u;
  clear_has_destzoneid();
}
inline ::google::protobuf::uint32 LogoutCallbackData::destzoneid() const {
  return destzoneid_;
}
inline void LogoutCallbackData::set_destzoneid(::google::protobuf::uint32 value) {
  set_has_destzoneid();
  destzoneid_ = value;
}

// -------------------------------------------------------------------

// ChangeLogicExtendData

// optional bytes userLoginData = 1;
inline bool ChangeLogicExtendData::has_userlogindata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeLogicExtendData::set_has_userlogindata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeLogicExtendData::clear_has_userlogindata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeLogicExtendData::clear_userlogindata() {
  if (userlogindata_ != &::google::protobuf::internal::kEmptyString) {
    userlogindata_->clear();
  }
  clear_has_userlogindata();
}
inline const ::std::string& ChangeLogicExtendData::userlogindata() const {
  return *userlogindata_;
}
inline void ChangeLogicExtendData::set_userlogindata(const ::std::string& value) {
  set_has_userlogindata();
  if (userlogindata_ == &::google::protobuf::internal::kEmptyString) {
    userlogindata_ = new ::std::string;
  }
  userlogindata_->assign(value);
}
inline void ChangeLogicExtendData::set_userlogindata(const char* value) {
  set_has_userlogindata();
  if (userlogindata_ == &::google::protobuf::internal::kEmptyString) {
    userlogindata_ = new ::std::string;
  }
  userlogindata_->assign(value);
}
inline void ChangeLogicExtendData::set_userlogindata(const void* value, size_t size) {
  set_has_userlogindata();
  if (userlogindata_ == &::google::protobuf::internal::kEmptyString) {
    userlogindata_ = new ::std::string;
  }
  userlogindata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangeLogicExtendData::mutable_userlogindata() {
  set_has_userlogindata();
  if (userlogindata_ == &::google::protobuf::internal::kEmptyString) {
    userlogindata_ = new ::std::string;
  }
  return userlogindata_;
}
inline ::std::string* ChangeLogicExtendData::release_userlogindata() {
  clear_has_userlogindata();
  if (userlogindata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userlogindata_;
    userlogindata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangeLogicExtendData::set_allocated_userlogindata(::std::string* userlogindata) {
  if (userlogindata_ != &::google::protobuf::internal::kEmptyString) {
    delete userlogindata_;
  }
  if (userlogindata) {
    set_has_userlogindata();
    userlogindata_ = userlogindata;
  } else {
    clear_has_userlogindata();
    userlogindata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes intoRoomExtendData = 2;
inline bool ChangeLogicExtendData::has_intoroomextenddata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeLogicExtendData::set_has_intoroomextenddata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeLogicExtendData::clear_has_intoroomextenddata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeLogicExtendData::clear_intoroomextenddata() {
  if (intoroomextenddata_ != &::google::protobuf::internal::kEmptyString) {
    intoroomextenddata_->clear();
  }
  clear_has_intoroomextenddata();
}
inline const ::std::string& ChangeLogicExtendData::intoroomextenddata() const {
  return *intoroomextenddata_;
}
inline void ChangeLogicExtendData::set_intoroomextenddata(const ::std::string& value) {
  set_has_intoroomextenddata();
  if (intoroomextenddata_ == &::google::protobuf::internal::kEmptyString) {
    intoroomextenddata_ = new ::std::string;
  }
  intoroomextenddata_->assign(value);
}
inline void ChangeLogicExtendData::set_intoroomextenddata(const char* value) {
  set_has_intoroomextenddata();
  if (intoroomextenddata_ == &::google::protobuf::internal::kEmptyString) {
    intoroomextenddata_ = new ::std::string;
  }
  intoroomextenddata_->assign(value);
}
inline void ChangeLogicExtendData::set_intoroomextenddata(const void* value, size_t size) {
  set_has_intoroomextenddata();
  if (intoroomextenddata_ == &::google::protobuf::internal::kEmptyString) {
    intoroomextenddata_ = new ::std::string;
  }
  intoroomextenddata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangeLogicExtendData::mutable_intoroomextenddata() {
  set_has_intoroomextenddata();
  if (intoroomextenddata_ == &::google::protobuf::internal::kEmptyString) {
    intoroomextenddata_ = new ::std::string;
  }
  return intoroomextenddata_;
}
inline ::std::string* ChangeLogicExtendData::release_intoroomextenddata() {
  clear_has_intoroomextenddata();
  if (intoroomextenddata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = intoroomextenddata_;
    intoroomextenddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangeLogicExtendData::set_allocated_intoroomextenddata(::std::string* intoroomextenddata) {
  if (intoroomextenddata_ != &::google::protobuf::internal::kEmptyString) {
    delete intoroomextenddata_;
  }
  if (intoroomextenddata) {
    set_has_intoroomextenddata();
    intoroomextenddata_ = intoroomextenddata;
  } else {
    clear_has_intoroomextenddata();
    intoroomextenddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isAudience = 3;
inline bool ChangeLogicExtendData::has_isaudience() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeLogicExtendData::set_has_isaudience() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeLogicExtendData::clear_has_isaudience() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeLogicExtendData::clear_isaudience() {
  isaudience_ = false;
  clear_has_isaudience();
}
inline bool ChangeLogicExtendData::isaudience() const {
  return isaudience_;
}
inline void ChangeLogicExtendData::set_isaudience(bool value) {
  set_has_isaudience();
  isaudience_ = value;
}

// optional uint32 campType = 4;
inline bool ChangeLogicExtendData::has_camptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeLogicExtendData::set_has_camptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeLogicExtendData::clear_has_camptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeLogicExtendData::clear_camptype() {
  camptype_ = 0u;
  clear_has_camptype();
}
inline ::google::protobuf::uint32 ChangeLogicExtendData::camptype() const {
  return camptype_;
}
inline void ChangeLogicExtendData::set_camptype(::google::protobuf::uint32 value) {
  set_has_camptype();
  camptype_ = value;
}

// -------------------------------------------------------------------

// MessageSaveData

// repeated .protocol.user.MessageData messageData = 1;
inline int MessageSaveData::messagedata_size() const {
  return messagedata_.size();
}
inline void MessageSaveData::clear_messagedata() {
  messagedata_.Clear();
}
inline const ::protocol::user::MessageData& MessageSaveData::messagedata(int index) const {
  return messagedata_.Get(index);
}
inline ::protocol::user::MessageData* MessageSaveData::mutable_messagedata(int index) {
  return messagedata_.Mutable(index);
}
inline ::protocol::user::MessageData* MessageSaveData::add_messagedata() {
  return messagedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::MessageData >&
MessageSaveData::messagedata() const {
  return messagedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::MessageData >*
MessageSaveData::mutable_messagedata() {
  return &messagedata_;
}

// -------------------------------------------------------------------

// MessageData

// required uint32 messageID = 1;
inline bool MessageData::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageData::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageData::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageData::clear_messageid() {
  messageid_ = 0u;
  clear_has_messageid();
}
inline ::google::protobuf::uint32 MessageData::messageid() const {
  return messageid_;
}
inline void MessageData::set_messageid(::google::protobuf::uint32 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional string info = 2;
inline bool MessageData::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageData::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageData::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageData::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& MessageData::info() const {
  return *info_;
}
inline void MessageData::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void MessageData::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void MessageData::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageData::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* MessageData::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageData::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PetData

// required uint32 petID = 1;
inline bool PetData::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetData::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetData::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetData::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 PetData::petid() const {
  return petid_;
}
inline void PetData::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
}

// required uint32 petExp = 2;
inline bool PetData::has_petexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetData::set_has_petexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetData::clear_has_petexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetData::clear_petexp() {
  petexp_ = 0u;
  clear_has_petexp();
}
inline ::google::protobuf::uint32 PetData::petexp() const {
  return petexp_;
}
inline void PetData::set_petexp(::google::protobuf::uint32 value) {
  set_has_petexp();
  petexp_ = value;
}

// required uint32 petStarLevel = 3;
inline bool PetData::has_petstarlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetData::set_has_petstarlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetData::clear_has_petstarlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetData::clear_petstarlevel() {
  petstarlevel_ = 0u;
  clear_has_petstarlevel();
}
inline ::google::protobuf::uint32 PetData::petstarlevel() const {
  return petstarlevel_;
}
inline void PetData::set_petstarlevel(::google::protobuf::uint32 value) {
  set_has_petstarlevel();
  petstarlevel_ = value;
}

// required uint32 petQuality = 4;
inline bool PetData::has_petquality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PetData::set_has_petquality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PetData::clear_has_petquality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PetData::clear_petquality() {
  petquality_ = 0u;
  clear_has_petquality();
}
inline ::google::protobuf::uint32 PetData::petquality() const {
  return petquality_;
}
inline void PetData::set_petquality(::google::protobuf::uint32 value) {
  set_has_petquality();
  petquality_ = value;
}

// repeated .protocol.user.SkillData petSkillData = 5;
inline int PetData::petskilldata_size() const {
  return petskilldata_.size();
}
inline void PetData::clear_petskilldata() {
  petskilldata_.Clear();
}
inline const ::protocol::user::SkillData& PetData::petskilldata(int index) const {
  return petskilldata_.Get(index);
}
inline ::protocol::user::SkillData* PetData::mutable_petskilldata(int index) {
  return petskilldata_.Mutable(index);
}
inline ::protocol::user::SkillData* PetData::add_petskilldata() {
  return petskilldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >&
PetData::petskilldata() const {
  return petskilldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >*
PetData::mutable_petskilldata() {
  return &petskilldata_;
}

// repeated .protocol.user.PetEquipBinary petEquipBinary = 6;
inline int PetData::petequipbinary_size() const {
  return petequipbinary_.size();
}
inline void PetData::clear_petequipbinary() {
  petequipbinary_.Clear();
}
inline const ::protocol::user::PetEquipBinary& PetData::petequipbinary(int index) const {
  return petequipbinary_.Get(index);
}
inline ::protocol::user::PetEquipBinary* PetData::mutable_petequipbinary(int index) {
  return petequipbinary_.Mutable(index);
}
inline ::protocol::user::PetEquipBinary* PetData::add_petequipbinary() {
  return petequipbinary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::PetEquipBinary >&
PetData::petequipbinary() const {
  return petequipbinary_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::PetEquipBinary >*
PetData::mutable_petequipbinary() {
  return &petequipbinary_;
}

// required uint32 teamPos = 7;
inline bool PetData::has_teampos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetData::set_has_teampos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetData::clear_has_teampos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetData::clear_teampos() {
  teampos_ = 0u;
  clear_has_teampos();
}
inline ::google::protobuf::uint32 PetData::teampos() const {
  return teampos_;
}
inline void PetData::set_teampos(::google::protobuf::uint32 value) {
  set_has_teampos();
  teampos_ = value;
}

// required .protocol.user.PropData propData = 8;
inline bool PetData::has_propdata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PetData::set_has_propdata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PetData::clear_has_propdata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PetData::clear_propdata() {
  if (propdata_ != NULL) propdata_->::protocol::user::PropData::Clear();
  clear_has_propdata();
}
inline const ::protocol::user::PropData& PetData::propdata() const {
  return propdata_ != NULL ? *propdata_ : *default_instance_->propdata_;
}
inline ::protocol::user::PropData* PetData::mutable_propdata() {
  set_has_propdata();
  if (propdata_ == NULL) propdata_ = new ::protocol::user::PropData;
  return propdata_;
}
inline ::protocol::user::PropData* PetData::release_propdata() {
  clear_has_propdata();
  ::protocol::user::PropData* temp = propdata_;
  propdata_ = NULL;
  return temp;
}
inline void PetData::set_allocated_propdata(::protocol::user::PropData* propdata) {
  delete propdata_;
  propdata_ = propdata;
  if (propdata) {
    set_has_propdata();
  } else {
    clear_has_propdata();
  }
}

// required uint32 petLevel = 9;
inline bool PetData::has_petlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PetData::set_has_petlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PetData::clear_has_petlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PetData::clear_petlevel() {
  petlevel_ = 0u;
  clear_has_petlevel();
}
inline ::google::protobuf::uint32 PetData::petlevel() const {
  return petlevel_;
}
inline void PetData::set_petlevel(::google::protobuf::uint32 value) {
  set_has_petlevel();
  petlevel_ = value;
}

// required uint32 seq = 10;
inline bool PetData::has_seq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PetData::set_has_seq() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PetData::clear_has_seq() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PetData::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 PetData::seq() const {
  return seq_;
}
inline void PetData::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
}

// -------------------------------------------------------------------

// PropData

// required uint32 maxHP = 1;
inline bool PropData::has_maxhp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropData::set_has_maxhp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropData::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropData::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 PropData::maxhp() const {
  return maxhp_;
}
inline void PropData::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// required uint32 maxMP = 2;
inline bool PropData::has_maxmp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropData::set_has_maxmp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropData::clear_has_maxmp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropData::clear_maxmp() {
  maxmp_ = 0u;
  clear_has_maxmp();
}
inline ::google::protobuf::uint32 PropData::maxmp() const {
  return maxmp_;
}
inline void PropData::set_maxmp(::google::protobuf::uint32 value) {
  set_has_maxmp();
  maxmp_ = value;
}

// required uint32 physicalAttack = 3;
inline bool PropData::has_physicalattack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropData::set_has_physicalattack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropData::clear_has_physicalattack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropData::clear_physicalattack() {
  physicalattack_ = 0u;
  clear_has_physicalattack();
}
inline ::google::protobuf::uint32 PropData::physicalattack() const {
  return physicalattack_;
}
inline void PropData::set_physicalattack(::google::protobuf::uint32 value) {
  set_has_physicalattack();
  physicalattack_ = value;
}

// required uint32 magicAttack = 4;
inline bool PropData::has_magicattack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropData::set_has_magicattack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropData::clear_has_magicattack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropData::clear_magicattack() {
  magicattack_ = 0u;
  clear_has_magicattack();
}
inline ::google::protobuf::uint32 PropData::magicattack() const {
  return magicattack_;
}
inline void PropData::set_magicattack(::google::protobuf::uint32 value) {
  set_has_magicattack();
  magicattack_ = value;
}

// required uint32 pureDamage = 5;
inline bool PropData::has_puredamage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropData::set_has_puredamage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropData::clear_has_puredamage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropData::clear_puredamage() {
  puredamage_ = 0u;
  clear_has_puredamage();
}
inline ::google::protobuf::uint32 PropData::puredamage() const {
  return puredamage_;
}
inline void PropData::set_puredamage(::google::protobuf::uint32 value) {
  set_has_puredamage();
  puredamage_ = value;
}

// required uint32 physicalDefence = 6;
inline bool PropData::has_physicaldefence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PropData::set_has_physicaldefence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PropData::clear_has_physicaldefence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PropData::clear_physicaldefence() {
  physicaldefence_ = 0u;
  clear_has_physicaldefence();
}
inline ::google::protobuf::uint32 PropData::physicaldefence() const {
  return physicaldefence_;
}
inline void PropData::set_physicaldefence(::google::protobuf::uint32 value) {
  set_has_physicaldefence();
  physicaldefence_ = value;
}

// required uint32 magicDefence = 7;
inline bool PropData::has_magicdefence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PropData::set_has_magicdefence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PropData::clear_has_magicdefence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PropData::clear_magicdefence() {
  magicdefence_ = 0u;
  clear_has_magicdefence();
}
inline ::google::protobuf::uint32 PropData::magicdefence() const {
  return magicdefence_;
}
inline void PropData::set_magicdefence(::google::protobuf::uint32 value) {
  set_has_magicdefence();
  magicdefence_ = value;
}

// required uint32 crit = 8;
inline bool PropData::has_crit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PropData::set_has_crit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PropData::clear_has_crit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PropData::clear_crit() {
  crit_ = 0u;
  clear_has_crit();
}
inline ::google::protobuf::uint32 PropData::crit() const {
  return crit_;
}
inline void PropData::set_crit(::google::protobuf::uint32 value) {
  set_has_crit();
  crit_ = value;
}

// required uint32 critDefence = 9;
inline bool PropData::has_critdefence() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PropData::set_has_critdefence() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PropData::clear_has_critdefence() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PropData::clear_critdefence() {
  critdefence_ = 0u;
  clear_has_critdefence();
}
inline ::google::protobuf::uint32 PropData::critdefence() const {
  return critdefence_;
}
inline void PropData::set_critdefence(::google::protobuf::uint32 value) {
  set_has_critdefence();
  critdefence_ = value;
}

// required uint32 critValue = 10;
inline bool PropData::has_critvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PropData::set_has_critvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PropData::clear_has_critvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PropData::clear_critvalue() {
  critvalue_ = 0u;
  clear_has_critvalue();
}
inline ::google::protobuf::uint32 PropData::critvalue() const {
  return critvalue_;
}
inline void PropData::set_critvalue(::google::protobuf::uint32 value) {
  set_has_critvalue();
  critvalue_ = value;
}

// required uint32 appendCrit = 11;
inline bool PropData::has_appendcrit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PropData::set_has_appendcrit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PropData::clear_has_appendcrit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PropData::clear_appendcrit() {
  appendcrit_ = 0u;
  clear_has_appendcrit();
}
inline ::google::protobuf::uint32 PropData::appendcrit() const {
  return appendcrit_;
}
inline void PropData::set_appendcrit(::google::protobuf::uint32 value) {
  set_has_appendcrit();
  appendcrit_ = value;
}

// required uint32 extraCrit = 12;
inline bool PropData::has_extracrit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PropData::set_has_extracrit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PropData::clear_has_extracrit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PropData::clear_extracrit() {
  extracrit_ = 0u;
  clear_has_extracrit();
}
inline ::google::protobuf::uint32 PropData::extracrit() const {
  return extracrit_;
}
inline void PropData::set_extracrit(::google::protobuf::uint32 value) {
  set_has_extracrit();
  extracrit_ = value;
}

// required uint32 extraCritDefence = 13;
inline bool PropData::has_extracritdefence() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PropData::set_has_extracritdefence() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PropData::clear_has_extracritdefence() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PropData::clear_extracritdefence() {
  extracritdefence_ = 0u;
  clear_has_extracritdefence();
}
inline ::google::protobuf::uint32 PropData::extracritdefence() const {
  return extracritdefence_;
}
inline void PropData::set_extracritdefence(::google::protobuf::uint32 value) {
  set_has_extracritdefence();
  extracritdefence_ = value;
}

// required uint32 hitValue = 14;
inline bool PropData::has_hitvalue() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PropData::set_has_hitvalue() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PropData::clear_has_hitvalue() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PropData::clear_hitvalue() {
  hitvalue_ = 0u;
  clear_has_hitvalue();
}
inline ::google::protobuf::uint32 PropData::hitvalue() const {
  return hitvalue_;
}
inline void PropData::set_hitvalue(::google::protobuf::uint32 value) {
  set_has_hitvalue();
  hitvalue_ = value;
}

// required uint32 avoidValue = 15;
inline bool PropData::has_avoidvalue() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PropData::set_has_avoidvalue() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PropData::clear_has_avoidvalue() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PropData::clear_avoidvalue() {
  avoidvalue_ = 0u;
  clear_has_avoidvalue();
}
inline ::google::protobuf::uint32 PropData::avoidvalue() const {
  return avoidvalue_;
}
inline void PropData::set_avoidvalue(::google::protobuf::uint32 value) {
  set_has_avoidvalue();
  avoidvalue_ = value;
}

// required uint32 extraHitValue = 16;
inline bool PropData::has_extrahitvalue() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PropData::set_has_extrahitvalue() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PropData::clear_has_extrahitvalue() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PropData::clear_extrahitvalue() {
  extrahitvalue_ = 0u;
  clear_has_extrahitvalue();
}
inline ::google::protobuf::uint32 PropData::extrahitvalue() const {
  return extrahitvalue_;
}
inline void PropData::set_extrahitvalue(::google::protobuf::uint32 value) {
  set_has_extrahitvalue();
  extrahitvalue_ = value;
}

// required uint32 extraAvoidValue = 17;
inline bool PropData::has_extraavoidvalue() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PropData::set_has_extraavoidvalue() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PropData::clear_has_extraavoidvalue() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PropData::clear_extraavoidvalue() {
  extraavoidvalue_ = 0u;
  clear_has_extraavoidvalue();
}
inline ::google::protobuf::uint32 PropData::extraavoidvalue() const {
  return extraavoidvalue_;
}
inline void PropData::set_extraavoidvalue(::google::protobuf::uint32 value) {
  set_has_extraavoidvalue();
  extraavoidvalue_ = value;
}

// required uint32 moveSpeed = 18;
inline bool PropData::has_movespeed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PropData::set_has_movespeed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PropData::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PropData::clear_movespeed() {
  movespeed_ = 0u;
  clear_has_movespeed();
}
inline ::google::protobuf::uint32 PropData::movespeed() const {
  return movespeed_;
}
inline void PropData::set_movespeed(::google::protobuf::uint32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required uint32 hpRecoverySpeed = 19;
inline bool PropData::has_hprecoveryspeed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PropData::set_has_hprecoveryspeed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PropData::clear_has_hprecoveryspeed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PropData::clear_hprecoveryspeed() {
  hprecoveryspeed_ = 0u;
  clear_has_hprecoveryspeed();
}
inline ::google::protobuf::uint32 PropData::hprecoveryspeed() const {
  return hprecoveryspeed_;
}
inline void PropData::set_hprecoveryspeed(::google::protobuf::uint32 value) {
  set_has_hprecoveryspeed();
  hprecoveryspeed_ = value;
}

// required uint32 mpRecoverySpeed = 20;
inline bool PropData::has_mprecoveryspeed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PropData::set_has_mprecoveryspeed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PropData::clear_has_mprecoveryspeed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PropData::clear_mprecoveryspeed() {
  mprecoveryspeed_ = 0u;
  clear_has_mprecoveryspeed();
}
inline ::google::protobuf::uint32 PropData::mprecoveryspeed() const {
  return mprecoveryspeed_;
}
inline void PropData::set_mprecoveryspeed(::google::protobuf::uint32 value) {
  set_has_mprecoveryspeed();
  mprecoveryspeed_ = value;
}

// -------------------------------------------------------------------

// PetEquipBinary

// required uint32 pos = 1;
inline bool PetEquipBinary::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetEquipBinary::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetEquipBinary::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetEquipBinary::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 PetEquipBinary::pos() const {
  return pos_;
}
inline void PetEquipBinary::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// required uint32 itemBaseID = 2;
inline bool PetEquipBinary::has_itembaseid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetEquipBinary::set_has_itembaseid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetEquipBinary::clear_has_itembaseid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetEquipBinary::clear_itembaseid() {
  itembaseid_ = 0u;
  clear_has_itembaseid();
}
inline ::google::protobuf::uint32 PetEquipBinary::itembaseid() const {
  return itembaseid_;
}
inline void PetEquipBinary::set_itembaseid(::google::protobuf::uint32 value) {
  set_has_itembaseid();
  itembaseid_ = value;
}

// -------------------------------------------------------------------

// AllItemData

// repeated bytes itemData = 1;
inline int AllItemData::itemdata_size() const {
  return itemdata_.size();
}
inline void AllItemData::clear_itemdata() {
  itemdata_.Clear();
}
inline const ::std::string& AllItemData::itemdata(int index) const {
  return itemdata_.Get(index);
}
inline ::std::string* AllItemData::mutable_itemdata(int index) {
  return itemdata_.Mutable(index);
}
inline void AllItemData::set_itemdata(int index, const ::std::string& value) {
  itemdata_.Mutable(index)->assign(value);
}
inline void AllItemData::set_itemdata(int index, const char* value) {
  itemdata_.Mutable(index)->assign(value);
}
inline void AllItemData::set_itemdata(int index, const void* value, size_t size) {
  itemdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllItemData::add_itemdata() {
  return itemdata_.Add();
}
inline void AllItemData::add_itemdata(const ::std::string& value) {
  itemdata_.Add()->assign(value);
}
inline void AllItemData::add_itemdata(const char* value) {
  itemdata_.Add()->assign(value);
}
inline void AllItemData::add_itemdata(const void* value, size_t size) {
  itemdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AllItemData::itemdata() const {
  return itemdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AllItemData::mutable_itemdata() {
  return &itemdata_;
}

// -------------------------------------------------------------------

// ItemColdData

// required uint32 coldType = 1;
inline bool ItemColdData::has_coldtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemColdData::set_has_coldtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemColdData::clear_has_coldtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemColdData::clear_coldtype() {
  coldtype_ = 0u;
  clear_has_coldtype();
}
inline ::google::protobuf::uint32 ItemColdData::coldtype() const {
  return coldtype_;
}
inline void ItemColdData::set_coldtype(::google::protobuf::uint32 value) {
  set_has_coldtype();
  coldtype_ = value;
}

// required uint32 endTimeInSec = 2;
inline bool ItemColdData::has_endtimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemColdData::set_has_endtimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemColdData::clear_has_endtimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemColdData::clear_endtimeinsec() {
  endtimeinsec_ = 0u;
  clear_has_endtimeinsec();
}
inline ::google::protobuf::uint32 ItemColdData::endtimeinsec() const {
  return endtimeinsec_;
}
inline void ItemColdData::set_endtimeinsec(::google::protobuf::uint32 value) {
  set_has_endtimeinsec();
  endtimeinsec_ = value;
}

// -------------------------------------------------------------------

// ItemColdBinary

// repeated .protocol.user.ItemColdData itemColdData = 1;
inline int ItemColdBinary::itemcolddata_size() const {
  return itemcolddata_.size();
}
inline void ItemColdBinary::clear_itemcolddata() {
  itemcolddata_.Clear();
}
inline const ::protocol::user::ItemColdData& ItemColdBinary::itemcolddata(int index) const {
  return itemcolddata_.Get(index);
}
inline ::protocol::user::ItemColdData* ItemColdBinary::mutable_itemcolddata(int index) {
  return itemcolddata_.Mutable(index);
}
inline ::protocol::user::ItemColdData* ItemColdBinary::add_itemcolddata() {
  return itemcolddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::ItemColdData >&
ItemColdBinary::itemcolddata() const {
  return itemcolddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::ItemColdData >*
ItemColdBinary::mutable_itemcolddata() {
  return &itemcolddata_;
}

// -------------------------------------------------------------------

// AllPackageBinary

// repeated .protocol.item.ItemBinary items = 1;
inline int AllPackageBinary::items_size() const {
  return items_.size();
}
inline void AllPackageBinary::clear_items() {
  items_.Clear();
}
inline const ::protocol::item::ItemBinary& AllPackageBinary::items(int index) const {
  return items_.Get(index);
}
inline ::protocol::item::ItemBinary* AllPackageBinary::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protocol::item::ItemBinary* AllPackageBinary::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >&
AllPackageBinary::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::item::ItemBinary >*
AllPackageBinary::mutable_items() {
  return &items_;
}

// optional .protocol.user.MainPackageBinary mainPackageBinary = 2;
inline bool AllPackageBinary::has_mainpackagebinary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllPackageBinary::set_has_mainpackagebinary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllPackageBinary::clear_has_mainpackagebinary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllPackageBinary::clear_mainpackagebinary() {
  if (mainpackagebinary_ != NULL) mainpackagebinary_->::protocol::user::MainPackageBinary::Clear();
  clear_has_mainpackagebinary();
}
inline const ::protocol::user::MainPackageBinary& AllPackageBinary::mainpackagebinary() const {
  return mainpackagebinary_ != NULL ? *mainpackagebinary_ : *default_instance_->mainpackagebinary_;
}
inline ::protocol::user::MainPackageBinary* AllPackageBinary::mutable_mainpackagebinary() {
  set_has_mainpackagebinary();
  if (mainpackagebinary_ == NULL) mainpackagebinary_ = new ::protocol::user::MainPackageBinary;
  return mainpackagebinary_;
}
inline ::protocol::user::MainPackageBinary* AllPackageBinary::release_mainpackagebinary() {
  clear_has_mainpackagebinary();
  ::protocol::user::MainPackageBinary* temp = mainpackagebinary_;
  mainpackagebinary_ = NULL;
  return temp;
}
inline void AllPackageBinary::set_allocated_mainpackagebinary(::protocol::user::MainPackageBinary* mainpackagebinary) {
  delete mainpackagebinary_;
  mainpackagebinary_ = mainpackagebinary;
  if (mainpackagebinary) {
    set_has_mainpackagebinary();
  } else {
    clear_has_mainpackagebinary();
  }
}

// optional .protocol.user.EquipPackageBinary equipPackageBinary = 3;
inline bool AllPackageBinary::has_equippackagebinary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllPackageBinary::set_has_equippackagebinary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllPackageBinary::clear_has_equippackagebinary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllPackageBinary::clear_equippackagebinary() {
  if (equippackagebinary_ != NULL) equippackagebinary_->::protocol::user::EquipPackageBinary::Clear();
  clear_has_equippackagebinary();
}
inline const ::protocol::user::EquipPackageBinary& AllPackageBinary::equippackagebinary() const {
  return equippackagebinary_ != NULL ? *equippackagebinary_ : *default_instance_->equippackagebinary_;
}
inline ::protocol::user::EquipPackageBinary* AllPackageBinary::mutable_equippackagebinary() {
  set_has_equippackagebinary();
  if (equippackagebinary_ == NULL) equippackagebinary_ = new ::protocol::user::EquipPackageBinary;
  return equippackagebinary_;
}
inline ::protocol::user::EquipPackageBinary* AllPackageBinary::release_equippackagebinary() {
  clear_has_equippackagebinary();
  ::protocol::user::EquipPackageBinary* temp = equippackagebinary_;
  equippackagebinary_ = NULL;
  return temp;
}
inline void AllPackageBinary::set_allocated_equippackagebinary(::protocol::user::EquipPackageBinary* equippackagebinary) {
  delete equippackagebinary_;
  equippackagebinary_ = equippackagebinary;
  if (equippackagebinary) {
    set_has_equippackagebinary();
  } else {
    clear_has_equippackagebinary();
  }
}

// -------------------------------------------------------------------

// SkillBuildData

// optional uint32 weaponeID = 1;
inline bool SkillBuildData::has_weaponeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillBuildData::set_has_weaponeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillBuildData::clear_has_weaponeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillBuildData::clear_weaponeid() {
  weaponeid_ = 0u;
  clear_has_weaponeid();
}
inline ::google::protobuf::uint32 SkillBuildData::weaponeid() const {
  return weaponeid_;
}
inline void SkillBuildData::set_weaponeid(::google::protobuf::uint32 value) {
  set_has_weaponeid();
  weaponeid_ = value;
}

// repeated .protocol.user.BuildBaseData buildBaseData = 2;
inline int SkillBuildData::buildbasedata_size() const {
  return buildbasedata_.size();
}
inline void SkillBuildData::clear_buildbasedata() {
  buildbasedata_.Clear();
}
inline const ::protocol::user::BuildBaseData& SkillBuildData::buildbasedata(int index) const {
  return buildbasedata_.Get(index);
}
inline ::protocol::user::BuildBaseData* SkillBuildData::mutable_buildbasedata(int index) {
  return buildbasedata_.Mutable(index);
}
inline ::protocol::user::BuildBaseData* SkillBuildData::add_buildbasedata() {
  return buildbasedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::BuildBaseData >&
SkillBuildData::buildbasedata() const {
  return buildbasedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::BuildBaseData >*
SkillBuildData::mutable_buildbasedata() {
  return &buildbasedata_;
}

// -------------------------------------------------------------------

// BuildBaseData

// optional uint32 buildID = 1;
inline bool BuildBaseData::has_buildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildBaseData::set_has_buildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildBaseData::clear_has_buildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildBaseData::clear_buildid() {
  buildid_ = 0u;
  clear_has_buildid();
}
inline ::google::protobuf::uint32 BuildBaseData::buildid() const {
  return buildid_;
}
inline void BuildBaseData::set_buildid(::google::protobuf::uint32 value) {
  set_has_buildid();
  buildid_ = value;
}

// optional string buildName = 2;
inline bool BuildBaseData::has_buildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildBaseData::set_has_buildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildBaseData::clear_has_buildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildBaseData::clear_buildname() {
  if (buildname_ != &::google::protobuf::internal::kEmptyString) {
    buildname_->clear();
  }
  clear_has_buildname();
}
inline const ::std::string& BuildBaseData::buildname() const {
  return *buildname_;
}
inline void BuildBaseData::set_buildname(const ::std::string& value) {
  set_has_buildname();
  if (buildname_ == &::google::protobuf::internal::kEmptyString) {
    buildname_ = new ::std::string;
  }
  buildname_->assign(value);
}
inline void BuildBaseData::set_buildname(const char* value) {
  set_has_buildname();
  if (buildname_ == &::google::protobuf::internal::kEmptyString) {
    buildname_ = new ::std::string;
  }
  buildname_->assign(value);
}
inline void BuildBaseData::set_buildname(const char* value, size_t size) {
  set_has_buildname();
  if (buildname_ == &::google::protobuf::internal::kEmptyString) {
    buildname_ = new ::std::string;
  }
  buildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuildBaseData::mutable_buildname() {
  set_has_buildname();
  if (buildname_ == &::google::protobuf::internal::kEmptyString) {
    buildname_ = new ::std::string;
  }
  return buildname_;
}
inline ::std::string* BuildBaseData::release_buildname() {
  clear_has_buildname();
  if (buildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buildname_;
    buildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BuildBaseData::set_allocated_buildname(::std::string* buildname) {
  if (buildname_ != &::google::protobuf::internal::kEmptyString) {
    delete buildname_;
  }
  if (buildname) {
    set_has_buildname();
    buildname_ = buildname;
  } else {
    clear_has_buildname();
    buildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protocol.user.UseSkillData useSkillData = 3;
inline int BuildBaseData::useskilldata_size() const {
  return useskilldata_.size();
}
inline void BuildBaseData::clear_useskilldata() {
  useskilldata_.Clear();
}
inline const ::protocol::user::UseSkillData& BuildBaseData::useskilldata(int index) const {
  return useskilldata_.Get(index);
}
inline ::protocol::user::UseSkillData* BuildBaseData::mutable_useskilldata(int index) {
  return useskilldata_.Mutable(index);
}
inline ::protocol::user::UseSkillData* BuildBaseData::add_useskilldata() {
  return useskilldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >&
BuildBaseData::useskilldata() const {
  return useskilldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >*
BuildBaseData::mutable_useskilldata() {
  return &useskilldata_;
}

// -------------------------------------------------------------------

// UseBuildData

// optional uint32 weaponeID = 1;
inline bool UseBuildData::has_weaponeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseBuildData::set_has_weaponeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseBuildData::clear_has_weaponeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseBuildData::clear_weaponeid() {
  weaponeid_ = 0u;
  clear_has_weaponeid();
}
inline ::google::protobuf::uint32 UseBuildData::weaponeid() const {
  return weaponeid_;
}
inline void UseBuildData::set_weaponeid(::google::protobuf::uint32 value) {
  set_has_weaponeid();
  weaponeid_ = value;
}

// optional uint32 buildID = 2;
inline bool UseBuildData::has_buildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseBuildData::set_has_buildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseBuildData::clear_has_buildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseBuildData::clear_buildid() {
  buildid_ = 0u;
  clear_has_buildid();
}
inline ::google::protobuf::uint32 UseBuildData::buildid() const {
  return buildid_;
}
inline void UseBuildData::set_buildid(::google::protobuf::uint32 value) {
  set_has_buildid();
  buildid_ = value;
}

// -------------------------------------------------------------------

// UseSkillData

// optional uint32 skillID = 1;
inline bool UseSkillData::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseSkillData::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseSkillData::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseSkillData::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 UseSkillData::skillid() const {
  return skillid_;
}
inline void UseSkillData::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 selectIndex = 2;
inline bool UseSkillData::has_selectindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseSkillData::set_has_selectindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseSkillData::clear_has_selectindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseSkillData::clear_selectindex() {
  selectindex_ = 0u;
  clear_has_selectindex();
}
inline ::google::protobuf::uint32 UseSkillData::selectindex() const {
  return selectindex_;
}
inline void UseSkillData::set_selectindex(::google::protobuf::uint32 value) {
  set_has_selectindex();
  selectindex_ = value;
}

// -------------------------------------------------------------------

// UseSkillBinary

// repeated .protocol.user.UseSkillData useSkillData = 1;
inline int UseSkillBinary::useskilldata_size() const {
  return useskilldata_.size();
}
inline void UseSkillBinary::clear_useskilldata() {
  useskilldata_.Clear();
}
inline const ::protocol::user::UseSkillData& UseSkillBinary::useskilldata(int index) const {
  return useskilldata_.Get(index);
}
inline ::protocol::user::UseSkillData* UseSkillBinary::mutable_useskilldata(int index) {
  return useskilldata_.Mutable(index);
}
inline ::protocol::user::UseSkillData* UseSkillBinary::add_useskilldata() {
  return useskilldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >&
UseSkillBinary::useskilldata() const {
  return useskilldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseSkillData >*
UseSkillBinary::mutable_useskilldata() {
  return &useskilldata_;
}

// repeated .protocol.user.SkillBuildData skillBuilddata = 2;
inline int UseSkillBinary::skillbuilddata_size() const {
  return skillbuilddata_.size();
}
inline void UseSkillBinary::clear_skillbuilddata() {
  skillbuilddata_.Clear();
}
inline const ::protocol::user::SkillBuildData& UseSkillBinary::skillbuilddata(int index) const {
  return skillbuilddata_.Get(index);
}
inline ::protocol::user::SkillBuildData* UseSkillBinary::mutable_skillbuilddata(int index) {
  return skillbuilddata_.Mutable(index);
}
inline ::protocol::user::SkillBuildData* UseSkillBinary::add_skillbuilddata() {
  return skillbuilddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillBuildData >&
UseSkillBinary::skillbuilddata() const {
  return skillbuilddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillBuildData >*
UseSkillBinary::mutable_skillbuilddata() {
  return &skillbuilddata_;
}

// repeated .protocol.user.UseBuildData useBuildData = 3;
inline int UseSkillBinary::usebuilddata_size() const {
  return usebuilddata_.size();
}
inline void UseSkillBinary::clear_usebuilddata() {
  usebuilddata_.Clear();
}
inline const ::protocol::user::UseBuildData& UseSkillBinary::usebuilddata(int index) const {
  return usebuilddata_.Get(index);
}
inline ::protocol::user::UseBuildData* UseSkillBinary::mutable_usebuilddata(int index) {
  return usebuilddata_.Mutable(index);
}
inline ::protocol::user::UseBuildData* UseSkillBinary::add_usebuilddata() {
  return usebuilddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UseBuildData >&
UseSkillBinary::usebuilddata() const {
  return usebuilddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UseBuildData >*
UseSkillBinary::mutable_usebuilddata() {
  return &usebuilddata_;
}

// -------------------------------------------------------------------

// HaveSkillBinary

// repeated .protocol.user.SkillData skillData = 1;
inline int HaveSkillBinary::skilldata_size() const {
  return skilldata_.size();
}
inline void HaveSkillBinary::clear_skilldata() {
  skilldata_.Clear();
}
inline const ::protocol::user::SkillData& HaveSkillBinary::skilldata(int index) const {
  return skilldata_.Get(index);
}
inline ::protocol::user::SkillData* HaveSkillBinary::mutable_skilldata(int index) {
  return skilldata_.Mutable(index);
}
inline ::protocol::user::SkillData* HaveSkillBinary::add_skilldata() {
  return skilldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >&
HaveSkillBinary::skilldata() const {
  return skilldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::SkillData >*
HaveSkillBinary::mutable_skilldata() {
  return &skilldata_;
}

// repeated .protocol.user.UserUnlockWeaponData userUnlockWeaponData = 2;
inline int HaveSkillBinary::userunlockweapondata_size() const {
  return userunlockweapondata_.size();
}
inline void HaveSkillBinary::clear_userunlockweapondata() {
  userunlockweapondata_.Clear();
}
inline const ::protocol::user::UserUnlockWeaponData& HaveSkillBinary::userunlockweapondata(int index) const {
  return userunlockweapondata_.Get(index);
}
inline ::protocol::user::UserUnlockWeaponData* HaveSkillBinary::mutable_userunlockweapondata(int index) {
  return userunlockweapondata_.Mutable(index);
}
inline ::protocol::user::UserUnlockWeaponData* HaveSkillBinary::add_userunlockweapondata() {
  return userunlockweapondata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::UserUnlockWeaponData >&
HaveSkillBinary::userunlockweapondata() const {
  return userunlockweapondata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::UserUnlockWeaponData >*
HaveSkillBinary::mutable_userunlockweapondata() {
  return &userunlockweapondata_;
}

// -------------------------------------------------------------------

// SkillData

// required uint32 skillID = 1;
inline bool SkillData::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillData::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillData::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillData::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 SkillData::skillid() const {
  return skillid_;
}
inline void SkillData::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required uint32 skillLevel = 2;
inline bool SkillData::has_skilllevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillData::set_has_skilllevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillData::clear_has_skilllevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillData::clear_skilllevel() {
  skilllevel_ = 0u;
  clear_has_skilllevel();
}
inline ::google::protobuf::uint32 SkillData::skilllevel() const {
  return skilllevel_;
}
inline void SkillData::set_skilllevel(::google::protobuf::uint32 value) {
  set_has_skilllevel();
  skilllevel_ = value;
}

// -------------------------------------------------------------------

// UserUnlockWeaponData

// required uint32 weaponID = 1;
inline bool UserUnlockWeaponData::has_weaponid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserUnlockWeaponData::set_has_weaponid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserUnlockWeaponData::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserUnlockWeaponData::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 UserUnlockWeaponData::weaponid() const {
  return weaponid_;
}
inline void UserUnlockWeaponData::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// required uint32 unlockState = 2;
inline bool UserUnlockWeaponData::has_unlockstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserUnlockWeaponData::set_has_unlockstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserUnlockWeaponData::clear_has_unlockstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserUnlockWeaponData::clear_unlockstate() {
  unlockstate_ = 0u;
  clear_has_unlockstate();
}
inline ::google::protobuf::uint32 UserUnlockWeaponData::unlockstate() const {
  return unlockstate_;
}
inline void UserUnlockWeaponData::set_unlockstate(::google::protobuf::uint32 value) {
  set_has_unlockstate();
  unlockstate_ = value;
}

// -------------------------------------------------------------------

// UnlockPassiveSkillBarBinary

// repeated uint32 index = 1;
inline int UnlockPassiveSkillBarBinary::index_size() const {
  return index_.size();
}
inline void UnlockPassiveSkillBarBinary::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::uint32 UnlockPassiveSkillBarBinary::index(int index) const {
  return index_.Get(index);
}
inline void UnlockPassiveSkillBarBinary::set_index(int index, ::google::protobuf::uint32 value) {
  index_.Set(index, value);
}
inline void UnlockPassiveSkillBarBinary::add_index(::google::protobuf::uint32 value) {
  index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UnlockPassiveSkillBarBinary::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UnlockPassiveSkillBarBinary::mutable_index() {
  return &index_;
}

// -------------------------------------------------------------------

// DuplBinary

// repeated .protocol.user.DuplData dupldata = 1;
inline int DuplBinary::dupldata_size() const {
  return dupldata_.size();
}
inline void DuplBinary::clear_dupldata() {
  dupldata_.Clear();
}
inline const ::protocol::user::DuplData& DuplBinary::dupldata(int index) const {
  return dupldata_.Get(index);
}
inline ::protocol::user::DuplData* DuplBinary::mutable_dupldata(int index) {
  return dupldata_.Mutable(index);
}
inline ::protocol::user::DuplData* DuplBinary::add_dupldata() {
  return dupldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DuplData >&
DuplBinary::dupldata() const {
  return dupldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DuplData >*
DuplBinary::mutable_dupldata() {
  return &dupldata_;
}

// repeated .protocol.user.RealmData realmData = 2;
inline int DuplBinary::realmdata_size() const {
  return realmdata_.size();
}
inline void DuplBinary::clear_realmdata() {
  realmdata_.Clear();
}
inline const ::protocol::user::RealmData& DuplBinary::realmdata(int index) const {
  return realmdata_.Get(index);
}
inline ::protocol::user::RealmData* DuplBinary::mutable_realmdata(int index) {
  return realmdata_.Mutable(index);
}
inline ::protocol::user::RealmData* DuplBinary::add_realmdata() {
  return realmdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::RealmData >&
DuplBinary::realmdata() const {
  return realmdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::RealmData >*
DuplBinary::mutable_realmdata() {
  return &realmdata_;
}

// required uint32 ExpDuplRemainTimes = 3;
inline bool DuplBinary::has_expduplremaintimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DuplBinary::set_has_expduplremaintimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DuplBinary::clear_has_expduplremaintimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DuplBinary::clear_expduplremaintimes() {
  expduplremaintimes_ = 0u;
  clear_has_expduplremaintimes();
}
inline ::google::protobuf::uint32 DuplBinary::expduplremaintimes() const {
  return expduplremaintimes_;
}
inline void DuplBinary::set_expduplremaintimes(::google::protobuf::uint32 value) {
  set_has_expduplremaintimes();
  expduplremaintimes_ = value;
}

// required uint32 MoneyDuplRemainTimes = 4;
inline bool DuplBinary::has_moneyduplremaintimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DuplBinary::set_has_moneyduplremaintimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DuplBinary::clear_has_moneyduplremaintimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DuplBinary::clear_moneyduplremaintimes() {
  moneyduplremaintimes_ = 0u;
  clear_has_moneyduplremaintimes();
}
inline ::google::protobuf::uint32 DuplBinary::moneyduplremaintimes() const {
  return moneyduplremaintimes_;
}
inline void DuplBinary::set_moneyduplremaintimes(::google::protobuf::uint32 value) {
  set_has_moneyduplremaintimes();
  moneyduplremaintimes_ = value;
}

// required .protocol.user.GamblingDataBinary gamblingDataBinary = 5;
inline bool DuplBinary::has_gamblingdatabinary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DuplBinary::set_has_gamblingdatabinary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DuplBinary::clear_has_gamblingdatabinary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DuplBinary::clear_gamblingdatabinary() {
  if (gamblingdatabinary_ != NULL) gamblingdatabinary_->::protocol::user::GamblingDataBinary::Clear();
  clear_has_gamblingdatabinary();
}
inline const ::protocol::user::GamblingDataBinary& DuplBinary::gamblingdatabinary() const {
  return gamblingdatabinary_ != NULL ? *gamblingdatabinary_ : *default_instance_->gamblingdatabinary_;
}
inline ::protocol::user::GamblingDataBinary* DuplBinary::mutable_gamblingdatabinary() {
  set_has_gamblingdatabinary();
  if (gamblingdatabinary_ == NULL) gamblingdatabinary_ = new ::protocol::user::GamblingDataBinary;
  return gamblingdatabinary_;
}
inline ::protocol::user::GamblingDataBinary* DuplBinary::release_gamblingdatabinary() {
  clear_has_gamblingdatabinary();
  ::protocol::user::GamblingDataBinary* temp = gamblingdatabinary_;
  gamblingdatabinary_ = NULL;
  return temp;
}
inline void DuplBinary::set_allocated_gamblingdatabinary(::protocol::user::GamblingDataBinary* gamblingdatabinary) {
  delete gamblingdatabinary_;
  gamblingdatabinary_ = gamblingdatabinary;
  if (gamblingdatabinary) {
    set_has_gamblingdatabinary();
  } else {
    clear_has_gamblingdatabinary();
  }
}

// required uint32 ItemDuplRemainTimes = 6;
inline bool DuplBinary::has_itemduplremaintimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DuplBinary::set_has_itemduplremaintimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DuplBinary::clear_has_itemduplremaintimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DuplBinary::clear_itemduplremaintimes() {
  itemduplremaintimes_ = 0u;
  clear_has_itemduplremaintimes();
}
inline ::google::protobuf::uint32 DuplBinary::itemduplremaintimes() const {
  return itemduplremaintimes_;
}
inline void DuplBinary::set_itemduplremaintimes(::google::protobuf::uint32 value) {
  set_has_itemduplremaintimes();
  itemduplremaintimes_ = value;
}

// optional uint32 buyBackTimes = 7;
inline bool DuplBinary::has_buybacktimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DuplBinary::set_has_buybacktimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DuplBinary::clear_has_buybacktimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DuplBinary::clear_buybacktimes() {
  buybacktimes_ = 0u;
  clear_has_buybacktimes();
}
inline ::google::protobuf::uint32 DuplBinary::buybacktimes() const {
  return buybacktimes_;
}
inline void DuplBinary::set_buybacktimes(::google::protobuf::uint32 value) {
  set_has_buybacktimes();
  buybacktimes_ = value;
}

// -------------------------------------------------------------------

// DuplData

// required uint32 duplID = 1;
inline bool DuplData::has_duplid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DuplData::set_has_duplid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DuplData::clear_has_duplid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DuplData::clear_duplid() {
  duplid_ = 0u;
  clear_has_duplid();
}
inline ::google::protobuf::uint32 DuplData::duplid() const {
  return duplid_;
}
inline void DuplData::set_duplid(::google::protobuf::uint32 value) {
  set_has_duplid();
  duplid_ = value;
}

// required uint32 duplStar = 2;
inline bool DuplData::has_duplstar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DuplData::set_has_duplstar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DuplData::clear_has_duplstar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DuplData::clear_duplstar() {
  duplstar_ = 0u;
  clear_has_duplstar();
}
inline ::google::protobuf::uint32 DuplData::duplstar() const {
  return duplstar_;
}
inline void DuplData::set_duplstar(::google::protobuf::uint32 value) {
  set_has_duplstar();
  duplstar_ = value;
}

// required uint32 remainTimes = 3;
inline bool DuplData::has_remaintimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DuplData::set_has_remaintimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DuplData::clear_has_remaintimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DuplData::clear_remaintimes() {
  remaintimes_ = 0u;
  clear_has_remaintimes();
}
inline ::google::protobuf::uint32 DuplData::remaintimes() const {
  return remaintimes_;
}
inline void DuplData::set_remaintimes(::google::protobuf::uint32 value) {
  set_has_remaintimes();
  remaintimes_ = value;
}

// required uint32 havePlayStory = 4;
inline bool DuplData::has_haveplaystory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DuplData::set_has_haveplaystory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DuplData::clear_has_haveplaystory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DuplData::clear_haveplaystory() {
  haveplaystory_ = 0u;
  clear_has_haveplaystory();
}
inline ::google::protobuf::uint32 DuplData::haveplaystory() const {
  return haveplaystory_;
}
inline void DuplData::set_haveplaystory(::google::protobuf::uint32 value) {
  set_has_haveplaystory();
  haveplaystory_ = value;
}

// required uint32 resetRemainTimes = 5;
inline bool DuplData::has_resetremaintimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DuplData::set_has_resetremaintimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DuplData::clear_has_resetremaintimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DuplData::clear_resetremaintimes() {
  resetremaintimes_ = 0u;
  clear_has_resetremaintimes();
}
inline ::google::protobuf::uint32 DuplData::resetremaintimes() const {
  return resetremaintimes_;
}
inline void DuplData::set_resetremaintimes(::google::protobuf::uint32 value) {
  set_has_resetremaintimes();
  resetremaintimes_ = value;
}

// -------------------------------------------------------------------

// RealmData

// optional uint32 realmID = 1;
inline bool RealmData::has_realmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealmData::set_has_realmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealmData::clear_has_realmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealmData::clear_realmid() {
  realmid_ = 0u;
  clear_has_realmid();
}
inline ::google::protobuf::uint32 RealmData::realmid() const {
  return realmid_;
}
inline void RealmData::set_realmid(::google::protobuf::uint32 value) {
  set_has_realmid();
  realmid_ = value;
}

// optional uint32 difficultyLevel = 2;
inline bool RealmData::has_difficultylevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RealmData::set_has_difficultylevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RealmData::clear_has_difficultylevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RealmData::clear_difficultylevel() {
  difficultylevel_ = 0u;
  clear_has_difficultylevel();
}
inline ::google::protobuf::uint32 RealmData::difficultylevel() const {
  return difficultylevel_;
}
inline void RealmData::set_difficultylevel(::google::protobuf::uint32 value) {
  set_has_difficultylevel();
  difficultylevel_ = value;
}

// repeated uint32 boxID = 3;
inline int RealmData::boxid_size() const {
  return boxid_.size();
}
inline void RealmData::clear_boxid() {
  boxid_.Clear();
}
inline ::google::protobuf::uint32 RealmData::boxid(int index) const {
  return boxid_.Get(index);
}
inline void RealmData::set_boxid(int index, ::google::protobuf::uint32 value) {
  boxid_.Set(index, value);
}
inline void RealmData::add_boxid(::google::protobuf::uint32 value) {
  boxid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RealmData::boxid() const {
  return boxid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RealmData::mutable_boxid() {
  return &boxid_;
}

// -------------------------------------------------------------------

// GamblingDataBinary

// optional uint32 gamblingDuplID = 1;
inline bool GamblingDataBinary::has_gamblingduplid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamblingDataBinary::set_has_gamblingduplid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamblingDataBinary::clear_has_gamblingduplid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamblingDataBinary::clear_gamblingduplid() {
  gamblingduplid_ = 0u;
  clear_has_gamblingduplid();
}
inline ::google::protobuf::uint32 GamblingDataBinary::gamblingduplid() const {
  return gamblingduplid_;
}
inline void GamblingDataBinary::set_gamblingduplid(::google::protobuf::uint32 value) {
  set_has_gamblingduplid();
  gamblingduplid_ = value;
}

// optional uint32 gamblingDuplRemainTimes = 2;
inline bool GamblingDataBinary::has_gamblingduplremaintimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamblingDataBinary::set_has_gamblingduplremaintimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamblingDataBinary::clear_has_gamblingduplremaintimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamblingDataBinary::clear_gamblingduplremaintimes() {
  gamblingduplremaintimes_ = 0u;
  clear_has_gamblingduplremaintimes();
}
inline ::google::protobuf::uint32 GamblingDataBinary::gamblingduplremaintimes() const {
  return gamblingduplremaintimes_;
}
inline void GamblingDataBinary::set_gamblingduplremaintimes(::google::protobuf::uint32 value) {
  set_has_gamblingduplremaintimes();
  gamblingduplremaintimes_ = value;
}

// optional bool canAward = 3;
inline bool GamblingDataBinary::has_canaward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamblingDataBinary::set_has_canaward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamblingDataBinary::clear_has_canaward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamblingDataBinary::clear_canaward() {
  canaward_ = false;
  clear_has_canaward();
}
inline bool GamblingDataBinary::canaward() const {
  return canaward_;
}
inline void GamblingDataBinary::set_canaward(bool value) {
  set_has_canaward();
  canaward_ = value;
}

// repeated .protocol.user.GamblingDropItem gamblingDropItem = 4;
inline int GamblingDataBinary::gamblingdropitem_size() const {
  return gamblingdropitem_.size();
}
inline void GamblingDataBinary::clear_gamblingdropitem() {
  gamblingdropitem_.Clear();
}
inline const ::protocol::user::GamblingDropItem& GamblingDataBinary::gamblingdropitem(int index) const {
  return gamblingdropitem_.Get(index);
}
inline ::protocol::user::GamblingDropItem* GamblingDataBinary::mutable_gamblingdropitem(int index) {
  return gamblingdropitem_.Mutable(index);
}
inline ::protocol::user::GamblingDropItem* GamblingDataBinary::add_gamblingdropitem() {
  return gamblingdropitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingDropItem >&
GamblingDataBinary::gamblingdropitem() const {
  return gamblingdropitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingDropItem >*
GamblingDataBinary::mutable_gamblingdropitem() {
  return &gamblingdropitem_;
}

// optional uint32 willExp = 5;
inline bool GamblingDataBinary::has_willexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamblingDataBinary::set_has_willexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamblingDataBinary::clear_has_willexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamblingDataBinary::clear_willexp() {
  willexp_ = 0u;
  clear_has_willexp();
}
inline ::google::protobuf::uint32 GamblingDataBinary::willexp() const {
  return willexp_;
}
inline void GamblingDataBinary::set_willexp(::google::protobuf::uint32 value) {
  set_has_willexp();
  willexp_ = value;
}

// optional uint32 willMoney = 6;
inline bool GamblingDataBinary::has_willmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GamblingDataBinary::set_has_willmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GamblingDataBinary::clear_has_willmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GamblingDataBinary::clear_willmoney() {
  willmoney_ = 0u;
  clear_has_willmoney();
}
inline ::google::protobuf::uint32 GamblingDataBinary::willmoney() const {
  return willmoney_;
}
inline void GamblingDataBinary::set_willmoney(::google::protobuf::uint32 value) {
  set_has_willmoney();
  willmoney_ = value;
}

// repeated .protocol.user.GamblingWillDropItem gamblingWillDropItem = 7;
inline int GamblingDataBinary::gamblingwilldropitem_size() const {
  return gamblingwilldropitem_.size();
}
inline void GamblingDataBinary::clear_gamblingwilldropitem() {
  gamblingwilldropitem_.Clear();
}
inline const ::protocol::user::GamblingWillDropItem& GamblingDataBinary::gamblingwilldropitem(int index) const {
  return gamblingwilldropitem_.Get(index);
}
inline ::protocol::user::GamblingWillDropItem* GamblingDataBinary::mutable_gamblingwilldropitem(int index) {
  return gamblingwilldropitem_.Mutable(index);
}
inline ::protocol::user::GamblingWillDropItem* GamblingDataBinary::add_gamblingwilldropitem() {
  return gamblingwilldropitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingWillDropItem >&
GamblingDataBinary::gamblingwilldropitem() const {
  return gamblingwilldropitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::GamblingWillDropItem >*
GamblingDataBinary::mutable_gamblingwilldropitem() {
  return &gamblingwilldropitem_;
}

// optional uint32 bossID = 8;
inline bool GamblingDataBinary::has_bossid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GamblingDataBinary::set_has_bossid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GamblingDataBinary::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GamblingDataBinary::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 GamblingDataBinary::bossid() const {
  return bossid_;
}
inline void GamblingDataBinary::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional uint32 isReward = 9;
inline bool GamblingDataBinary::has_isreward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GamblingDataBinary::set_has_isreward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GamblingDataBinary::clear_has_isreward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GamblingDataBinary::clear_isreward() {
  isreward_ = 0u;
  clear_has_isreward();
}
inline ::google::protobuf::uint32 GamblingDataBinary::isreward() const {
  return isreward_;
}
inline void GamblingDataBinary::set_isreward(::google::protobuf::uint32 value) {
  set_has_isreward();
  isreward_ = value;
}

// -------------------------------------------------------------------

// GamblingDropItem

// optional uint32 itemBaseID = 1;
inline bool GamblingDropItem::has_itembaseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamblingDropItem::set_has_itembaseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamblingDropItem::clear_has_itembaseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamblingDropItem::clear_itembaseid() {
  itembaseid_ = 0u;
  clear_has_itembaseid();
}
inline ::google::protobuf::uint32 GamblingDropItem::itembaseid() const {
  return itembaseid_;
}
inline void GamblingDropItem::set_itembaseid(::google::protobuf::uint32 value) {
  set_has_itembaseid();
  itembaseid_ = value;
}

// optional uint32 num = 2;
inline bool GamblingDropItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamblingDropItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamblingDropItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamblingDropItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 GamblingDropItem::num() const {
  return num_;
}
inline void GamblingDropItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 quality = 3;
inline bool GamblingDropItem::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamblingDropItem::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamblingDropItem::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamblingDropItem::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 GamblingDropItem::quality() const {
  return quality_;
}
inline void GamblingDropItem::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional uint32 identify = 4;
inline bool GamblingDropItem::has_identify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamblingDropItem::set_has_identify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamblingDropItem::clear_has_identify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamblingDropItem::clear_identify() {
  identify_ = 0u;
  clear_has_identify();
}
inline ::google::protobuf::uint32 GamblingDropItem::identify() const {
  return identify_;
}
inline void GamblingDropItem::set_identify(::google::protobuf::uint32 value) {
  set_has_identify();
  identify_ = value;
}

// optional uint32 needBind = 5;
inline bool GamblingDropItem::has_needbind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamblingDropItem::set_has_needbind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamblingDropItem::clear_has_needbind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamblingDropItem::clear_needbind() {
  needbind_ = 0u;
  clear_has_needbind();
}
inline ::google::protobuf::uint32 GamblingDropItem::needbind() const {
  return needbind_;
}
inline void GamblingDropItem::set_needbind(::google::protobuf::uint32 value) {
  set_has_needbind();
  needbind_ = value;
}

// -------------------------------------------------------------------

// GamblingWillDropItem

// optional uint32 itemBaseID = 1;
inline bool GamblingWillDropItem::has_itembaseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamblingWillDropItem::set_has_itembaseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamblingWillDropItem::clear_has_itembaseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamblingWillDropItem::clear_itembaseid() {
  itembaseid_ = 0u;
  clear_has_itembaseid();
}
inline ::google::protobuf::uint32 GamblingWillDropItem::itembaseid() const {
  return itembaseid_;
}
inline void GamblingWillDropItem::set_itembaseid(::google::protobuf::uint32 value) {
  set_has_itembaseid();
  itembaseid_ = value;
}

// optional uint32 num = 2;
inline bool GamblingWillDropItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamblingWillDropItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamblingWillDropItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamblingWillDropItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 GamblingWillDropItem::num() const {
  return num_;
}
inline void GamblingWillDropItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 quality = 3;
inline bool GamblingWillDropItem::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamblingWillDropItem::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamblingWillDropItem::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamblingWillDropItem::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 GamblingWillDropItem::quality() const {
  return quality_;
}
inline void GamblingWillDropItem::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional uint32 identify = 4;
inline bool GamblingWillDropItem::has_identify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamblingWillDropItem::set_has_identify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamblingWillDropItem::clear_has_identify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamblingWillDropItem::clear_identify() {
  identify_ = 0u;
  clear_has_identify();
}
inline ::google::protobuf::uint32 GamblingWillDropItem::identify() const {
  return identify_;
}
inline void GamblingWillDropItem::set_identify(::google::protobuf::uint32 value) {
  set_has_identify();
  identify_ = value;
}

// optional uint32 needBind = 5;
inline bool GamblingWillDropItem::has_needbind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamblingWillDropItem::set_has_needbind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamblingWillDropItem::clear_has_needbind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamblingWillDropItem::clear_needbind() {
  needbind_ = 0u;
  clear_has_needbind();
}
inline ::google::protobuf::uint32 GamblingWillDropItem::needbind() const {
  return needbind_;
}
inline void GamblingWillDropItem::set_needbind(::google::protobuf::uint32 value) {
  set_has_needbind();
  needbind_ = value;
}

// -------------------------------------------------------------------

// StoneData

// required uint32 stoneID = 1;
inline bool StoneData::has_stoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoneData::set_has_stoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoneData::clear_has_stoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoneData::clear_stoneid() {
  stoneid_ = 0u;
  clear_has_stoneid();
}
inline ::google::protobuf::uint32 StoneData::stoneid() const {
  return stoneid_;
}
inline void StoneData::set_stoneid(::google::protobuf::uint32 value) {
  set_has_stoneid();
  stoneid_ = value;
}

// required uint32 stoneLevel = 2;
inline bool StoneData::has_stonelevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoneData::set_has_stonelevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoneData::clear_has_stonelevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoneData::clear_stonelevel() {
  stonelevel_ = 0u;
  clear_has_stonelevel();
}
inline ::google::protobuf::uint32 StoneData::stonelevel() const {
  return stonelevel_;
}
inline void StoneData::set_stonelevel(::google::protobuf::uint32 value) {
  set_has_stonelevel();
  stonelevel_ = value;
}

// -------------------------------------------------------------------

// EquipPosData

// required uint32 equipPos = 1;
inline bool EquipPosData::has_equippos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipPosData::set_has_equippos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipPosData::clear_has_equippos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipPosData::clear_equippos() {
  equippos_ = 0u;
  clear_has_equippos();
}
inline ::google::protobuf::uint32 EquipPosData::equippos() const {
  return equippos_;
}
inline void EquipPosData::set_equippos(::google::protobuf::uint32 value) {
  set_has_equippos();
  equippos_ = value;
}

// required uint32 intensifyLevel = 2;
inline bool EquipPosData::has_intensifylevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipPosData::set_has_intensifylevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipPosData::clear_has_intensifylevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipPosData::clear_intensifylevel() {
  intensifylevel_ = 0u;
  clear_has_intensifylevel();
}
inline ::google::protobuf::uint32 EquipPosData::intensifylevel() const {
  return intensifylevel_;
}
inline void EquipPosData::set_intensifylevel(::google::protobuf::uint32 value) {
  set_has_intensifylevel();
  intensifylevel_ = value;
}

// repeated .protocol.user.StoneData stoneData = 3;
inline int EquipPosData::stonedata_size() const {
  return stonedata_.size();
}
inline void EquipPosData::clear_stonedata() {
  stonedata_.Clear();
}
inline const ::protocol::user::StoneData& EquipPosData::stonedata(int index) const {
  return stonedata_.Get(index);
}
inline ::protocol::user::StoneData* EquipPosData::mutable_stonedata(int index) {
  return stonedata_.Mutable(index);
}
inline ::protocol::user::StoneData* EquipPosData::add_stonedata() {
  return stonedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::StoneData >&
EquipPosData::stonedata() const {
  return stonedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::StoneData >*
EquipPosData::mutable_stonedata() {
  return &stonedata_;
}

// -------------------------------------------------------------------

// EquipPosBinary

// repeated .protocol.user.EquipPosData equipPosData = 1;
inline int EquipPosBinary::equipposdata_size() const {
  return equipposdata_.size();
}
inline void EquipPosBinary::clear_equipposdata() {
  equipposdata_.Clear();
}
inline const ::protocol::user::EquipPosData& EquipPosBinary::equipposdata(int index) const {
  return equipposdata_.Get(index);
}
inline ::protocol::user::EquipPosData* EquipPosBinary::mutable_equipposdata(int index) {
  return equipposdata_.Mutable(index);
}
inline ::protocol::user::EquipPosData* EquipPosBinary::add_equipposdata() {
  return equipposdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipPosData >&
EquipPosBinary::equipposdata() const {
  return equipposdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipPosData >*
EquipPosBinary::mutable_equipposdata() {
  return &equipposdata_;
}

// -------------------------------------------------------------------

// TrumpBinary

// repeated .protocol.user.TrumpData trumpData = 1;
inline int TrumpBinary::trumpdata_size() const {
  return trumpdata_.size();
}
inline void TrumpBinary::clear_trumpdata() {
  trumpdata_.Clear();
}
inline const ::protocol::user::TrumpData& TrumpBinary::trumpdata(int index) const {
  return trumpdata_.Get(index);
}
inline ::protocol::user::TrumpData* TrumpBinary::mutable_trumpdata(int index) {
  return trumpdata_.Mutable(index);
}
inline ::protocol::user::TrumpData* TrumpBinary::add_trumpdata() {
  return trumpdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpData >&
TrumpBinary::trumpdata() const {
  return trumpdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpData >*
TrumpBinary::mutable_trumpdata() {
  return &trumpdata_;
}

// required uint32 useTrumpID = 2;
inline bool TrumpBinary::has_usetrumpid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrumpBinary::set_has_usetrumpid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrumpBinary::clear_has_usetrumpid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrumpBinary::clear_usetrumpid() {
  usetrumpid_ = 0u;
  clear_has_usetrumpid();
}
inline ::google::protobuf::uint32 TrumpBinary::usetrumpid() const {
  return usetrumpid_;
}
inline void TrumpBinary::set_usetrumpid(::google::protobuf::uint32 value) {
  set_has_usetrumpid();
  usetrumpid_ = value;
}

// required uint32 useTrumpLevel = 3;
inline bool TrumpBinary::has_usetrumplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrumpBinary::set_has_usetrumplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrumpBinary::clear_has_usetrumplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrumpBinary::clear_usetrumplevel() {
  usetrumplevel_ = 0u;
  clear_has_usetrumplevel();
}
inline ::google::protobuf::uint32 TrumpBinary::usetrumplevel() const {
  return usetrumplevel_;
}
inline void TrumpBinary::set_usetrumplevel(::google::protobuf::uint32 value) {
  set_has_usetrumplevel();
  usetrumplevel_ = value;
}

// -------------------------------------------------------------------

// TrumpData

// required uint32 trumpID = 1;
inline bool TrumpData::has_trumpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrumpData::set_has_trumpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrumpData::clear_has_trumpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrumpData::clear_trumpid() {
  trumpid_ = 0u;
  clear_has_trumpid();
}
inline ::google::protobuf::uint32 TrumpData::trumpid() const {
  return trumpid_;
}
inline void TrumpData::set_trumpid(::google::protobuf::uint32 value) {
  set_has_trumpid();
  trumpid_ = value;
}

// required uint32 level = 2;
inline bool TrumpData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrumpData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrumpData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrumpData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TrumpData::level() const {
  return level_;
}
inline void TrumpData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// repeated .protocol.user.TrumpSkillData skillData = 3;
inline int TrumpData::skilldata_size() const {
  return skilldata_.size();
}
inline void TrumpData::clear_skilldata() {
  skilldata_.Clear();
}
inline const ::protocol::user::TrumpSkillData& TrumpData::skilldata(int index) const {
  return skilldata_.Get(index);
}
inline ::protocol::user::TrumpSkillData* TrumpData::mutable_skilldata(int index) {
  return skilldata_.Mutable(index);
}
inline ::protocol::user::TrumpSkillData* TrumpData::add_skilldata() {
  return skilldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpSkillData >&
TrumpData::skilldata() const {
  return skilldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpSkillData >*
TrumpData::mutable_skilldata() {
  return &skilldata_;
}

// required uint32 blessingValue = 4;
inline bool TrumpData::has_blessingvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrumpData::set_has_blessingvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrumpData::clear_has_blessingvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrumpData::clear_blessingvalue() {
  blessingvalue_ = 0u;
  clear_has_blessingvalue();
}
inline ::google::protobuf::uint32 TrumpData::blessingvalue() const {
  return blessingvalue_;
}
inline void TrumpData::set_blessingvalue(::google::protobuf::uint32 value) {
  set_has_blessingvalue();
  blessingvalue_ = value;
}

// -------------------------------------------------------------------

// TrumpSkillData

// required uint32 skillID = 1;
inline bool TrumpSkillData::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrumpSkillData::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrumpSkillData::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrumpSkillData::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 TrumpSkillData::skillid() const {
  return skillid_;
}
inline void TrumpSkillData::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required uint32 skillLevel = 2;
inline bool TrumpSkillData::has_skilllevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrumpSkillData::set_has_skilllevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrumpSkillData::clear_has_skilllevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrumpSkillData::clear_skilllevel() {
  skilllevel_ = 0u;
  clear_has_skilllevel();
}
inline ::google::protobuf::uint32 TrumpSkillData::skilllevel() const {
  return skilllevel_;
}
inline void TrumpSkillData::set_skilllevel(::google::protobuf::uint32 value) {
  set_has_skilllevel();
  skilllevel_ = value;
}

// -------------------------------------------------------------------

// UserRewardBinary

// required uint32 saveDayStartInSec = 1;
inline bool UserRewardBinary::has_savedaystartinsec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRewardBinary::set_has_savedaystartinsec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRewardBinary::clear_has_savedaystartinsec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRewardBinary::clear_savedaystartinsec() {
  savedaystartinsec_ = 0u;
  clear_has_savedaystartinsec();
}
inline ::google::protobuf::uint32 UserRewardBinary::savedaystartinsec() const {
  return savedaystartinsec_;
}
inline void UserRewardBinary::set_savedaystartinsec(::google::protobuf::uint32 value) {
  set_has_savedaystartinsec();
  savedaystartinsec_ = value;
}

// optional .protocol.user.LoginSignRewardBinary loginSignRewardBinary = 2;
inline bool UserRewardBinary::has_loginsignrewardbinary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRewardBinary::set_has_loginsignrewardbinary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRewardBinary::clear_has_loginsignrewardbinary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRewardBinary::clear_loginsignrewardbinary() {
  if (loginsignrewardbinary_ != NULL) loginsignrewardbinary_->::protocol::user::LoginSignRewardBinary::Clear();
  clear_has_loginsignrewardbinary();
}
inline const ::protocol::user::LoginSignRewardBinary& UserRewardBinary::loginsignrewardbinary() const {
  return loginsignrewardbinary_ != NULL ? *loginsignrewardbinary_ : *default_instance_->loginsignrewardbinary_;
}
inline ::protocol::user::LoginSignRewardBinary* UserRewardBinary::mutable_loginsignrewardbinary() {
  set_has_loginsignrewardbinary();
  if (loginsignrewardbinary_ == NULL) loginsignrewardbinary_ = new ::protocol::user::LoginSignRewardBinary;
  return loginsignrewardbinary_;
}
inline ::protocol::user::LoginSignRewardBinary* UserRewardBinary::release_loginsignrewardbinary() {
  clear_has_loginsignrewardbinary();
  ::protocol::user::LoginSignRewardBinary* temp = loginsignrewardbinary_;
  loginsignrewardbinary_ = NULL;
  return temp;
}
inline void UserRewardBinary::set_allocated_loginsignrewardbinary(::protocol::user::LoginSignRewardBinary* loginsignrewardbinary) {
  delete loginsignrewardbinary_;
  loginsignrewardbinary_ = loginsignrewardbinary;
  if (loginsignrewardbinary) {
    set_has_loginsignrewardbinary();
  } else {
    clear_has_loginsignrewardbinary();
  }
}

// required .protocol.user.SummonRaffleBinary summonRaffleBinary = 3;
inline bool UserRewardBinary::has_summonrafflebinary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRewardBinary::set_has_summonrafflebinary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRewardBinary::clear_has_summonrafflebinary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRewardBinary::clear_summonrafflebinary() {
  if (summonrafflebinary_ != NULL) summonrafflebinary_->::protocol::user::SummonRaffleBinary::Clear();
  clear_has_summonrafflebinary();
}
inline const ::protocol::user::SummonRaffleBinary& UserRewardBinary::summonrafflebinary() const {
  return summonrafflebinary_ != NULL ? *summonrafflebinary_ : *default_instance_->summonrafflebinary_;
}
inline ::protocol::user::SummonRaffleBinary* UserRewardBinary::mutable_summonrafflebinary() {
  set_has_summonrafflebinary();
  if (summonrafflebinary_ == NULL) summonrafflebinary_ = new ::protocol::user::SummonRaffleBinary;
  return summonrafflebinary_;
}
inline ::protocol::user::SummonRaffleBinary* UserRewardBinary::release_summonrafflebinary() {
  clear_has_summonrafflebinary();
  ::protocol::user::SummonRaffleBinary* temp = summonrafflebinary_;
  summonrafflebinary_ = NULL;
  return temp;
}
inline void UserRewardBinary::set_allocated_summonrafflebinary(::protocol::user::SummonRaffleBinary* summonrafflebinary) {
  delete summonrafflebinary_;
  summonrafflebinary_ = summonrafflebinary;
  if (summonrafflebinary) {
    set_has_summonrafflebinary();
  } else {
    clear_has_summonrafflebinary();
  }
}

// required .protocol.user.MoneyDrawingBinary moneyDrawingBinary = 4;
inline bool UserRewardBinary::has_moneydrawingbinary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRewardBinary::set_has_moneydrawingbinary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRewardBinary::clear_has_moneydrawingbinary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRewardBinary::clear_moneydrawingbinary() {
  if (moneydrawingbinary_ != NULL) moneydrawingbinary_->::protocol::user::MoneyDrawingBinary::Clear();
  clear_has_moneydrawingbinary();
}
inline const ::protocol::user::MoneyDrawingBinary& UserRewardBinary::moneydrawingbinary() const {
  return moneydrawingbinary_ != NULL ? *moneydrawingbinary_ : *default_instance_->moneydrawingbinary_;
}
inline ::protocol::user::MoneyDrawingBinary* UserRewardBinary::mutable_moneydrawingbinary() {
  set_has_moneydrawingbinary();
  if (moneydrawingbinary_ == NULL) moneydrawingbinary_ = new ::protocol::user::MoneyDrawingBinary;
  return moneydrawingbinary_;
}
inline ::protocol::user::MoneyDrawingBinary* UserRewardBinary::release_moneydrawingbinary() {
  clear_has_moneydrawingbinary();
  ::protocol::user::MoneyDrawingBinary* temp = moneydrawingbinary_;
  moneydrawingbinary_ = NULL;
  return temp;
}
inline void UserRewardBinary::set_allocated_moneydrawingbinary(::protocol::user::MoneyDrawingBinary* moneydrawingbinary) {
  delete moneydrawingbinary_;
  moneydrawingbinary_ = moneydrawingbinary;
  if (moneydrawingbinary) {
    set_has_moneydrawingbinary();
  } else {
    clear_has_moneydrawingbinary();
  }
}

// required .protocol.user.BuyVitalityBinary BuyVitalityBinary = 5;
inline bool UserRewardBinary::has_buyvitalitybinary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRewardBinary::set_has_buyvitalitybinary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRewardBinary::clear_has_buyvitalitybinary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRewardBinary::clear_buyvitalitybinary() {
  if (buyvitalitybinary_ != NULL) buyvitalitybinary_->::protocol::user::BuyVitalityBinary::Clear();
  clear_has_buyvitalitybinary();
}
inline const ::protocol::user::BuyVitalityBinary& UserRewardBinary::buyvitalitybinary() const {
  return buyvitalitybinary_ != NULL ? *buyvitalitybinary_ : *default_instance_->buyvitalitybinary_;
}
inline ::protocol::user::BuyVitalityBinary* UserRewardBinary::mutable_buyvitalitybinary() {
  set_has_buyvitalitybinary();
  if (buyvitalitybinary_ == NULL) buyvitalitybinary_ = new ::protocol::user::BuyVitalityBinary;
  return buyvitalitybinary_;
}
inline ::protocol::user::BuyVitalityBinary* UserRewardBinary::release_buyvitalitybinary() {
  clear_has_buyvitalitybinary();
  ::protocol::user::BuyVitalityBinary* temp = buyvitalitybinary_;
  buyvitalitybinary_ = NULL;
  return temp;
}
inline void UserRewardBinary::set_allocated_buyvitalitybinary(::protocol::user::BuyVitalityBinary* buyvitalitybinary) {
  delete buyvitalitybinary_;
  buyvitalitybinary_ = buyvitalitybinary;
  if (buyvitalitybinary) {
    set_has_buyvitalitybinary();
  } else {
    clear_has_buyvitalitybinary();
  }
}

// repeated .protocol.user.RechargeDataBinary RechargeDataBinary = 6;
inline int UserRewardBinary::rechargedatabinary_size() const {
  return rechargedatabinary_.size();
}
inline void UserRewardBinary::clear_rechargedatabinary() {
  rechargedatabinary_.Clear();
}
inline const ::protocol::user::RechargeDataBinary& UserRewardBinary::rechargedatabinary(int index) const {
  return rechargedatabinary_.Get(index);
}
inline ::protocol::user::RechargeDataBinary* UserRewardBinary::mutable_rechargedatabinary(int index) {
  return rechargedatabinary_.Mutable(index);
}
inline ::protocol::user::RechargeDataBinary* UserRewardBinary::add_rechargedatabinary() {
  return rechargedatabinary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::RechargeDataBinary >&
UserRewardBinary::rechargedatabinary() const {
  return rechargedatabinary_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::RechargeDataBinary >*
UserRewardBinary::mutable_rechargedatabinary() {
  return &rechargedatabinary_;
}

// optional .protocol.user.SignBinary signBinary = 7;
inline bool UserRewardBinary::has_signbinary() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserRewardBinary::set_has_signbinary() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserRewardBinary::clear_has_signbinary() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserRewardBinary::clear_signbinary() {
  if (signbinary_ != NULL) signbinary_->::protocol::user::SignBinary::Clear();
  clear_has_signbinary();
}
inline const ::protocol::user::SignBinary& UserRewardBinary::signbinary() const {
  return signbinary_ != NULL ? *signbinary_ : *default_instance_->signbinary_;
}
inline ::protocol::user::SignBinary* UserRewardBinary::mutable_signbinary() {
  set_has_signbinary();
  if (signbinary_ == NULL) signbinary_ = new ::protocol::user::SignBinary;
  return signbinary_;
}
inline ::protocol::user::SignBinary* UserRewardBinary::release_signbinary() {
  clear_has_signbinary();
  ::protocol::user::SignBinary* temp = signbinary_;
  signbinary_ = NULL;
  return temp;
}
inline void UserRewardBinary::set_allocated_signbinary(::protocol::user::SignBinary* signbinary) {
  delete signbinary_;
  signbinary_ = signbinary;
  if (signbinary) {
    set_has_signbinary();
  } else {
    clear_has_signbinary();
  }
}

// repeated uint32 vipBoxID = 8;
inline int UserRewardBinary::vipboxid_size() const {
  return vipboxid_.size();
}
inline void UserRewardBinary::clear_vipboxid() {
  vipboxid_.Clear();
}
inline ::google::protobuf::uint32 UserRewardBinary::vipboxid(int index) const {
  return vipboxid_.Get(index);
}
inline void UserRewardBinary::set_vipboxid(int index, ::google::protobuf::uint32 value) {
  vipboxid_.Set(index, value);
}
inline void UserRewardBinary::add_vipboxid(::google::protobuf::uint32 value) {
  vipboxid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserRewardBinary::vipboxid() const {
  return vipboxid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserRewardBinary::mutable_vipboxid() {
  return &vipboxid_;
}

// -------------------------------------------------------------------

// LoginSignRewardBinary

// required uint32 lastSignDayStartInSec = 1;
inline bool LoginSignRewardBinary::has_lastsigndaystartinsec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSignRewardBinary::set_has_lastsigndaystartinsec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSignRewardBinary::clear_has_lastsigndaystartinsec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSignRewardBinary::clear_lastsigndaystartinsec() {
  lastsigndaystartinsec_ = 0u;
  clear_has_lastsigndaystartinsec();
}
inline ::google::protobuf::uint32 LoginSignRewardBinary::lastsigndaystartinsec() const {
  return lastsigndaystartinsec_;
}
inline void LoginSignRewardBinary::set_lastsigndaystartinsec(::google::protobuf::uint32 value) {
  set_has_lastsigndaystartinsec();
  lastsigndaystartinsec_ = value;
}

// required uint32 continueSignDayNum = 2;
inline bool LoginSignRewardBinary::has_continuesigndaynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSignRewardBinary::set_has_continuesigndaynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSignRewardBinary::clear_has_continuesigndaynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSignRewardBinary::clear_continuesigndaynum() {
  continuesigndaynum_ = 0u;
  clear_has_continuesigndaynum();
}
inline ::google::protobuf::uint32 LoginSignRewardBinary::continuesigndaynum() const {
  return continuesigndaynum_;
}
inline void LoginSignRewardBinary::set_continuesigndaynum(::google::protobuf::uint32 value) {
  set_has_continuesigndaynum();
  continuesigndaynum_ = value;
}

// optional bool isHaveWeekReward = 3;
inline bool LoginSignRewardBinary::has_ishaveweekreward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginSignRewardBinary::set_has_ishaveweekreward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginSignRewardBinary::clear_has_ishaveweekreward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginSignRewardBinary::clear_ishaveweekreward() {
  ishaveweekreward_ = false;
  clear_has_ishaveweekreward();
}
inline bool LoginSignRewardBinary::ishaveweekreward() const {
  return ishaveweekreward_;
}
inline void LoginSignRewardBinary::set_ishaveweekreward(bool value) {
  set_has_ishaveweekreward();
  ishaveweekreward_ = value;
}

// required uint32 loginDayNum = 4;
inline bool LoginSignRewardBinary::has_logindaynum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginSignRewardBinary::set_has_logindaynum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginSignRewardBinary::clear_has_logindaynum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginSignRewardBinary::clear_logindaynum() {
  logindaynum_ = 0u;
  clear_has_logindaynum();
}
inline ::google::protobuf::uint32 LoginSignRewardBinary::logindaynum() const {
  return logindaynum_;
}
inline void LoginSignRewardBinary::set_logindaynum(::google::protobuf::uint32 value) {
  set_has_logindaynum();
  logindaynum_ = value;
}

// -------------------------------------------------------------------

// SummonRaffleBinary

// required bool isHadRaffleNormalFirst = 1;
inline bool SummonRaffleBinary::has_ishadrafflenormalfirst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummonRaffleBinary::set_has_ishadrafflenormalfirst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SummonRaffleBinary::clear_has_ishadrafflenormalfirst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SummonRaffleBinary::clear_ishadrafflenormalfirst() {
  ishadrafflenormalfirst_ = false;
  clear_has_ishadrafflenormalfirst();
}
inline bool SummonRaffleBinary::ishadrafflenormalfirst() const {
  return ishadrafflenormalfirst_;
}
inline void SummonRaffleBinary::set_ishadrafflenormalfirst(bool value) {
  set_has_ishadrafflenormalfirst();
  ishadrafflenormalfirst_ = value;
}

// required bool isHadRaffleEquipFirst = 2;
inline bool SummonRaffleBinary::has_ishadraffleequipfirst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummonRaffleBinary::set_has_ishadraffleequipfirst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SummonRaffleBinary::clear_has_ishadraffleequipfirst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SummonRaffleBinary::clear_ishadraffleequipfirst() {
  ishadraffleequipfirst_ = false;
  clear_has_ishadraffleequipfirst();
}
inline bool SummonRaffleBinary::ishadraffleequipfirst() const {
  return ishadraffleequipfirst_;
}
inline void SummonRaffleBinary::set_ishadraffleequipfirst(bool value) {
  set_has_ishadraffleequipfirst();
  ishadraffleequipfirst_ = value;
}

// required uint64 lastRaffleNormalTime = 3;
inline bool SummonRaffleBinary::has_lastrafflenormaltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SummonRaffleBinary::set_has_lastrafflenormaltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SummonRaffleBinary::clear_has_lastrafflenormaltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SummonRaffleBinary::clear_lastrafflenormaltime() {
  lastrafflenormaltime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastrafflenormaltime();
}
inline ::google::protobuf::uint64 SummonRaffleBinary::lastrafflenormaltime() const {
  return lastrafflenormaltime_;
}
inline void SummonRaffleBinary::set_lastrafflenormaltime(::google::protobuf::uint64 value) {
  set_has_lastrafflenormaltime();
  lastrafflenormaltime_ = value;
}

// required uint32 normalFreeRemainTimes = 4;
inline bool SummonRaffleBinary::has_normalfreeremaintimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SummonRaffleBinary::set_has_normalfreeremaintimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SummonRaffleBinary::clear_has_normalfreeremaintimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SummonRaffleBinary::clear_normalfreeremaintimes() {
  normalfreeremaintimes_ = 0u;
  clear_has_normalfreeremaintimes();
}
inline ::google::protobuf::uint32 SummonRaffleBinary::normalfreeremaintimes() const {
  return normalfreeremaintimes_;
}
inline void SummonRaffleBinary::set_normalfreeremaintimes(::google::protobuf::uint32 value) {
  set_has_normalfreeremaintimes();
  normalfreeremaintimes_ = value;
}

// required uint64 equipLastFreeRaffleTime = 5;
inline bool SummonRaffleBinary::has_equiplastfreeraffletime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SummonRaffleBinary::set_has_equiplastfreeraffletime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SummonRaffleBinary::clear_has_equiplastfreeraffletime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SummonRaffleBinary::clear_equiplastfreeraffletime() {
  equiplastfreeraffletime_ = GOOGLE_ULONGLONG(0);
  clear_has_equiplastfreeraffletime();
}
inline ::google::protobuf::uint64 SummonRaffleBinary::equiplastfreeraffletime() const {
  return equiplastfreeraffletime_;
}
inline void SummonRaffleBinary::set_equiplastfreeraffletime(::google::protobuf::uint64 value) {
  set_has_equiplastfreeraffletime();
  equiplastfreeraffletime_ = value;
}

// -------------------------------------------------------------------

// MoneyDrawingBinary

// required uint32 moneyDrawingTime = 1;
inline bool MoneyDrawingBinary::has_moneydrawingtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoneyDrawingBinary::set_has_moneydrawingtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoneyDrawingBinary::clear_has_moneydrawingtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoneyDrawingBinary::clear_moneydrawingtime() {
  moneydrawingtime_ = 0u;
  clear_has_moneydrawingtime();
}
inline ::google::protobuf::uint32 MoneyDrawingBinary::moneydrawingtime() const {
  return moneydrawingtime_;
}
inline void MoneyDrawingBinary::set_moneydrawingtime(::google::protobuf::uint32 value) {
  set_has_moneydrawingtime();
  moneydrawingtime_ = value;
}

// required uint32 maxMoneyDrawingTime = 2;
inline bool MoneyDrawingBinary::has_maxmoneydrawingtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoneyDrawingBinary::set_has_maxmoneydrawingtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoneyDrawingBinary::clear_has_maxmoneydrawingtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoneyDrawingBinary::clear_maxmoneydrawingtime() {
  maxmoneydrawingtime_ = 0u;
  clear_has_maxmoneydrawingtime();
}
inline ::google::protobuf::uint32 MoneyDrawingBinary::maxmoneydrawingtime() const {
  return maxmoneydrawingtime_;
}
inline void MoneyDrawingBinary::set_maxmoneydrawingtime(::google::protobuf::uint32 value) {
  set_has_maxmoneydrawingtime();
  maxmoneydrawingtime_ = value;
}

// required uint32 totalMoneyDrawingTime = 3;
inline bool MoneyDrawingBinary::has_totalmoneydrawingtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoneyDrawingBinary::set_has_totalmoneydrawingtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoneyDrawingBinary::clear_has_totalmoneydrawingtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoneyDrawingBinary::clear_totalmoneydrawingtime() {
  totalmoneydrawingtime_ = 0u;
  clear_has_totalmoneydrawingtime();
}
inline ::google::protobuf::uint32 MoneyDrawingBinary::totalmoneydrawingtime() const {
  return totalmoneydrawingtime_;
}
inline void MoneyDrawingBinary::set_totalmoneydrawingtime(::google::protobuf::uint32 value) {
  set_has_totalmoneydrawingtime();
  totalmoneydrawingtime_ = value;
}

// repeated uint32 moneyDrawingboxID = 4;
inline int MoneyDrawingBinary::moneydrawingboxid_size() const {
  return moneydrawingboxid_.size();
}
inline void MoneyDrawingBinary::clear_moneydrawingboxid() {
  moneydrawingboxid_.Clear();
}
inline ::google::protobuf::uint32 MoneyDrawingBinary::moneydrawingboxid(int index) const {
  return moneydrawingboxid_.Get(index);
}
inline void MoneyDrawingBinary::set_moneydrawingboxid(int index, ::google::protobuf::uint32 value) {
  moneydrawingboxid_.Set(index, value);
}
inline void MoneyDrawingBinary::add_moneydrawingboxid(::google::protobuf::uint32 value) {
  moneydrawingboxid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MoneyDrawingBinary::moneydrawingboxid() const {
  return moneydrawingboxid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MoneyDrawingBinary::mutable_moneydrawingboxid() {
  return &moneydrawingboxid_;
}

// -------------------------------------------------------------------

// BuyVitalityBinary

// required uint32 buyVitalityTimes = 1;
inline bool BuyVitalityBinary::has_buyvitalitytimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyVitalityBinary::set_has_buyvitalitytimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyVitalityBinary::clear_has_buyvitalitytimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyVitalityBinary::clear_buyvitalitytimes() {
  buyvitalitytimes_ = 0u;
  clear_has_buyvitalitytimes();
}
inline ::google::protobuf::uint32 BuyVitalityBinary::buyvitalitytimes() const {
  return buyvitalitytimes_;
}
inline void BuyVitalityBinary::set_buyvitalitytimes(::google::protobuf::uint32 value) {
  set_has_buyvitalitytimes();
  buyvitalitytimes_ = value;
}

// required uint32 maxBuyVitalityTimes = 2;
inline bool BuyVitalityBinary::has_maxbuyvitalitytimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyVitalityBinary::set_has_maxbuyvitalitytimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyVitalityBinary::clear_has_maxbuyvitalitytimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyVitalityBinary::clear_maxbuyvitalitytimes() {
  maxbuyvitalitytimes_ = 0u;
  clear_has_maxbuyvitalitytimes();
}
inline ::google::protobuf::uint32 BuyVitalityBinary::maxbuyvitalitytimes() const {
  return maxbuyvitalitytimes_;
}
inline void BuyVitalityBinary::set_maxbuyvitalitytimes(::google::protobuf::uint32 value) {
  set_has_maxbuyvitalitytimes();
  maxbuyvitalitytimes_ = value;
}

// -------------------------------------------------------------------

// RechargeDataBinary

// optional uint32 rechargeID = 1;
inline bool RechargeDataBinary::has_rechargeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeDataBinary::set_has_rechargeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeDataBinary::clear_has_rechargeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeDataBinary::clear_rechargeid() {
  rechargeid_ = 0u;
  clear_has_rechargeid();
}
inline ::google::protobuf::uint32 RechargeDataBinary::rechargeid() const {
  return rechargeid_;
}
inline void RechargeDataBinary::set_rechargeid(::google::protobuf::uint32 value) {
  set_has_rechargeid();
  rechargeid_ = value;
}

// optional uint32 rechargeNum = 2;
inline bool RechargeDataBinary::has_rechargenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeDataBinary::set_has_rechargenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeDataBinary::clear_has_rechargenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeDataBinary::clear_rechargenum() {
  rechargenum_ = 0u;
  clear_has_rechargenum();
}
inline ::google::protobuf::uint32 RechargeDataBinary::rechargenum() const {
  return rechargenum_;
}
inline void RechargeDataBinary::set_rechargenum(::google::protobuf::uint32 value) {
  set_has_rechargenum();
  rechargenum_ = value;
}

// -------------------------------------------------------------------

// SignBinary

// optional uint32 signTimes = 1;
inline bool SignBinary::has_signtimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignBinary::set_has_signtimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignBinary::clear_has_signtimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignBinary::clear_signtimes() {
  signtimes_ = 0u;
  clear_has_signtimes();
}
inline ::google::protobuf::uint32 SignBinary::signtimes() const {
  return signtimes_;
}
inline void SignBinary::set_signtimes(::google::protobuf::uint32 value) {
  set_has_signtimes();
  signtimes_ = value;
}

// optional uint32 signState = 2;
inline bool SignBinary::has_signstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignBinary::set_has_signstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignBinary::clear_has_signstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignBinary::clear_signstate() {
  signstate_ = 0u;
  clear_has_signstate();
}
inline ::google::protobuf::uint32 SignBinary::signstate() const {
  return signstate_;
}
inline void SignBinary::set_signstate(::google::protobuf::uint32 value) {
  set_has_signstate();
  signstate_ = value;
}

// -------------------------------------------------------------------

// FunctionUnlockFlag

// required uint32 type = 1;
inline bool FunctionUnlockFlag::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionUnlockFlag::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionUnlockFlag::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionUnlockFlag::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 FunctionUnlockFlag::type() const {
  return type_;
}
inline void FunctionUnlockFlag::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 id = 2;
inline bool FunctionUnlockFlag::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunctionUnlockFlag::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunctionUnlockFlag::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunctionUnlockFlag::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FunctionUnlockFlag::id() const {
  return id_;
}
inline void FunctionUnlockFlag::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// FunctionUnlockData

// repeated .protocol.user.FunctionUnlockFlag functionVec = 1;
inline int FunctionUnlockData::functionvec_size() const {
  return functionvec_.size();
}
inline void FunctionUnlockData::clear_functionvec() {
  functionvec_.Clear();
}
inline const ::protocol::user::FunctionUnlockFlag& FunctionUnlockData::functionvec(int index) const {
  return functionvec_.Get(index);
}
inline ::protocol::user::FunctionUnlockFlag* FunctionUnlockData::mutable_functionvec(int index) {
  return functionvec_.Mutable(index);
}
inline ::protocol::user::FunctionUnlockFlag* FunctionUnlockData::add_functionvec() {
  return functionvec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::FunctionUnlockFlag >&
FunctionUnlockData::functionvec() const {
  return functionvec_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::FunctionUnlockFlag >*
FunctionUnlockData::mutable_functionvec() {
  return &functionvec_;
}

// -------------------------------------------------------------------

// UserDataBinary

// optional bytes isUnlockFunctionVec = 1;
inline bool UserDataBinary::has_isunlockfunctionvec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDataBinary::set_has_isunlockfunctionvec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDataBinary::clear_has_isunlockfunctionvec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDataBinary::clear_isunlockfunctionvec() {
  if (isunlockfunctionvec_ != &::google::protobuf::internal::kEmptyString) {
    isunlockfunctionvec_->clear();
  }
  clear_has_isunlockfunctionvec();
}
inline const ::std::string& UserDataBinary::isunlockfunctionvec() const {
  return *isunlockfunctionvec_;
}
inline void UserDataBinary::set_isunlockfunctionvec(const ::std::string& value) {
  set_has_isunlockfunctionvec();
  if (isunlockfunctionvec_ == &::google::protobuf::internal::kEmptyString) {
    isunlockfunctionvec_ = new ::std::string;
  }
  isunlockfunctionvec_->assign(value);
}
inline void UserDataBinary::set_isunlockfunctionvec(const char* value) {
  set_has_isunlockfunctionvec();
  if (isunlockfunctionvec_ == &::google::protobuf::internal::kEmptyString) {
    isunlockfunctionvec_ = new ::std::string;
  }
  isunlockfunctionvec_->assign(value);
}
inline void UserDataBinary::set_isunlockfunctionvec(const void* value, size_t size) {
  set_has_isunlockfunctionvec();
  if (isunlockfunctionvec_ == &::google::protobuf::internal::kEmptyString) {
    isunlockfunctionvec_ = new ::std::string;
  }
  isunlockfunctionvec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserDataBinary::mutable_isunlockfunctionvec() {
  set_has_isunlockfunctionvec();
  if (isunlockfunctionvec_ == &::google::protobuf::internal::kEmptyString) {
    isunlockfunctionvec_ = new ::std::string;
  }
  return isunlockfunctionvec_;
}
inline ::std::string* UserDataBinary::release_isunlockfunctionvec() {
  clear_has_isunlockfunctionvec();
  if (isunlockfunctionvec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isunlockfunctionvec_;
    isunlockfunctionvec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserDataBinary::set_allocated_isunlockfunctionvec(::std::string* isunlockfunctionvec) {
  if (isunlockfunctionvec_ != &::google::protobuf::internal::kEmptyString) {
    delete isunlockfunctionvec_;
  }
  if (isunlockfunctionvec) {
    set_has_isunlockfunctionvec();
    isunlockfunctionvec_ = isunlockfunctionvec;
  } else {
    clear_has_isunlockfunctionvec();
    isunlockfunctionvec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 loginDayVec = 2;
inline int UserDataBinary::logindayvec_size() const {
  return logindayvec_.size();
}
inline void UserDataBinary::clear_logindayvec() {
  logindayvec_.Clear();
}
inline ::google::protobuf::uint32 UserDataBinary::logindayvec(int index) const {
  return logindayvec_.Get(index);
}
inline void UserDataBinary::set_logindayvec(int index, ::google::protobuf::uint32 value) {
  logindayvec_.Set(index, value);
}
inline void UserDataBinary::add_logindayvec(::google::protobuf::uint32 value) {
  logindayvec_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserDataBinary::logindayvec() const {
  return logindayvec_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserDataBinary::mutable_logindayvec() {
  return &logindayvec_;
}

// required uint32 completedGuideStage = 3;
inline bool UserDataBinary::has_completedguidestage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDataBinary::set_has_completedguidestage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDataBinary::clear_has_completedguidestage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDataBinary::clear_completedguidestage() {
  completedguidestage_ = 0u;
  clear_has_completedguidestage();
}
inline ::google::protobuf::uint32 UserDataBinary::completedguidestage() const {
  return completedguidestage_;
}
inline void UserDataBinary::set_completedguidestage(::google::protobuf::uint32 value) {
  set_has_completedguidestage();
  completedguidestage_ = value;
}

// optional bool hasPassNewCharGuide = 4;
inline bool UserDataBinary::has_haspassnewcharguide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDataBinary::set_has_haspassnewcharguide() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDataBinary::clear_has_haspassnewcharguide() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDataBinary::clear_haspassnewcharguide() {
  haspassnewcharguide_ = false;
  clear_has_haspassnewcharguide();
}
inline bool UserDataBinary::haspassnewcharguide() const {
  return haspassnewcharguide_;
}
inline void UserDataBinary::set_haspassnewcharguide(bool value) {
  set_has_haspassnewcharguide();
  haspassnewcharguide_ = value;
}

// -------------------------------------------------------------------

// DiscoveryBinary

// required uint32 nowSceneID = 1;
inline bool DiscoveryBinary::has_nowsceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiscoveryBinary::set_has_nowsceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiscoveryBinary::clear_has_nowsceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiscoveryBinary::clear_nowsceneid() {
  nowsceneid_ = 0u;
  clear_has_nowsceneid();
}
inline ::google::protobuf::uint32 DiscoveryBinary::nowsceneid() const {
  return nowsceneid_;
}
inline void DiscoveryBinary::set_nowsceneid(::google::protobuf::uint32 value) {
  set_has_nowsceneid();
  nowsceneid_ = value;
}

// required uint32 posX = 2;
inline bool DiscoveryBinary::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiscoveryBinary::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiscoveryBinary::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiscoveryBinary::clear_posx() {
  posx_ = 0u;
  clear_has_posx();
}
inline ::google::protobuf::uint32 DiscoveryBinary::posx() const {
  return posx_;
}
inline void DiscoveryBinary::set_posx(::google::protobuf::uint32 value) {
  set_has_posx();
  posx_ = value;
}

// required uint32 posY = 3;
inline bool DiscoveryBinary::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiscoveryBinary::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiscoveryBinary::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiscoveryBinary::clear_posy() {
  posy_ = 0u;
  clear_has_posy();
}
inline ::google::protobuf::uint32 DiscoveryBinary::posy() const {
  return posy_;
}
inline void DiscoveryBinary::set_posy(::google::protobuf::uint32 value) {
  set_has_posy();
  posy_ = value;
}

// required uint32 thoughtLevel = 4;
inline bool DiscoveryBinary::has_thoughtlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DiscoveryBinary::set_has_thoughtlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DiscoveryBinary::clear_has_thoughtlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DiscoveryBinary::clear_thoughtlevel() {
  thoughtlevel_ = 0u;
  clear_has_thoughtlevel();
}
inline ::google::protobuf::uint32 DiscoveryBinary::thoughtlevel() const {
  return thoughtlevel_;
}
inline void DiscoveryBinary::set_thoughtlevel(::google::protobuf::uint32 value) {
  set_has_thoughtlevel();
  thoughtlevel_ = value;
}

// required uint32 thoughtExp = 5;
inline bool DiscoveryBinary::has_thoughtexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DiscoveryBinary::set_has_thoughtexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DiscoveryBinary::clear_has_thoughtexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DiscoveryBinary::clear_thoughtexp() {
  thoughtexp_ = 0u;
  clear_has_thoughtexp();
}
inline ::google::protobuf::uint32 DiscoveryBinary::thoughtexp() const {
  return thoughtexp_;
}
inline void DiscoveryBinary::set_thoughtexp(::google::protobuf::uint32 value) {
  set_has_thoughtexp();
  thoughtexp_ = value;
}

// repeated .protocol.user.DiscoveryData discoveryData = 7;
inline int DiscoveryBinary::discoverydata_size() const {
  return discoverydata_.size();
}
inline void DiscoveryBinary::clear_discoverydata() {
  discoverydata_.Clear();
}
inline const ::protocol::user::DiscoveryData& DiscoveryBinary::discoverydata(int index) const {
  return discoverydata_.Get(index);
}
inline ::protocol::user::DiscoveryData* DiscoveryBinary::mutable_discoverydata(int index) {
  return discoverydata_.Mutable(index);
}
inline ::protocol::user::DiscoveryData* DiscoveryBinary::add_discoverydata() {
  return discoverydata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DiscoveryData >&
DiscoveryBinary::discoverydata() const {
  return discoverydata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DiscoveryData >*
DiscoveryBinary::mutable_discoverydata() {
  return &discoverydata_;
}

// repeated .protocol.user.GridData gridData = 8;
inline int DiscoveryBinary::griddata_size() const {
  return griddata_.size();
}
inline void DiscoveryBinary::clear_griddata() {
  griddata_.Clear();
}
inline const ::protocol::user::GridData& DiscoveryBinary::griddata(int index) const {
  return griddata_.Get(index);
}
inline ::protocol::user::GridData* DiscoveryBinary::mutable_griddata(int index) {
  return griddata_.Mutable(index);
}
inline ::protocol::user::GridData* DiscoveryBinary::add_griddata() {
  return griddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::GridData >&
DiscoveryBinary::griddata() const {
  return griddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::GridData >*
DiscoveryBinary::mutable_griddata() {
  return &griddata_;
}

// required uint32 monsterLevel = 9;
inline bool DiscoveryBinary::has_monsterlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DiscoveryBinary::set_has_monsterlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DiscoveryBinary::clear_has_monsterlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DiscoveryBinary::clear_monsterlevel() {
  monsterlevel_ = 0u;
  clear_has_monsterlevel();
}
inline ::google::protobuf::uint32 DiscoveryBinary::monsterlevel() const {
  return monsterlevel_;
}
inline void DiscoveryBinary::set_monsterlevel(::google::protobuf::uint32 value) {
  set_has_monsterlevel();
  monsterlevel_ = value;
}

// repeated .protocol.user.OfflineRewardData offlineRewardData = 10;
inline int DiscoveryBinary::offlinerewarddata_size() const {
  return offlinerewarddata_.size();
}
inline void DiscoveryBinary::clear_offlinerewarddata() {
  offlinerewarddata_.Clear();
}
inline const ::protocol::user::OfflineRewardData& DiscoveryBinary::offlinerewarddata(int index) const {
  return offlinerewarddata_.Get(index);
}
inline ::protocol::user::OfflineRewardData* DiscoveryBinary::mutable_offlinerewarddata(int index) {
  return offlinerewarddata_.Mutable(index);
}
inline ::protocol::user::OfflineRewardData* DiscoveryBinary::add_offlinerewarddata() {
  return offlinerewarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineRewardData >&
DiscoveryBinary::offlinerewarddata() const {
  return offlinerewarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineRewardData >*
DiscoveryBinary::mutable_offlinerewarddata() {
  return &offlinerewarddata_;
}

// -------------------------------------------------------------------

// OfflineRewardData

// required uint32 index = 1;
inline bool OfflineRewardData::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineRewardData::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineRewardData::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineRewardData::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 OfflineRewardData::index() const {
  return index_;
}
inline void OfflineRewardData::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 sceneID = 2;
inline bool OfflineRewardData::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineRewardData::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineRewardData::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineRewardData::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 OfflineRewardData::sceneid() const {
  return sceneid_;
}
inline void OfflineRewardData::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// required uint32 needTimeInSec = 3;
inline bool OfflineRewardData::has_needtimeinsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfflineRewardData::set_has_needtimeinsec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfflineRewardData::clear_has_needtimeinsec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfflineRewardData::clear_needtimeinsec() {
  needtimeinsec_ = 0u;
  clear_has_needtimeinsec();
}
inline ::google::protobuf::uint32 OfflineRewardData::needtimeinsec() const {
  return needtimeinsec_;
}
inline void OfflineRewardData::set_needtimeinsec(::google::protobuf::uint32 value) {
  set_has_needtimeinsec();
  needtimeinsec_ = value;
}

// required uint32 startTimeInSec = 4;
inline bool OfflineRewardData::has_starttimeinsec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfflineRewardData::set_has_starttimeinsec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfflineRewardData::clear_has_starttimeinsec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfflineRewardData::clear_starttimeinsec() {
  starttimeinsec_ = 0u;
  clear_has_starttimeinsec();
}
inline ::google::protobuf::uint32 OfflineRewardData::starttimeinsec() const {
  return starttimeinsec_;
}
inline void OfflineRewardData::set_starttimeinsec(::google::protobuf::uint32 value) {
  set_has_starttimeinsec();
  starttimeinsec_ = value;
}

// required uint32 isUnlock = 5;
inline bool OfflineRewardData::has_isunlock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfflineRewardData::set_has_isunlock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OfflineRewardData::clear_has_isunlock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OfflineRewardData::clear_isunlock() {
  isunlock_ = 0u;
  clear_has_isunlock();
}
inline ::google::protobuf::uint32 OfflineRewardData::isunlock() const {
  return isunlock_;
}
inline void OfflineRewardData::set_isunlock(::google::protobuf::uint32 value) {
  set_has_isunlock();
  isunlock_ = value;
}

// -------------------------------------------------------------------

// DiscoveryData

// required uint32 sceneID = 1;
inline bool DiscoveryData::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiscoveryData::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiscoveryData::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiscoveryData::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 DiscoveryData::sceneid() const {
  return sceneid_;
}
inline void DiscoveryData::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// required uint32 times = 2;
inline bool DiscoveryData::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiscoveryData::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiscoveryData::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiscoveryData::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 DiscoveryData::times() const {
  return times_;
}
inline void DiscoveryData::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// GridData

// required uint32 objID = 1;
inline bool GridData::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridData::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridData::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridData::clear_objid() {
  objid_ = 0u;
  clear_has_objid();
}
inline ::google::protobuf::uint32 GridData::objid() const {
  return objid_;
}
inline void GridData::set_objid(::google::protobuf::uint32 value) {
  set_has_objid();
  objid_ = value;
}

// required uint32 num = 2;
inline bool GridData::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridData::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridData::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridData::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 GridData::num() const {
  return num_;
}
inline void GridData::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 isBind = 3;
inline bool GridData::has_isbind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridData::set_has_isbind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridData::clear_has_isbind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridData::clear_isbind() {
  isbind_ = 0u;
  clear_has_isbind();
}
inline ::google::protobuf::uint32 GridData::isbind() const {
  return isbind_;
}
inline void GridData::set_isbind(::google::protobuf::uint32 value) {
  set_has_isbind();
  isbind_ = value;
}

// required uint32 timeInSec = 4;
inline bool GridData::has_timeinsec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridData::set_has_timeinsec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridData::clear_has_timeinsec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridData::clear_timeinsec() {
  timeinsec_ = 0u;
  clear_has_timeinsec();
}
inline ::google::protobuf::uint32 GridData::timeinsec() const {
  return timeinsec_;
}
inline void GridData::set_timeinsec(::google::protobuf::uint32 value) {
  set_has_timeinsec();
  timeinsec_ = value;
}

// required uint32 type = 5;
inline bool GridData::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridData::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridData::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GridData::type() const {
  return type_;
}
inline void GridData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 index = 6;
inline bool GridData::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GridData::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GridData::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GridData::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 GridData::index() const {
  return index_;
}
inline void GridData::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required bool isOpen = 7;
inline bool GridData::has_isopen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GridData::set_has_isopen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GridData::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GridData::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool GridData::isopen() const {
  return isopen_;
}
inline void GridData::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
}

// required bool openTimeInSec = 8;
inline bool GridData::has_opentimeinsec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GridData::set_has_opentimeinsec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GridData::clear_has_opentimeinsec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GridData::clear_opentimeinsec() {
  opentimeinsec_ = false;
  clear_has_opentimeinsec();
}
inline bool GridData::opentimeinsec() const {
  return opentimeinsec_;
}
inline void GridData::set_opentimeinsec(bool value) {
  set_has_opentimeinsec();
  opentimeinsec_ = value;
}

// required uint32 addSpeedNeedItemNum = 9;
inline bool GridData::has_addspeedneeditemnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GridData::set_has_addspeedneeditemnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GridData::clear_has_addspeedneeditemnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GridData::clear_addspeedneeditemnum() {
  addspeedneeditemnum_ = 0u;
  clear_has_addspeedneeditemnum();
}
inline ::google::protobuf::uint32 GridData::addspeedneeditemnum() const {
  return addspeedneeditemnum_;
}
inline void GridData::set_addspeedneeditemnum(::google::protobuf::uint32 value) {
  set_has_addspeedneeditemnum();
  addspeedneeditemnum_ = value;
}

// -------------------------------------------------------------------

// UserRelationSaveData

// optional uint32 charID = 1;
inline bool UserRelationSaveData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRelationSaveData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRelationSaveData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRelationSaveData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 UserRelationSaveData::charid() const {
  return charid_;
}
inline void UserRelationSaveData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bytes clubData = 2;
inline bool UserRelationSaveData::has_clubdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRelationSaveData::set_has_clubdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRelationSaveData::clear_has_clubdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRelationSaveData::clear_clubdata() {
  if (clubdata_ != &::google::protobuf::internal::kEmptyString) {
    clubdata_->clear();
  }
  clear_has_clubdata();
}
inline const ::std::string& UserRelationSaveData::clubdata() const {
  return *clubdata_;
}
inline void UserRelationSaveData::set_clubdata(const ::std::string& value) {
  set_has_clubdata();
  if (clubdata_ == &::google::protobuf::internal::kEmptyString) {
    clubdata_ = new ::std::string;
  }
  clubdata_->assign(value);
}
inline void UserRelationSaveData::set_clubdata(const char* value) {
  set_has_clubdata();
  if (clubdata_ == &::google::protobuf::internal::kEmptyString) {
    clubdata_ = new ::std::string;
  }
  clubdata_->assign(value);
}
inline void UserRelationSaveData::set_clubdata(const void* value, size_t size) {
  set_has_clubdata();
  if (clubdata_ == &::google::protobuf::internal::kEmptyString) {
    clubdata_ = new ::std::string;
  }
  clubdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRelationSaveData::mutable_clubdata() {
  set_has_clubdata();
  if (clubdata_ == &::google::protobuf::internal::kEmptyString) {
    clubdata_ = new ::std::string;
  }
  return clubdata_;
}
inline ::std::string* UserRelationSaveData::release_clubdata() {
  clear_has_clubdata();
  if (clubdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clubdata_;
    clubdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRelationSaveData::set_allocated_clubdata(::std::string* clubdata) {
  if (clubdata_ != &::google::protobuf::internal::kEmptyString) {
    delete clubdata_;
  }
  if (clubdata) {
    set_has_clubdata();
    clubdata_ = clubdata;
  } else {
    clear_has_clubdata();
    clubdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes message = 3;
inline bool UserRelationSaveData::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRelationSaveData::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRelationSaveData::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRelationSaveData::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& UserRelationSaveData::message() const {
  return *message_;
}
inline void UserRelationSaveData::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void UserRelationSaveData::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void UserRelationSaveData::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserRelationSaveData::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* UserRelationSaveData::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserRelationSaveData::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WaitJoinClubData

// required uint32 clubID = 1;
inline bool WaitJoinClubData::has_clubid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WaitJoinClubData::set_has_clubid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WaitJoinClubData::clear_has_clubid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WaitJoinClubData::clear_clubid() {
  clubid_ = 0u;
  clear_has_clubid();
}
inline ::google::protobuf::uint32 WaitJoinClubData::clubid() const {
  return clubid_;
}
inline void WaitJoinClubData::set_clubid(::google::protobuf::uint32 value) {
  set_has_clubid();
  clubid_ = value;
}

// required uint32 requestTimeInSec = 2;
inline bool WaitJoinClubData::has_requesttimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WaitJoinClubData::set_has_requesttimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WaitJoinClubData::clear_has_requesttimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WaitJoinClubData::clear_requesttimeinsec() {
  requesttimeinsec_ = 0u;
  clear_has_requesttimeinsec();
}
inline ::google::protobuf::uint32 WaitJoinClubData::requesttimeinsec() const {
  return requesttimeinsec_;
}
inline void WaitJoinClubData::set_requesttimeinsec(::google::protobuf::uint32 value) {
  set_has_requesttimeinsec();
  requesttimeinsec_ = value;
}

// -------------------------------------------------------------------

// ClubSaveData

// optional uint32 clubID = 1;
inline bool ClubSaveData::has_clubid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubSaveData::set_has_clubid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubSaveData::clear_has_clubid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubSaveData::clear_clubid() {
  clubid_ = 0u;
  clear_has_clubid();
}
inline ::google::protobuf::uint32 ClubSaveData::clubid() const {
  return clubid_;
}
inline void ClubSaveData::set_clubid(::google::protobuf::uint32 value) {
  set_has_clubid();
  clubid_ = value;
}

// optional uint32 lastLeaveClubTimeInSec = 2;
inline bool ClubSaveData::has_lastleaveclubtimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubSaveData::set_has_lastleaveclubtimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubSaveData::clear_has_lastleaveclubtimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubSaveData::clear_lastleaveclubtimeinsec() {
  lastleaveclubtimeinsec_ = 0u;
  clear_has_lastleaveclubtimeinsec();
}
inline ::google::protobuf::uint32 ClubSaveData::lastleaveclubtimeinsec() const {
  return lastleaveclubtimeinsec_;
}
inline void ClubSaveData::set_lastleaveclubtimeinsec(::google::protobuf::uint32 value) {
  set_has_lastleaveclubtimeinsec();
  lastleaveclubtimeinsec_ = value;
}

// optional uint32 clubContributionLevel = 3;
inline bool ClubSaveData::has_clubcontributionlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubSaveData::set_has_clubcontributionlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubSaveData::clear_has_clubcontributionlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubSaveData::clear_clubcontributionlevel() {
  clubcontributionlevel_ = 0u;
  clear_has_clubcontributionlevel();
}
inline ::google::protobuf::uint32 ClubSaveData::clubcontributionlevel() const {
  return clubcontributionlevel_;
}
inline void ClubSaveData::set_clubcontributionlevel(::google::protobuf::uint32 value) {
  set_has_clubcontributionlevel();
  clubcontributionlevel_ = value;
}

// optional uint32 clubContributionValue = 4;
inline bool ClubSaveData::has_clubcontributionvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubSaveData::set_has_clubcontributionvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubSaveData::clear_has_clubcontributionvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubSaveData::clear_clubcontributionvalue() {
  clubcontributionvalue_ = 0u;
  clear_has_clubcontributionvalue();
}
inline ::google::protobuf::uint32 ClubSaveData::clubcontributionvalue() const {
  return clubcontributionvalue_;
}
inline void ClubSaveData::set_clubcontributionvalue(::google::protobuf::uint32 value) {
  set_has_clubcontributionvalue();
  clubcontributionvalue_ = value;
}

// repeated .protocol.user.WaitJoinClubData waitJoinClubList = 5;
inline int ClubSaveData::waitjoinclublist_size() const {
  return waitjoinclublist_.size();
}
inline void ClubSaveData::clear_waitjoinclublist() {
  waitjoinclublist_.Clear();
}
inline const ::protocol::user::WaitJoinClubData& ClubSaveData::waitjoinclublist(int index) const {
  return waitjoinclublist_.Get(index);
}
inline ::protocol::user::WaitJoinClubData* ClubSaveData::mutable_waitjoinclublist(int index) {
  return waitjoinclublist_.Mutable(index);
}
inline ::protocol::user::WaitJoinClubData* ClubSaveData::add_waitjoinclublist() {
  return waitjoinclublist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::WaitJoinClubData >&
ClubSaveData::waitjoinclublist() const {
  return waitjoinclublist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::WaitJoinClubData >*
ClubSaveData::mutable_waitjoinclublist() {
  return &waitjoinclublist_;
}

// optional uint32 saveTimeInSec = 6;
inline bool ClubSaveData::has_savetimeinsec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubSaveData::set_has_savetimeinsec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubSaveData::clear_has_savetimeinsec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubSaveData::clear_savetimeinsec() {
  savetimeinsec_ = 0u;
  clear_has_savetimeinsec();
}
inline ::google::protobuf::uint32 ClubSaveData::savetimeinsec() const {
  return savetimeinsec_;
}
inline void ClubSaveData::set_savetimeinsec(::google::protobuf::uint32 value) {
  set_has_savetimeinsec();
  savetimeinsec_ = value;
}

// optional uint32 clubTitle = 7;
inline bool ClubSaveData::has_clubtitle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubSaveData::set_has_clubtitle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubSaveData::clear_has_clubtitle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubSaveData::clear_clubtitle() {
  clubtitle_ = 0u;
  clear_has_clubtitle();
}
inline ::google::protobuf::uint32 ClubSaveData::clubtitle() const {
  return clubtitle_;
}
inline void ClubSaveData::set_clubtitle(::google::protobuf::uint32 value) {
  set_has_clubtitle();
  clubtitle_ = value;
}

// -------------------------------------------------------------------

// VipTypeData

// required uint32 vipType = 1;
inline bool VipTypeData::has_viptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VipTypeData::set_has_viptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VipTypeData::clear_has_viptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VipTypeData::clear_viptype() {
  viptype_ = 0u;
  clear_has_viptype();
}
inline ::google::protobuf::uint32 VipTypeData::viptype() const {
  return viptype_;
}
inline void VipTypeData::set_viptype(::google::protobuf::uint32 value) {
  set_has_viptype();
  viptype_ = value;
}

// required uint32 endTimeInSec = 2;
inline bool VipTypeData::has_endtimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VipTypeData::set_has_endtimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VipTypeData::clear_has_endtimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VipTypeData::clear_endtimeinsec() {
  endtimeinsec_ = 0u;
  clear_has_endtimeinsec();
}
inline ::google::protobuf::uint32 VipTypeData::endtimeinsec() const {
  return endtimeinsec_;
}
inline void VipTypeData::set_endtimeinsec(::google::protobuf::uint32 value) {
  set_has_endtimeinsec();
  endtimeinsec_ = value;
}

// -------------------------------------------------------------------

// OfflineOpenVipData

// required string requestUserName = 1;
inline bool OfflineOpenVipData::has_requestusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineOpenVipData::set_has_requestusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineOpenVipData::clear_has_requestusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineOpenVipData::clear_requestusername() {
  if (requestusername_ != &::google::protobuf::internal::kEmptyString) {
    requestusername_->clear();
  }
  clear_has_requestusername();
}
inline const ::std::string& OfflineOpenVipData::requestusername() const {
  return *requestusername_;
}
inline void OfflineOpenVipData::set_requestusername(const ::std::string& value) {
  set_has_requestusername();
  if (requestusername_ == &::google::protobuf::internal::kEmptyString) {
    requestusername_ = new ::std::string;
  }
  requestusername_->assign(value);
}
inline void OfflineOpenVipData::set_requestusername(const char* value) {
  set_has_requestusername();
  if (requestusername_ == &::google::protobuf::internal::kEmptyString) {
    requestusername_ = new ::std::string;
  }
  requestusername_->assign(value);
}
inline void OfflineOpenVipData::set_requestusername(const char* value, size_t size) {
  set_has_requestusername();
  if (requestusername_ == &::google::protobuf::internal::kEmptyString) {
    requestusername_ = new ::std::string;
  }
  requestusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OfflineOpenVipData::mutable_requestusername() {
  set_has_requestusername();
  if (requestusername_ == &::google::protobuf::internal::kEmptyString) {
    requestusername_ = new ::std::string;
  }
  return requestusername_;
}
inline ::std::string* OfflineOpenVipData::release_requestusername() {
  clear_has_requestusername();
  if (requestusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestusername_;
    requestusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OfflineOpenVipData::set_allocated_requestusername(::std::string* requestusername) {
  if (requestusername_ != &::google::protobuf::internal::kEmptyString) {
    delete requestusername_;
  }
  if (requestusername) {
    set_has_requestusername();
    requestusername_ = requestusername;
  } else {
    clear_has_requestusername();
    requestusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 openTimeInSec = 2;
inline bool OfflineOpenVipData::has_opentimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineOpenVipData::set_has_opentimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineOpenVipData::clear_has_opentimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineOpenVipData::clear_opentimeinsec() {
  opentimeinsec_ = 0u;
  clear_has_opentimeinsec();
}
inline ::google::protobuf::uint32 OfflineOpenVipData::opentimeinsec() const {
  return opentimeinsec_;
}
inline void OfflineOpenVipData::set_opentimeinsec(::google::protobuf::uint32 value) {
  set_has_opentimeinsec();
  opentimeinsec_ = value;
}

// required uint32 effectTimeInDay = 3;
inline bool OfflineOpenVipData::has_effecttimeinday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfflineOpenVipData::set_has_effecttimeinday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfflineOpenVipData::clear_has_effecttimeinday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfflineOpenVipData::clear_effecttimeinday() {
  effecttimeinday_ = 0u;
  clear_has_effecttimeinday();
}
inline ::google::protobuf::uint32 OfflineOpenVipData::effecttimeinday() const {
  return effecttimeinday_;
}
inline void OfflineOpenVipData::set_effecttimeinday(::google::protobuf::uint32 value) {
  set_has_effecttimeinday();
  effecttimeinday_ = value;
}

// -------------------------------------------------------------------

// VipBinary

// optional uint32 vipLevel = 1;
inline bool VipBinary::has_viplevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VipBinary::set_has_viplevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VipBinary::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VipBinary::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 VipBinary::viplevel() const {
  return viplevel_;
}
inline void VipBinary::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional uint32 vipGrowValue = 2;
inline bool VipBinary::has_vipgrowvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VipBinary::set_has_vipgrowvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VipBinary::clear_has_vipgrowvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VipBinary::clear_vipgrowvalue() {
  vipgrowvalue_ = 0u;
  clear_has_vipgrowvalue();
}
inline ::google::protobuf::uint32 VipBinary::vipgrowvalue() const {
  return vipgrowvalue_;
}
inline void VipBinary::set_vipgrowvalue(::google::protobuf::uint32 value) {
  set_has_vipgrowvalue();
  vipgrowvalue_ = value;
}

// repeated .protocol.user.OfflineOpenVipData offlineOpenVipDataList = 3;
inline int VipBinary::offlineopenvipdatalist_size() const {
  return offlineopenvipdatalist_.size();
}
inline void VipBinary::clear_offlineopenvipdatalist() {
  offlineopenvipdatalist_.Clear();
}
inline const ::protocol::user::OfflineOpenVipData& VipBinary::offlineopenvipdatalist(int index) const {
  return offlineopenvipdatalist_.Get(index);
}
inline ::protocol::user::OfflineOpenVipData* VipBinary::mutable_offlineopenvipdatalist(int index) {
  return offlineopenvipdatalist_.Mutable(index);
}
inline ::protocol::user::OfflineOpenVipData* VipBinary::add_offlineopenvipdatalist() {
  return offlineopenvipdatalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineOpenVipData >&
VipBinary::offlineopenvipdatalist() const {
  return offlineopenvipdatalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::OfflineOpenVipData >*
VipBinary::mutable_offlineopenvipdatalist() {
  return &offlineopenvipdatalist_;
}

// optional uint32 vipEndTimeInSec = 4;
inline bool VipBinary::has_vipendtimeinsec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VipBinary::set_has_vipendtimeinsec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VipBinary::clear_has_vipendtimeinsec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VipBinary::clear_vipendtimeinsec() {
  vipendtimeinsec_ = 0u;
  clear_has_vipendtimeinsec();
}
inline ::google::protobuf::uint32 VipBinary::vipendtimeinsec() const {
  return vipendtimeinsec_;
}
inline void VipBinary::set_vipendtimeinsec(::google::protobuf::uint32 value) {
  set_has_vipendtimeinsec();
  vipendtimeinsec_ = value;
}

// repeated .protocol.user.VipTypeData vipTypeDataList = 5;
inline int VipBinary::viptypedatalist_size() const {
  return viptypedatalist_.size();
}
inline void VipBinary::clear_viptypedatalist() {
  viptypedatalist_.Clear();
}
inline const ::protocol::user::VipTypeData& VipBinary::viptypedatalist(int index) const {
  return viptypedatalist_.Get(index);
}
inline ::protocol::user::VipTypeData* VipBinary::mutable_viptypedatalist(int index) {
  return viptypedatalist_.Mutable(index);
}
inline ::protocol::user::VipTypeData* VipBinary::add_viptypedatalist() {
  return viptypedatalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::VipTypeData >&
VipBinary::viptypedatalist() const {
  return viptypedatalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::VipTypeData >*
VipBinary::mutable_viptypedatalist() {
  return &viptypedatalist_;
}

// optional uint32 lastCheckOverdueTimeInSec = 6;
inline bool VipBinary::has_lastcheckoverduetimeinsec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VipBinary::set_has_lastcheckoverduetimeinsec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VipBinary::clear_has_lastcheckoverduetimeinsec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VipBinary::clear_lastcheckoverduetimeinsec() {
  lastcheckoverduetimeinsec_ = 0u;
  clear_has_lastcheckoverduetimeinsec();
}
inline ::google::protobuf::uint32 VipBinary::lastcheckoverduetimeinsec() const {
  return lastcheckoverduetimeinsec_;
}
inline void VipBinary::set_lastcheckoverduetimeinsec(::google::protobuf::uint32 value) {
  set_has_lastcheckoverduetimeinsec();
  lastcheckoverduetimeinsec_ = value;
}

// optional uint32 vipType = 7;
inline bool VipBinary::has_viptype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VipBinary::set_has_viptype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VipBinary::clear_has_viptype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VipBinary::clear_viptype() {
  viptype_ = 0u;
  clear_has_viptype();
}
inline ::google::protobuf::uint32 VipBinary::viptype() const {
  return viptype_;
}
inline void VipBinary::set_viptype(::google::protobuf::uint32 value) {
  set_has_viptype();
  viptype_ = value;
}

// -------------------------------------------------------------------

// WarDataBinary

// optional uint32 winTimes = 1;
inline bool WarDataBinary::has_wintimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarDataBinary::set_has_wintimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarDataBinary::clear_has_wintimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarDataBinary::clear_wintimes() {
  wintimes_ = 0u;
  clear_has_wintimes();
}
inline ::google::protobuf::uint32 WarDataBinary::wintimes() const {
  return wintimes_;
}
inline void WarDataBinary::set_wintimes(::google::protobuf::uint32 value) {
  set_has_wintimes();
  wintimes_ = value;
}

// optional uint32 loseTimes = 2;
inline bool WarDataBinary::has_losetimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarDataBinary::set_has_losetimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarDataBinary::clear_has_losetimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarDataBinary::clear_losetimes() {
  losetimes_ = 0u;
  clear_has_losetimes();
}
inline ::google::protobuf::uint32 WarDataBinary::losetimes() const {
  return losetimes_;
}
inline void WarDataBinary::set_losetimes(::google::protobuf::uint32 value) {
  set_has_losetimes();
  losetimes_ = value;
}

// optional uint32 pvpTimes = 3;
inline bool WarDataBinary::has_pvptimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarDataBinary::set_has_pvptimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarDataBinary::clear_has_pvptimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarDataBinary::clear_pvptimes() {
  pvptimes_ = 0u;
  clear_has_pvptimes();
}
inline ::google::protobuf::uint32 WarDataBinary::pvptimes() const {
  return pvptimes_;
}
inline void WarDataBinary::set_pvptimes(::google::protobuf::uint32 value) {
  set_has_pvptimes();
  pvptimes_ = value;
}

// optional uint32 saveTimeInSec = 4;
inline bool WarDataBinary::has_savetimeinsec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarDataBinary::set_has_savetimeinsec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarDataBinary::clear_has_savetimeinsec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarDataBinary::clear_savetimeinsec() {
  savetimeinsec_ = 0u;
  clear_has_savetimeinsec();
}
inline ::google::protobuf::uint32 WarDataBinary::savetimeinsec() const {
  return savetimeinsec_;
}
inline void WarDataBinary::set_savetimeinsec(::google::protobuf::uint32 value) {
  set_has_savetimeinsec();
  savetimeinsec_ = value;
}

// optional uint32 weekWinTimes = 5;
inline bool WarDataBinary::has_weekwintimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WarDataBinary::set_has_weekwintimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WarDataBinary::clear_has_weekwintimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WarDataBinary::clear_weekwintimes() {
  weekwintimes_ = 0u;
  clear_has_weekwintimes();
}
inline ::google::protobuf::uint32 WarDataBinary::weekwintimes() const {
  return weekwintimes_;
}
inline void WarDataBinary::set_weekwintimes(::google::protobuf::uint32 value) {
  set_has_weekwintimes();
  weekwintimes_ = value;
}

// optional uint32 weekLoseTimes = 6;
inline bool WarDataBinary::has_weeklosetimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WarDataBinary::set_has_weeklosetimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WarDataBinary::clear_has_weeklosetimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WarDataBinary::clear_weeklosetimes() {
  weeklosetimes_ = 0u;
  clear_has_weeklosetimes();
}
inline ::google::protobuf::uint32 WarDataBinary::weeklosetimes() const {
  return weeklosetimes_;
}
inline void WarDataBinary::set_weeklosetimes(::google::protobuf::uint32 value) {
  set_has_weeklosetimes();
  weeklosetimes_ = value;
}

// optional uint32 weekPvpTimes = 7;
inline bool WarDataBinary::has_weekpvptimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WarDataBinary::set_has_weekpvptimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WarDataBinary::clear_has_weekpvptimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WarDataBinary::clear_weekpvptimes() {
  weekpvptimes_ = 0u;
  clear_has_weekpvptimes();
}
inline ::google::protobuf::uint32 WarDataBinary::weekpvptimes() const {
  return weekpvptimes_;
}
inline void WarDataBinary::set_weekpvptimes(::google::protobuf::uint32 value) {
  set_has_weekpvptimes();
  weekpvptimes_ = value;
}

// optional uint32 weekKillNum = 8;
inline bool WarDataBinary::has_weekkillnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WarDataBinary::set_has_weekkillnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WarDataBinary::clear_has_weekkillnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WarDataBinary::clear_weekkillnum() {
  weekkillnum_ = 0u;
  clear_has_weekkillnum();
}
inline ::google::protobuf::uint32 WarDataBinary::weekkillnum() const {
  return weekkillnum_;
}
inline void WarDataBinary::set_weekkillnum(::google::protobuf::uint32 value) {
  set_has_weekkillnum();
  weekkillnum_ = value;
}

// optional uint32 weekKilledNum = 9;
inline bool WarDataBinary::has_weekkillednum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WarDataBinary::set_has_weekkillednum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WarDataBinary::clear_has_weekkillednum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WarDataBinary::clear_weekkillednum() {
  weekkillednum_ = 0u;
  clear_has_weekkillednum();
}
inline ::google::protobuf::uint32 WarDataBinary::weekkillednum() const {
  return weekkillednum_;
}
inline void WarDataBinary::set_weekkillednum(::google::protobuf::uint32 value) {
  set_has_weekkillednum();
  weekkillednum_ = value;
}

// optional uint32 killNum = 10;
inline bool WarDataBinary::has_killnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WarDataBinary::set_has_killnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WarDataBinary::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WarDataBinary::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 WarDataBinary::killnum() const {
  return killnum_;
}
inline void WarDataBinary::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 killedNum = 11;
inline bool WarDataBinary::has_killednum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WarDataBinary::set_has_killednum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WarDataBinary::clear_has_killednum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WarDataBinary::clear_killednum() {
  killednum_ = 0u;
  clear_has_killednum();
}
inline ::google::protobuf::uint32 WarDataBinary::killednum() const {
  return killednum_;
}
inline void WarDataBinary::set_killednum(::google::protobuf::uint32 value) {
  set_has_killednum();
  killednum_ = value;
}

// -------------------------------------------------------------------

// FriendDataBinary

// repeated uint32 addMeUserIDList = 1;
inline int FriendDataBinary::addmeuseridlist_size() const {
  return addmeuseridlist_.size();
}
inline void FriendDataBinary::clear_addmeuseridlist() {
  addmeuseridlist_.Clear();
}
inline ::google::protobuf::uint32 FriendDataBinary::addmeuseridlist(int index) const {
  return addmeuseridlist_.Get(index);
}
inline void FriendDataBinary::set_addmeuseridlist(int index, ::google::protobuf::uint32 value) {
  addmeuseridlist_.Set(index, value);
}
inline void FriendDataBinary::add_addmeuseridlist(::google::protobuf::uint32 value) {
  addmeuseridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FriendDataBinary::addmeuseridlist() const {
  return addmeuseridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FriendDataBinary::mutable_addmeuseridlist() {
  return &addmeuseridlist_;
}

// required uint32 todayGetVitalityTimes = 2;
inline bool FriendDataBinary::has_todaygetvitalitytimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendDataBinary::set_has_todaygetvitalitytimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendDataBinary::clear_has_todaygetvitalitytimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendDataBinary::clear_todaygetvitalitytimes() {
  todaygetvitalitytimes_ = 0u;
  clear_has_todaygetvitalitytimes();
}
inline ::google::protobuf::uint32 FriendDataBinary::todaygetvitalitytimes() const {
  return todaygetvitalitytimes_;
}
inline void FriendDataBinary::set_todaygetvitalitytimes(::google::protobuf::uint32 value) {
  set_has_todaygetvitalitytimes();
  todaygetvitalitytimes_ = value;
}

// required uint32 lastGetVitalityTimeInSec = 3;
inline bool FriendDataBinary::has_lastgetvitalitytimeinsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendDataBinary::set_has_lastgetvitalitytimeinsec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendDataBinary::clear_has_lastgetvitalitytimeinsec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendDataBinary::clear_lastgetvitalitytimeinsec() {
  lastgetvitalitytimeinsec_ = 0u;
  clear_has_lastgetvitalitytimeinsec();
}
inline ::google::protobuf::uint32 FriendDataBinary::lastgetvitalitytimeinsec() const {
  return lastgetvitalitytimeinsec_;
}
inline void FriendDataBinary::set_lastgetvitalitytimeinsec(::google::protobuf::uint32 value) {
  set_has_lastgetvitalitytimeinsec();
  lastgetvitalitytimeinsec_ = value;
}

// -------------------------------------------------------------------

// DuplDropBinary

// required uint32 duplID = 1;
inline bool DuplDropBinary::has_duplid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DuplDropBinary::set_has_duplid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DuplDropBinary::clear_has_duplid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DuplDropBinary::clear_duplid() {
  duplid_ = 0u;
  clear_has_duplid();
}
inline ::google::protobuf::uint32 DuplDropBinary::duplid() const {
  return duplid_;
}
inline void DuplDropBinary::set_duplid(::google::protobuf::uint32 value) {
  set_has_duplid();
  duplid_ = value;
}

// required uint32 dropExp = 2;
inline bool DuplDropBinary::has_dropexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DuplDropBinary::set_has_dropexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DuplDropBinary::clear_has_dropexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DuplDropBinary::clear_dropexp() {
  dropexp_ = 0u;
  clear_has_dropexp();
}
inline ::google::protobuf::uint32 DuplDropBinary::dropexp() const {
  return dropexp_;
}
inline void DuplDropBinary::set_dropexp(::google::protobuf::uint32 value) {
  set_has_dropexp();
  dropexp_ = value;
}

// required uint32 dropMoney = 3;
inline bool DuplDropBinary::has_dropmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DuplDropBinary::set_has_dropmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DuplDropBinary::clear_has_dropmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DuplDropBinary::clear_dropmoney() {
  dropmoney_ = 0u;
  clear_has_dropmoney();
}
inline ::google::protobuf::uint32 DuplDropBinary::dropmoney() const {
  return dropmoney_;
}
inline void DuplDropBinary::set_dropmoney(::google::protobuf::uint32 value) {
  set_has_dropmoney();
  dropmoney_ = value;
}

// repeated .protocol.user.DropItemData itemData = 4;
inline int DuplDropBinary::itemdata_size() const {
  return itemdata_.size();
}
inline void DuplDropBinary::clear_itemdata() {
  itemdata_.Clear();
}
inline const ::protocol::user::DropItemData& DuplDropBinary::itemdata(int index) const {
  return itemdata_.Get(index);
}
inline ::protocol::user::DropItemData* DuplDropBinary::mutable_itemdata(int index) {
  return itemdata_.Mutable(index);
}
inline ::protocol::user::DropItemData* DuplDropBinary::add_itemdata() {
  return itemdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DropItemData >&
DuplDropBinary::itemdata() const {
  return itemdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DropItemData >*
DuplDropBinary::mutable_itemdata() {
  return &itemdata_;
}

// repeated .protocol.user.DropEquipData equipData = 5;
inline int DuplDropBinary::equipdata_size() const {
  return equipdata_.size();
}
inline void DuplDropBinary::clear_equipdata() {
  equipdata_.Clear();
}
inline const ::protocol::user::DropEquipData& DuplDropBinary::equipdata(int index) const {
  return equipdata_.Get(index);
}
inline ::protocol::user::DropEquipData* DuplDropBinary::mutable_equipdata(int index) {
  return equipdata_.Mutable(index);
}
inline ::protocol::user::DropEquipData* DuplDropBinary::add_equipdata() {
  return equipdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DropEquipData >&
DuplDropBinary::equipdata() const {
  return equipdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DropEquipData >*
DuplDropBinary::mutable_equipdata() {
  return &equipdata_;
}

// repeated .protocol.user.DropPetData petData = 6;
inline int DuplDropBinary::petdata_size() const {
  return petdata_.size();
}
inline void DuplDropBinary::clear_petdata() {
  petdata_.Clear();
}
inline const ::protocol::user::DropPetData& DuplDropBinary::petdata(int index) const {
  return petdata_.Get(index);
}
inline ::protocol::user::DropPetData* DuplDropBinary::mutable_petdata(int index) {
  return petdata_.Mutable(index);
}
inline ::protocol::user::DropPetData* DuplDropBinary::add_petdata() {
  return petdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::DropPetData >&
DuplDropBinary::petdata() const {
  return petdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::DropPetData >*
DuplDropBinary::mutable_petdata() {
  return &petdata_;
}

// -------------------------------------------------------------------

// DropItemData

// required uint32 itemBaseID = 1;
inline bool DropItemData::has_itembaseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropItemData::set_has_itembaseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropItemData::clear_has_itembaseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropItemData::clear_itembaseid() {
  itembaseid_ = 0u;
  clear_has_itembaseid();
}
inline ::google::protobuf::uint32 DropItemData::itembaseid() const {
  return itembaseid_;
}
inline void DropItemData::set_itembaseid(::google::protobuf::uint32 value) {
  set_has_itembaseid();
  itembaseid_ = value;
}

// required uint32 bindType = 2;
inline bool DropItemData::has_bindtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropItemData::set_has_bindtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropItemData::clear_has_bindtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropItemData::clear_bindtype() {
  bindtype_ = 0u;
  clear_has_bindtype();
}
inline ::google::protobuf::uint32 DropItemData::bindtype() const {
  return bindtype_;
}
inline void DropItemData::set_bindtype(::google::protobuf::uint32 value) {
  set_has_bindtype();
  bindtype_ = value;
}

// required uint32 num = 3;
inline bool DropItemData::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DropItemData::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DropItemData::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DropItemData::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 DropItemData::num() const {
  return num_;
}
inline void DropItemData::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// DropEquipData

// required uint32 equipBaseID = 1;
inline bool DropEquipData::has_equipbaseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropEquipData::set_has_equipbaseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropEquipData::clear_has_equipbaseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropEquipData::clear_equipbaseid() {
  equipbaseid_ = 0u;
  clear_has_equipbaseid();
}
inline ::google::protobuf::uint32 DropEquipData::equipbaseid() const {
  return equipbaseid_;
}
inline void DropEquipData::set_equipbaseid(::google::protobuf::uint32 value) {
  set_has_equipbaseid();
  equipbaseid_ = value;
}

// required uint32 bindType = 2;
inline bool DropEquipData::has_bindtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropEquipData::set_has_bindtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropEquipData::clear_has_bindtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropEquipData::clear_bindtype() {
  bindtype_ = 0u;
  clear_has_bindtype();
}
inline ::google::protobuf::uint32 DropEquipData::bindtype() const {
  return bindtype_;
}
inline void DropEquipData::set_bindtype(::google::protobuf::uint32 value) {
  set_has_bindtype();
  bindtype_ = value;
}

// required uint32 num = 3;
inline bool DropEquipData::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DropEquipData::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DropEquipData::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DropEquipData::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 DropEquipData::num() const {
  return num_;
}
inline void DropEquipData::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 quality = 4;
inline bool DropEquipData::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DropEquipData::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DropEquipData::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DropEquipData::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 DropEquipData::quality() const {
  return quality_;
}
inline void DropEquipData::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// required uint32 identify = 5;
inline bool DropEquipData::has_identify() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DropEquipData::set_has_identify() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DropEquipData::clear_has_identify() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DropEquipData::clear_identify() {
  identify_ = 0u;
  clear_has_identify();
}
inline ::google::protobuf::uint32 DropEquipData::identify() const {
  return identify_;
}
inline void DropEquipData::set_identify(::google::protobuf::uint32 value) {
  set_has_identify();
  identify_ = value;
}

// -------------------------------------------------------------------

// DropPetData

// required uint32 petID = 1;
inline bool DropPetData::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropPetData::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropPetData::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropPetData::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 DropPetData::petid() const {
  return petid_;
}
inline void DropPetData::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
}

// required uint32 petExp = 2;
inline bool DropPetData::has_petexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropPetData::set_has_petexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropPetData::clear_has_petexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropPetData::clear_petexp() {
  petexp_ = 0u;
  clear_has_petexp();
}
inline ::google::protobuf::uint32 DropPetData::petexp() const {
  return petexp_;
}
inline void DropPetData::set_petexp(::google::protobuf::uint32 value) {
  set_has_petexp();
  petexp_ = value;
}

// required uint32 petUpLevel = 3;
inline bool DropPetData::has_petuplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DropPetData::set_has_petuplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DropPetData::clear_has_petuplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DropPetData::clear_petuplevel() {
  petuplevel_ = 0u;
  clear_has_petuplevel();
}
inline ::google::protobuf::uint32 DropPetData::petuplevel() const {
  return petuplevel_;
}
inline void DropPetData::set_petuplevel(::google::protobuf::uint32 value) {
  set_has_petuplevel();
  petuplevel_ = value;
}

// -------------------------------------------------------------------

// TaskBinary

// repeated .protocol.user.MainTaskData mainTaskData = 1;
inline int TaskBinary::maintaskdata_size() const {
  return maintaskdata_.size();
}
inline void TaskBinary::clear_maintaskdata() {
  maintaskdata_.Clear();
}
inline const ::protocol::user::MainTaskData& TaskBinary::maintaskdata(int index) const {
  return maintaskdata_.Get(index);
}
inline ::protocol::user::MainTaskData* TaskBinary::mutable_maintaskdata(int index) {
  return maintaskdata_.Mutable(index);
}
inline ::protocol::user::MainTaskData* TaskBinary::add_maintaskdata() {
  return maintaskdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::MainTaskData >&
TaskBinary::maintaskdata() const {
  return maintaskdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::MainTaskData >*
TaskBinary::mutable_maintaskdata() {
  return &maintaskdata_;
}

// repeated .protocol.user.EquipTaskData equipTaskData = 2;
inline int TaskBinary::equiptaskdata_size() const {
  return equiptaskdata_.size();
}
inline void TaskBinary::clear_equiptaskdata() {
  equiptaskdata_.Clear();
}
inline const ::protocol::user::EquipTaskData& TaskBinary::equiptaskdata(int index) const {
  return equiptaskdata_.Get(index);
}
inline ::protocol::user::EquipTaskData* TaskBinary::mutable_equiptaskdata(int index) {
  return equiptaskdata_.Mutable(index);
}
inline ::protocol::user::EquipTaskData* TaskBinary::add_equiptaskdata() {
  return equiptaskdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipTaskData >&
TaskBinary::equiptaskdata() const {
  return equiptaskdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::EquipTaskData >*
TaskBinary::mutable_equiptaskdata() {
  return &equiptaskdata_;
}

// repeated .protocol.user.PetTaskData petTaskData = 3;
inline int TaskBinary::pettaskdata_size() const {
  return pettaskdata_.size();
}
inline void TaskBinary::clear_pettaskdata() {
  pettaskdata_.Clear();
}
inline const ::protocol::user::PetTaskData& TaskBinary::pettaskdata(int index) const {
  return pettaskdata_.Get(index);
}
inline ::protocol::user::PetTaskData* TaskBinary::mutable_pettaskdata(int index) {
  return pettaskdata_.Mutable(index);
}
inline ::protocol::user::PetTaskData* TaskBinary::add_pettaskdata() {
  return pettaskdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::PetTaskData >&
TaskBinary::pettaskdata() const {
  return pettaskdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::PetTaskData >*
TaskBinary::mutable_pettaskdata() {
  return &pettaskdata_;
}

// repeated .protocol.user.TrumpTaskData trumpTaskData = 4;
inline int TaskBinary::trumptaskdata_size() const {
  return trumptaskdata_.size();
}
inline void TaskBinary::clear_trumptaskdata() {
  trumptaskdata_.Clear();
}
inline const ::protocol::user::TrumpTaskData& TaskBinary::trumptaskdata(int index) const {
  return trumptaskdata_.Get(index);
}
inline ::protocol::user::TrumpTaskData* TaskBinary::mutable_trumptaskdata(int index) {
  return trumptaskdata_.Mutable(index);
}
inline ::protocol::user::TrumpTaskData* TaskBinary::add_trumptaskdata() {
  return trumptaskdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpTaskData >&
TaskBinary::trumptaskdata() const {
  return trumptaskdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::TrumpTaskData >*
TaskBinary::mutable_trumptaskdata() {
  return &trumptaskdata_;
}

// repeated .protocol.user.IntensifyTaskData intensifyTaskData = 5;
inline int TaskBinary::intensifytaskdata_size() const {
  return intensifytaskdata_.size();
}
inline void TaskBinary::clear_intensifytaskdata() {
  intensifytaskdata_.Clear();
}
inline const ::protocol::user::IntensifyTaskData& TaskBinary::intensifytaskdata(int index) const {
  return intensifytaskdata_.Get(index);
}
inline ::protocol::user::IntensifyTaskData* TaskBinary::mutable_intensifytaskdata(int index) {
  return intensifytaskdata_.Mutable(index);
}
inline ::protocol::user::IntensifyTaskData* TaskBinary::add_intensifytaskdata() {
  return intensifytaskdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::user::IntensifyTaskData >&
TaskBinary::intensifytaskdata() const {
  return intensifytaskdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::user::IntensifyTaskData >*
TaskBinary::mutable_intensifytaskdata() {
  return &intensifytaskdata_;
}

// -------------------------------------------------------------------

// MainTaskData

// required uint32 taskID = 1;
inline bool MainTaskData::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainTaskData::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainTaskData::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainTaskData::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MainTaskData::taskid() const {
  return taskid_;
}
inline void MainTaskData::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required uint32 taskFinishNum = 2;
inline bool MainTaskData::has_taskfinishnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainTaskData::set_has_taskfinishnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainTaskData::clear_has_taskfinishnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainTaskData::clear_taskfinishnum() {
  taskfinishnum_ = 0u;
  clear_has_taskfinishnum();
}
inline ::google::protobuf::uint32 MainTaskData::taskfinishnum() const {
  return taskfinishnum_;
}
inline void MainTaskData::set_taskfinishnum(::google::protobuf::uint32 value) {
  set_has_taskfinishnum();
  taskfinishnum_ = value;
}

// required uint32 isFinish = 3;
inline bool MainTaskData::has_isfinish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MainTaskData::set_has_isfinish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MainTaskData::clear_has_isfinish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MainTaskData::clear_isfinish() {
  isfinish_ = 0u;
  clear_has_isfinish();
}
inline ::google::protobuf::uint32 MainTaskData::isfinish() const {
  return isfinish_;
}
inline void MainTaskData::set_isfinish(::google::protobuf::uint32 value) {
  set_has_isfinish();
  isfinish_ = value;
}

// required uint32 isReward = 4;
inline bool MainTaskData::has_isreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MainTaskData::set_has_isreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MainTaskData::clear_has_isreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MainTaskData::clear_isreward() {
  isreward_ = 0u;
  clear_has_isreward();
}
inline ::google::protobuf::uint32 MainTaskData::isreward() const {
  return isreward_;
}
inline void MainTaskData::set_isreward(::google::protobuf::uint32 value) {
  set_has_isreward();
  isreward_ = value;
}

// -------------------------------------------------------------------

// EquipTaskData

// optional uint32 equipPos = 1;
inline bool EquipTaskData::has_equippos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipTaskData::set_has_equippos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipTaskData::clear_has_equippos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipTaskData::clear_equippos() {
  equippos_ = 0u;
  clear_has_equippos();
}
inline ::google::protobuf::uint32 EquipTaskData::equippos() const {
  return equippos_;
}
inline void EquipTaskData::set_equippos(::google::protobuf::uint32 value) {
  set_has_equippos();
  equippos_ = value;
}

// optional uint32 equipQuality = 2;
inline bool EquipTaskData::has_equipquality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipTaskData::set_has_equipquality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipTaskData::clear_has_equipquality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipTaskData::clear_equipquality() {
  equipquality_ = 0u;
  clear_has_equipquality();
}
inline ::google::protobuf::uint32 EquipTaskData::equipquality() const {
  return equipquality_;
}
inline void EquipTaskData::set_equipquality(::google::protobuf::uint32 value) {
  set_has_equipquality();
  equipquality_ = value;
}

// -------------------------------------------------------------------

// PetTaskData

// optional uint32 petID = 1;
inline bool PetTaskData::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetTaskData::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetTaskData::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetTaskData::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 PetTaskData::petid() const {
  return petid_;
}
inline void PetTaskData::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
}

// optional uint32 petStar = 2;
inline bool PetTaskData::has_petstar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetTaskData::set_has_petstar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetTaskData::clear_has_petstar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetTaskData::clear_petstar() {
  petstar_ = 0u;
  clear_has_petstar();
}
inline ::google::protobuf::uint32 PetTaskData::petstar() const {
  return petstar_;
}
inline void PetTaskData::set_petstar(::google::protobuf::uint32 value) {
  set_has_petstar();
  petstar_ = value;
}

// optional uint32 petQuality = 3;
inline bool PetTaskData::has_petquality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetTaskData::set_has_petquality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetTaskData::clear_has_petquality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetTaskData::clear_petquality() {
  petquality_ = 0u;
  clear_has_petquality();
}
inline ::google::protobuf::uint32 PetTaskData::petquality() const {
  return petquality_;
}
inline void PetTaskData::set_petquality(::google::protobuf::uint32 value) {
  set_has_petquality();
  petquality_ = value;
}

// -------------------------------------------------------------------

// TrumpTaskData

// optional uint32 trumpID = 1;
inline bool TrumpTaskData::has_trumpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrumpTaskData::set_has_trumpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrumpTaskData::clear_has_trumpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrumpTaskData::clear_trumpid() {
  trumpid_ = 0u;
  clear_has_trumpid();
}
inline ::google::protobuf::uint32 TrumpTaskData::trumpid() const {
  return trumpid_;
}
inline void TrumpTaskData::set_trumpid(::google::protobuf::uint32 value) {
  set_has_trumpid();
  trumpid_ = value;
}

// optional uint32 trumpLevel = 2;
inline bool TrumpTaskData::has_trumplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrumpTaskData::set_has_trumplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrumpTaskData::clear_has_trumplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrumpTaskData::clear_trumplevel() {
  trumplevel_ = 0u;
  clear_has_trumplevel();
}
inline ::google::protobuf::uint32 TrumpTaskData::trumplevel() const {
  return trumplevel_;
}
inline void TrumpTaskData::set_trumplevel(::google::protobuf::uint32 value) {
  set_has_trumplevel();
  trumplevel_ = value;
}

// -------------------------------------------------------------------

// IntensifyTaskData

// optional uint32 intensifyPos = 1;
inline bool IntensifyTaskData::has_intensifypos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntensifyTaskData::set_has_intensifypos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntensifyTaskData::clear_has_intensifypos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntensifyTaskData::clear_intensifypos() {
  intensifypos_ = 0u;
  clear_has_intensifypos();
}
inline ::google::protobuf::uint32 IntensifyTaskData::intensifypos() const {
  return intensifypos_;
}
inline void IntensifyTaskData::set_intensifypos(::google::protobuf::uint32 value) {
  set_has_intensifypos();
  intensifypos_ = value;
}

// optional uint32 intensifyLevel = 2;
inline bool IntensifyTaskData::has_intensifylevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntensifyTaskData::set_has_intensifylevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntensifyTaskData::clear_has_intensifylevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntensifyTaskData::clear_intensifylevel() {
  intensifylevel_ = 0u;
  clear_has_intensifylevel();
}
inline ::google::protobuf::uint32 IntensifyTaskData::intensifylevel() const {
  return intensifylevel_;
}
inline void IntensifyTaskData::set_intensifylevel(::google::protobuf::uint32 value) {
  set_has_intensifylevel();
  intensifylevel_ = value;
}

// -------------------------------------------------------------------

// WingBinary

// optional uint32 wingLevel = 1;
inline bool WingBinary::has_winglevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WingBinary::set_has_winglevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WingBinary::clear_has_winglevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WingBinary::clear_winglevel() {
  winglevel_ = 0u;
  clear_has_winglevel();
}
inline ::google::protobuf::uint32 WingBinary::winglevel() const {
  return winglevel_;
}
inline void WingBinary::set_winglevel(::google::protobuf::uint32 value) {
  set_has_winglevel();
  winglevel_ = value;
}

// optional uint32 wingState = 2;
inline bool WingBinary::has_wingstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WingBinary::set_has_wingstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WingBinary::clear_has_wingstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WingBinary::clear_wingstate() {
  wingstate_ = 0u;
  clear_has_wingstate();
}
inline ::google::protobuf::uint32 WingBinary::wingstate() const {
  return wingstate_;
}
inline void WingBinary::set_wingstate(::google::protobuf::uint32 value) {
  set_has_wingstate();
  wingstate_ = value;
}

// optional uint32 useWingID = 3;
inline bool WingBinary::has_usewingid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WingBinary::set_has_usewingid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WingBinary::clear_has_usewingid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WingBinary::clear_usewingid() {
  usewingid_ = 0u;
  clear_has_usewingid();
}
inline ::google::protobuf::uint32 WingBinary::usewingid() const {
  return usewingid_;
}
inline void WingBinary::set_usewingid(::google::protobuf::uint32 value) {
  set_has_usewingid();
  usewingid_ = value;
}

// optional uint32 blessingValue = 4;
inline bool WingBinary::has_blessingvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WingBinary::set_has_blessingvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WingBinary::clear_has_blessingvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WingBinary::clear_blessingvalue() {
  blessingvalue_ = 0u;
  clear_has_blessingvalue();
}
inline ::google::protobuf::uint32 WingBinary::blessingvalue() const {
  return blessingvalue_;
}
inline void WingBinary::set_blessingvalue(::google::protobuf::uint32 value) {
  set_has_blessingvalue();
  blessingvalue_ = value;
}

// optional uint32 upStarItemID = 5;
inline bool WingBinary::has_upstaritemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WingBinary::set_has_upstaritemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WingBinary::clear_has_upstaritemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WingBinary::clear_upstaritemid() {
  upstaritemid_ = 0u;
  clear_has_upstaritemid();
}
inline ::google::protobuf::uint32 WingBinary::upstaritemid() const {
  return upstaritemid_;
}
inline void WingBinary::set_upstaritemid(::google::protobuf::uint32 value) {
  set_has_upstaritemid();
  upstaritemid_ = value;
}

// optional uint32 attack = 6;
inline bool WingBinary::has_attack() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WingBinary::set_has_attack() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WingBinary::clear_has_attack() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WingBinary::clear_attack() {
  attack_ = 0u;
  clear_has_attack();
}
inline ::google::protobuf::uint32 WingBinary::attack() const {
  return attack_;
}
inline void WingBinary::set_attack(::google::protobuf::uint32 value) {
  set_has_attack();
  attack_ = value;
}

// optional uint32 defence = 7;
inline bool WingBinary::has_defence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WingBinary::set_has_defence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WingBinary::clear_has_defence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WingBinary::clear_defence() {
  defence_ = 0u;
  clear_has_defence();
}
inline ::google::protobuf::uint32 WingBinary::defence() const {
  return defence_;
}
inline void WingBinary::set_defence(::google::protobuf::uint32 value) {
  set_has_defence();
  defence_ = value;
}

// optional uint32 maxBlood = 8;
inline bool WingBinary::has_maxblood() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WingBinary::set_has_maxblood() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WingBinary::clear_has_maxblood() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WingBinary::clear_maxblood() {
  maxblood_ = 0u;
  clear_has_maxblood();
}
inline ::google::protobuf::uint32 WingBinary::maxblood() const {
  return maxblood_;
}
inline void WingBinary::set_maxblood(::google::protobuf::uint32 value) {
  set_has_maxblood();
  maxblood_ = value;
}

// optional uint32 hitValue = 9;
inline bool WingBinary::has_hitvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WingBinary::set_has_hitvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WingBinary::clear_has_hitvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WingBinary::clear_hitvalue() {
  hitvalue_ = 0u;
  clear_has_hitvalue();
}
inline ::google::protobuf::uint32 WingBinary::hitvalue() const {
  return hitvalue_;
}
inline void WingBinary::set_hitvalue(::google::protobuf::uint32 value) {
  set_has_hitvalue();
  hitvalue_ = value;
}

// optional uint32 avoidValue = 10;
inline bool WingBinary::has_avoidvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WingBinary::set_has_avoidvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WingBinary::clear_has_avoidvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WingBinary::clear_avoidvalue() {
  avoidvalue_ = 0u;
  clear_has_avoidvalue();
}
inline ::google::protobuf::uint32 WingBinary::avoidvalue() const {
  return avoidvalue_;
}
inline void WingBinary::set_avoidvalue(::google::protobuf::uint32 value) {
  set_has_avoidvalue();
  avoidvalue_ = value;
}

// optional uint32 critValue = 11;
inline bool WingBinary::has_critvalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WingBinary::set_has_critvalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WingBinary::clear_has_critvalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WingBinary::clear_critvalue() {
  critvalue_ = 0u;
  clear_has_critvalue();
}
inline ::google::protobuf::uint32 WingBinary::critvalue() const {
  return critvalue_;
}
inline void WingBinary::set_critvalue(::google::protobuf::uint32 value) {
  set_has_critvalue();
  critvalue_ = value;
}

// optional uint32 critDefenceValue = 12;
inline bool WingBinary::has_critdefencevalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WingBinary::set_has_critdefencevalue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WingBinary::clear_has_critdefencevalue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WingBinary::clear_critdefencevalue() {
  critdefencevalue_ = 0u;
  clear_has_critdefencevalue();
}
inline ::google::protobuf::uint32 WingBinary::critdefencevalue() const {
  return critdefencevalue_;
}
inline void WingBinary::set_critdefencevalue(::google::protobuf::uint32 value) {
  set_has_critdefencevalue();
  critdefencevalue_ = value;
}

// -------------------------------------------------------------------

// VipDataBinary

// -------------------------------------------------------------------

// MatchDataBinary

// optional uint32 saveTimeInSec = 1;
inline bool MatchDataBinary::has_savetimeinsec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchDataBinary::set_has_savetimeinsec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchDataBinary::clear_has_savetimeinsec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchDataBinary::clear_savetimeinsec() {
  savetimeinsec_ = 0u;
  clear_has_savetimeinsec();
}
inline ::google::protobuf::uint32 MatchDataBinary::savetimeinsec() const {
  return savetimeinsec_;
}
inline void MatchDataBinary::set_savetimeinsec(::google::protobuf::uint32 value) {
  set_has_savetimeinsec();
  savetimeinsec_ = value;
}

// optional uint32 commonEloValue = 2;
inline bool MatchDataBinary::has_commonelovalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchDataBinary::set_has_commonelovalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchDataBinary::clear_has_commonelovalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchDataBinary::clear_commonelovalue() {
  commonelovalue_ = 0u;
  clear_has_commonelovalue();
}
inline ::google::protobuf::uint32 MatchDataBinary::commonelovalue() const {
  return commonelovalue_;
}
inline void MatchDataBinary::set_commonelovalue(::google::protobuf::uint32 value) {
  set_has_commonelovalue();
  commonelovalue_ = value;
}

// optional uint32 commonEloGroup = 3;
inline bool MatchDataBinary::has_commonelogroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchDataBinary::set_has_commonelogroup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchDataBinary::clear_has_commonelogroup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchDataBinary::clear_commonelogroup() {
  commonelogroup_ = 0u;
  clear_has_commonelogroup();
}
inline ::google::protobuf::uint32 MatchDataBinary::commonelogroup() const {
  return commonelogroup_;
}
inline void MatchDataBinary::set_commonelogroup(::google::protobuf::uint32 value) {
  set_has_commonelogroup();
  commonelogroup_ = value;
}

// optional uint32 commonMatchWinTimes = 4;
inline bool MatchDataBinary::has_commonmatchwintimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchDataBinary::set_has_commonmatchwintimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchDataBinary::clear_has_commonmatchwintimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchDataBinary::clear_commonmatchwintimes() {
  commonmatchwintimes_ = 0u;
  clear_has_commonmatchwintimes();
}
inline ::google::protobuf::uint32 MatchDataBinary::commonmatchwintimes() const {
  return commonmatchwintimes_;
}
inline void MatchDataBinary::set_commonmatchwintimes(::google::protobuf::uint32 value) {
  set_has_commonmatchwintimes();
  commonmatchwintimes_ = value;
}

// optional uint32 commonMatchLoseTimes = 5;
inline bool MatchDataBinary::has_commonmatchlosetimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchDataBinary::set_has_commonmatchlosetimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchDataBinary::clear_has_commonmatchlosetimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchDataBinary::clear_commonmatchlosetimes() {
  commonmatchlosetimes_ = 0u;
  clear_has_commonmatchlosetimes();
}
inline ::google::protobuf::uint32 MatchDataBinary::commonmatchlosetimes() const {
  return commonmatchlosetimes_;
}
inline void MatchDataBinary::set_commonmatchlosetimes(::google::protobuf::uint32 value) {
  set_has_commonmatchlosetimes();
  commonmatchlosetimes_ = value;
}

// optional uint32 commonMatchRunOffTimes = 6;
inline bool MatchDataBinary::has_commonmatchrunofftimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchDataBinary::set_has_commonmatchrunofftimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchDataBinary::clear_has_commonmatchrunofftimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchDataBinary::clear_commonmatchrunofftimes() {
  commonmatchrunofftimes_ = 0u;
  clear_has_commonmatchrunofftimes();
}
inline ::google::protobuf::uint32 MatchDataBinary::commonmatchrunofftimes() const {
  return commonmatchrunofftimes_;
}
inline void MatchDataBinary::set_commonmatchrunofftimes(::google::protobuf::uint32 value) {
  set_has_commonmatchrunofftimes();
  commonmatchrunofftimes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fProto_2fUserData_2eproto__INCLUDED
