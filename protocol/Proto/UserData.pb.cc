// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/UserData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/Proto/UserData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace user {

namespace {

const ::google::protobuf::Descriptor* MainPackageBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainPackageBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipPackageBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipPackageBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeEndEffectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeEndEffectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseTimesEffectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseTimesEffectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiscUserDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiscUserDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSerializeBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSerializeBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetDataSerializeBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetDataSerializeBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutCallbackData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutCallbackData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeLogicExtendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeLogicExtendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEquipBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEquipBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemColdData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemColdData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemColdBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemColdBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllPackageBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllPackageBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillBuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseBuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseBuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaveSkillBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaveSkillBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserUnlockWeaponData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserUnlockWeaponData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockPassiveSkillBarBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPassiveSkillBarBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealmData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealmData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamblingDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamblingDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamblingDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamblingDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamblingWillDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamblingWillDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipPosData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipPosData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipPosBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipPosBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrumpBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrumpBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrumpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrumpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrumpSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrumpSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRewardBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRewardBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSignRewardBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSignRewardBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummonRaffleBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummonRaffleBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyDrawingBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyDrawingBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyVitalityBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyVitalityBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoveryBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoveryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRelationSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRelationSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitJoinClubData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitJoinClubData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipTypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineOpenVipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineOpenVipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplDropBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplDropBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropPetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropPetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrumpTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrumpTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntensifyTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntensifyTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchDataBinary_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto() {
  protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/Proto/UserData.proto");
  GOOGLE_CHECK(file != NULL);
  MainPackageBinary_descriptor_ = file->message_type(0);
  static const int MainPackageBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPackageBinary, packageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPackageBinary, capacity_),
  };
  MainPackageBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainPackageBinary_descriptor_,
      MainPackageBinary::default_instance_,
      MainPackageBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPackageBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPackageBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainPackageBinary));
  EquipPackageBinary_descriptor_ = file->message_type(1);
  static const int EquipPackageBinary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPackageBinary, items_),
  };
  EquipPackageBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipPackageBinary_descriptor_,
      EquipPackageBinary::default_instance_,
      EquipPackageBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPackageBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPackageBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipPackageBinary));
  TimeEndEffectData_descriptor_ = file->message_type(2);
  static const int TimeEndEffectData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeEndEffectData, effecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeEndEffectData, endtimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeEndEffectData, param_),
  };
  TimeEndEffectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeEndEffectData_descriptor_,
      TimeEndEffectData::default_instance_,
      TimeEndEffectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeEndEffectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeEndEffectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeEndEffectData));
  UseTimesEffectData_descriptor_ = file->message_type(3);
  static const int UseTimesEffectData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimesEffectData, effecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimesEffectData, usetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimesEffectData, param_),
  };
  UseTimesEffectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseTimesEffectData_descriptor_,
      UseTimesEffectData::default_instance_,
      UseTimesEffectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimesEffectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseTimesEffectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseTimesEffectData));
  MiscUserDataBinary_descriptor_ = file->message_type(4);
  static const int MiscUserDataBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscUserDataBinary, logindayvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscUserDataBinary, timeendeffectdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscUserDataBinary, usetimeseffectdata_),
  };
  MiscUserDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiscUserDataBinary_descriptor_,
      MiscUserDataBinary::default_instance_,
      MiscUserDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscUserDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscUserDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiscUserDataBinary));
  LoginSerializeBinary_descriptor_ = file->message_type(5);
  static const int LoginSerializeBinary_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, packagebinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, miscbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, userdatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, rechargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, petdatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, itemcoldbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, useskillbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, haveskillbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, havepassivebinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, duplbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, equipposbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, trumpbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, rewardbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, discoverybinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, frienddatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, dupldropbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, mysteryshopbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, taskbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, matchdatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, wingbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, vipdatabinary_),
  };
  LoginSerializeBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSerializeBinary_descriptor_,
      LoginSerializeBinary::default_instance_,
      LoginSerializeBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSerializeBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSerializeBinary));
  PetDataSerializeBinary_descriptor_ = file->message_type(6);
  static const int PetDataSerializeBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDataSerializeBinary, petdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDataSerializeBinary, totalfightpower_),
  };
  PetDataSerializeBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetDataSerializeBinary_descriptor_,
      PetDataSerializeBinary::default_instance_,
      PetDataSerializeBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDataSerializeBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDataSerializeBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetDataSerializeBinary));
  UserSaveData_descriptor_ = file->message_type(7);
  static const int UserSaveData_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, packagebinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, miscbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, userdatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, rechargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, bitmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, itemcoldbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, useskillbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, haveskillbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, havepassivebinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, unlockpetdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, duplbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, equipposbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, gmlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, trumpbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, rewardbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, discoverybinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, monthcardstoptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, frienddatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, mysteryshopbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, taskbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, thoughtvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, matchdatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, wingbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, honorpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, vipdatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, clubpoints_),
  };
  UserSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSaveData_descriptor_,
      UserSaveData::default_instance_,
      UserSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSaveData));
  LogoutCallbackData_descriptor_ = file->message_type(8);
  static const int LogoutCallbackData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutCallbackData, destzoneid_),
  };
  LogoutCallbackData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutCallbackData_descriptor_,
      LogoutCallbackData::default_instance_,
      LogoutCallbackData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutCallbackData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutCallbackData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutCallbackData));
  ChangeLogicExtendData_descriptor_ = file->message_type(9);
  static const int ChangeLogicExtendData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogicExtendData, userlogindata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogicExtendData, intoroomextenddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogicExtendData, isaudience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogicExtendData, camptype_),
  };
  ChangeLogicExtendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeLogicExtendData_descriptor_,
      ChangeLogicExtendData::default_instance_,
      ChangeLogicExtendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogicExtendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogicExtendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeLogicExtendData));
  MessageSaveData_descriptor_ = file->message_type(10);
  static const int MessageSaveData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSaveData, messagedata_),
  };
  MessageSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageSaveData_descriptor_,
      MessageSaveData::default_instance_,
      MessageSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageSaveData));
  MessageData_descriptor_ = file->message_type(11);
  static const int MessageData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, info_),
  };
  MessageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageData_descriptor_,
      MessageData::default_instance_,
      MessageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageData));
  PetData_descriptor_ = file->message_type(12);
  static const int PetData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, petexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, petstarlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, petquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, petskilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, petequipbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, teampos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, propdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, petlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, seq_),
  };
  PetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetData_descriptor_,
      PetData::default_instance_,
      PetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetData));
  PropData_descriptor_ = file->message_type(13);
  static const int PropData_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, physicalattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, puredamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, physicaldefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, magicdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, critdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, critvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, appendcrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, extracrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, extracritdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, hitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, avoidvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, extrahitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, extraavoidvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, hprecoveryspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, mprecoveryspeed_),
  };
  PropData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropData_descriptor_,
      PropData::default_instance_,
      PropData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropData));
  PetEquipBinary_descriptor_ = file->message_type(14);
  static const int PetEquipBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipBinary, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipBinary, itembaseid_),
  };
  PetEquipBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEquipBinary_descriptor_,
      PetEquipBinary::default_instance_,
      PetEquipBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEquipBinary));
  AllItemData_descriptor_ = file->message_type(15);
  static const int AllItemData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllItemData, itemdata_),
  };
  AllItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllItemData_descriptor_,
      AllItemData::default_instance_,
      AllItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllItemData));
  ItemColdData_descriptor_ = file->message_type(16);
  static const int ItemColdData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemColdData, coldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemColdData, endtimeinsec_),
  };
  ItemColdData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemColdData_descriptor_,
      ItemColdData::default_instance_,
      ItemColdData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemColdData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemColdData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemColdData));
  ItemColdBinary_descriptor_ = file->message_type(17);
  static const int ItemColdBinary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemColdBinary, itemcolddata_),
  };
  ItemColdBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemColdBinary_descriptor_,
      ItemColdBinary::default_instance_,
      ItemColdBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemColdBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemColdBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemColdBinary));
  AllPackageBinary_descriptor_ = file->message_type(18);
  static const int AllPackageBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPackageBinary, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPackageBinary, mainpackagebinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPackageBinary, equippackagebinary_),
  };
  AllPackageBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllPackageBinary_descriptor_,
      AllPackageBinary::default_instance_,
      AllPackageBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPackageBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPackageBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllPackageBinary));
  SkillBuildData_descriptor_ = file->message_type(19);
  static const int SkillBuildData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildData, weaponeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildData, buildbasedata_),
  };
  SkillBuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBuildData_descriptor_,
      SkillBuildData::default_instance_,
      SkillBuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBuildData));
  BuildBaseData_descriptor_ = file->message_type(20);
  static const int BuildBaseData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBaseData, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBaseData, buildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBaseData, useskilldata_),
  };
  BuildBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildBaseData_descriptor_,
      BuildBaseData::default_instance_,
      BuildBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildBaseData));
  UseBuildData_descriptor_ = file->message_type(21);
  static const int UseBuildData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuildData, weaponeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuildData, buildid_),
  };
  UseBuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseBuildData_descriptor_,
      UseBuildData::default_instance_,
      UseBuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseBuildData));
  UseSkillData_descriptor_ = file->message_type(22);
  static const int UseSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillData, selectindex_),
  };
  UseSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillData_descriptor_,
      UseSkillData::default_instance_,
      UseSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillData));
  UseSkillBinary_descriptor_ = file->message_type(23);
  static const int UseSkillBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillBinary, useskilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillBinary, skillbuilddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillBinary, usebuilddata_),
  };
  UseSkillBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillBinary_descriptor_,
      UseSkillBinary::default_instance_,
      UseSkillBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillBinary));
  HaveSkillBinary_descriptor_ = file->message_type(24);
  static const int HaveSkillBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaveSkillBinary, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaveSkillBinary, userunlockweapondata_),
  };
  HaveSkillBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaveSkillBinary_descriptor_,
      HaveSkillBinary::default_instance_,
      HaveSkillBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaveSkillBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaveSkillBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaveSkillBinary));
  SkillData_descriptor_ = file->message_type(25);
  static const int SkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, skilllevel_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
  UserUnlockWeaponData_descriptor_ = file->message_type(26);
  static const int UserUnlockWeaponData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUnlockWeaponData, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUnlockWeaponData, unlockstate_),
  };
  UserUnlockWeaponData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserUnlockWeaponData_descriptor_,
      UserUnlockWeaponData::default_instance_,
      UserUnlockWeaponData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUnlockWeaponData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUnlockWeaponData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserUnlockWeaponData));
  UnlockPassiveSkillBarBinary_descriptor_ = file->message_type(27);
  static const int UnlockPassiveSkillBarBinary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPassiveSkillBarBinary, index_),
  };
  UnlockPassiveSkillBarBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPassiveSkillBarBinary_descriptor_,
      UnlockPassiveSkillBarBinary::default_instance_,
      UnlockPassiveSkillBarBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPassiveSkillBarBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPassiveSkillBarBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPassiveSkillBarBinary));
  DuplBinary_descriptor_ = file->message_type(28);
  static const int DuplBinary_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, dupldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, realmdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, expduplremaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, moneyduplremaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, gamblingdatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, itemduplremaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, buybacktimes_),
  };
  DuplBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplBinary_descriptor_,
      DuplBinary::default_instance_,
      DuplBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplBinary));
  DuplData_descriptor_ = file->message_type(29);
  static const int DuplData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplData, duplid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplData, duplstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplData, remaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplData, haveplaystory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplData, resetremaintimes_),
  };
  DuplData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplData_descriptor_,
      DuplData::default_instance_,
      DuplData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplData));
  RealmData_descriptor_ = file->message_type(30);
  static const int RealmData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealmData, realmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealmData, difficultylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealmData, boxid_),
  };
  RealmData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealmData_descriptor_,
      RealmData::default_instance_,
      RealmData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealmData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealmData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealmData));
  GamblingDataBinary_descriptor_ = file->message_type(31);
  static const int GamblingDataBinary_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, gamblingduplid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, gamblingduplremaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, canaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, gamblingdropitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, willexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, willmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, gamblingwilldropitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, isreward_),
  };
  GamblingDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamblingDataBinary_descriptor_,
      GamblingDataBinary::default_instance_,
      GamblingDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamblingDataBinary));
  GamblingDropItem_descriptor_ = file->message_type(32);
  static const int GamblingDropItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDropItem, itembaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDropItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDropItem, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDropItem, identify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDropItem, needbind_),
  };
  GamblingDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamblingDropItem_descriptor_,
      GamblingDropItem::default_instance_,
      GamblingDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamblingDropItem));
  GamblingWillDropItem_descriptor_ = file->message_type(33);
  static const int GamblingWillDropItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingWillDropItem, itembaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingWillDropItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingWillDropItem, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingWillDropItem, identify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingWillDropItem, needbind_),
  };
  GamblingWillDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamblingWillDropItem_descriptor_,
      GamblingWillDropItem::default_instance_,
      GamblingWillDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingWillDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamblingWillDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamblingWillDropItem));
  StoneData_descriptor_ = file->message_type(34);
  static const int StoneData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneData, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneData, stonelevel_),
  };
  StoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneData_descriptor_,
      StoneData::default_instance_,
      StoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneData));
  EquipPosData_descriptor_ = file->message_type(35);
  static const int EquipPosData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, equippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, intensifylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, stonedata_),
  };
  EquipPosData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipPosData_descriptor_,
      EquipPosData::default_instance_,
      EquipPosData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipPosData));
  EquipPosBinary_descriptor_ = file->message_type(36);
  static const int EquipPosBinary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosBinary, equipposdata_),
  };
  EquipPosBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipPosBinary_descriptor_,
      EquipPosBinary::default_instance_,
      EquipPosBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipPosBinary));
  TrumpBinary_descriptor_ = file->message_type(37);
  static const int TrumpBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpBinary, trumpdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpBinary, usetrumpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpBinary, usetrumplevel_),
  };
  TrumpBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrumpBinary_descriptor_,
      TrumpBinary::default_instance_,
      TrumpBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrumpBinary));
  TrumpData_descriptor_ = file->message_type(38);
  static const int TrumpData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpData, trumpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpData, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpData, blessingvalue_),
  };
  TrumpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrumpData_descriptor_,
      TrumpData::default_instance_,
      TrumpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrumpData));
  TrumpSkillData_descriptor_ = file->message_type(39);
  static const int TrumpSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpSkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpSkillData, skilllevel_),
  };
  TrumpSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrumpSkillData_descriptor_,
      TrumpSkillData::default_instance_,
      TrumpSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrumpSkillData));
  UserRewardBinary_descriptor_ = file->message_type(40);
  static const int UserRewardBinary_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, savedaystartinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, loginsignrewardbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, summonrafflebinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, moneydrawingbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, buyvitalitybinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, rechargedatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, signbinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, vipboxid_),
  };
  UserRewardBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRewardBinary_descriptor_,
      UserRewardBinary::default_instance_,
      UserRewardBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRewardBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRewardBinary));
  LoginSignRewardBinary_descriptor_ = file->message_type(41);
  static const int LoginSignRewardBinary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSignRewardBinary, lastsigndaystartinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSignRewardBinary, continuesigndaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSignRewardBinary, ishaveweekreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSignRewardBinary, logindaynum_),
  };
  LoginSignRewardBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSignRewardBinary_descriptor_,
      LoginSignRewardBinary::default_instance_,
      LoginSignRewardBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSignRewardBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSignRewardBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSignRewardBinary));
  SummonRaffleBinary_descriptor_ = file->message_type(42);
  static const int SummonRaffleBinary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonRaffleBinary, ishadrafflenormalfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonRaffleBinary, ishadraffleequipfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonRaffleBinary, lastrafflenormaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonRaffleBinary, normalfreeremaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonRaffleBinary, equiplastfreeraffletime_),
  };
  SummonRaffleBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummonRaffleBinary_descriptor_,
      SummonRaffleBinary::default_instance_,
      SummonRaffleBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonRaffleBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonRaffleBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummonRaffleBinary));
  MoneyDrawingBinary_descriptor_ = file->message_type(43);
  static const int MoneyDrawingBinary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDrawingBinary, moneydrawingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDrawingBinary, maxmoneydrawingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDrawingBinary, totalmoneydrawingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDrawingBinary, moneydrawingboxid_),
  };
  MoneyDrawingBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyDrawingBinary_descriptor_,
      MoneyDrawingBinary::default_instance_,
      MoneyDrawingBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDrawingBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDrawingBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyDrawingBinary));
  BuyVitalityBinary_descriptor_ = file->message_type(44);
  static const int BuyVitalityBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVitalityBinary, buyvitalitytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVitalityBinary, maxbuyvitalitytimes_),
  };
  BuyVitalityBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyVitalityBinary_descriptor_,
      BuyVitalityBinary::default_instance_,
      BuyVitalityBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVitalityBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVitalityBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyVitalityBinary));
  RechargeDataBinary_descriptor_ = file->message_type(45);
  static const int RechargeDataBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDataBinary, rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDataBinary, rechargenum_),
  };
  RechargeDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeDataBinary_descriptor_,
      RechargeDataBinary::default_instance_,
      RechargeDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeDataBinary));
  SignBinary_descriptor_ = file->message_type(46);
  static const int SignBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBinary, signtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBinary, signstate_),
  };
  SignBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignBinary_descriptor_,
      SignBinary::default_instance_,
      SignBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignBinary));
  FunctionUnlockFlag_descriptor_ = file->message_type(47);
  static const int FunctionUnlockFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockFlag, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockFlag, id_),
  };
  FunctionUnlockFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockFlag_descriptor_,
      FunctionUnlockFlag::default_instance_,
      FunctionUnlockFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockFlag));
  FunctionUnlockData_descriptor_ = file->message_type(48);
  static const int FunctionUnlockData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockData, functionvec_),
  };
  FunctionUnlockData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockData_descriptor_,
      FunctionUnlockData::default_instance_,
      FunctionUnlockData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockData));
  UserDataBinary_descriptor_ = file->message_type(49);
  static const int UserDataBinary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBinary, isunlockfunctionvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBinary, logindayvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBinary, completedguidestage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBinary, haspassnewcharguide_),
  };
  UserDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDataBinary_descriptor_,
      UserDataBinary::default_instance_,
      UserDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDataBinary));
  DiscoveryBinary_descriptor_ = file->message_type(50);
  static const int DiscoveryBinary_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, nowsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, thoughtlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, thoughtexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, discoverydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, griddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, monsterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, offlinerewarddata_),
  };
  DiscoveryBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveryBinary_descriptor_,
      DiscoveryBinary::default_instance_,
      DiscoveryBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveryBinary));
  OfflineRewardData_descriptor_ = file->message_type(51);
  static const int OfflineRewardData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRewardData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRewardData, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRewardData, needtimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRewardData, starttimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRewardData, isunlock_),
  };
  OfflineRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineRewardData_descriptor_,
      OfflineRewardData::default_instance_,
      OfflineRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineRewardData));
  DiscoveryData_descriptor_ = file->message_type(52);
  static const int DiscoveryData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryData, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryData, times_),
  };
  DiscoveryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveryData_descriptor_,
      DiscoveryData::default_instance_,
      DiscoveryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveryData));
  GridData_descriptor_ = file->message_type(53);
  static const int GridData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, timeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, opentimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, addspeedneeditemnum_),
  };
  GridData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridData_descriptor_,
      GridData::default_instance_,
      GridData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridData));
  UserRelationSaveData_descriptor_ = file->message_type(54);
  static const int UserRelationSaveData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRelationSaveData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRelationSaveData, clubdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRelationSaveData, message_),
  };
  UserRelationSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRelationSaveData_descriptor_,
      UserRelationSaveData::default_instance_,
      UserRelationSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRelationSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRelationSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRelationSaveData));
  WaitJoinClubData_descriptor_ = file->message_type(55);
  static const int WaitJoinClubData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitJoinClubData, clubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitJoinClubData, requesttimeinsec_),
  };
  WaitJoinClubData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitJoinClubData_descriptor_,
      WaitJoinClubData::default_instance_,
      WaitJoinClubData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitJoinClubData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitJoinClubData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitJoinClubData));
  ClubSaveData_descriptor_ = file->message_type(56);
  static const int ClubSaveData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, clubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, lastleaveclubtimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, clubcontributionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, clubcontributionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, waitjoinclublist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, savetimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, clubtitle_),
  };
  ClubSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSaveData_descriptor_,
      ClubSaveData::default_instance_,
      ClubSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSaveData));
  VipTypeData_descriptor_ = file->message_type(57);
  static const int VipTypeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTypeData, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTypeData, endtimeinsec_),
  };
  VipTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipTypeData_descriptor_,
      VipTypeData::default_instance_,
      VipTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipTypeData));
  OfflineOpenVipData_descriptor_ = file->message_type(58);
  static const int OfflineOpenVipData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineOpenVipData, requestusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineOpenVipData, opentimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineOpenVipData, effecttimeinday_),
  };
  OfflineOpenVipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineOpenVipData_descriptor_,
      OfflineOpenVipData::default_instance_,
      OfflineOpenVipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineOpenVipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineOpenVipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineOpenVipData));
  VipBinary_descriptor_ = file->message_type(59);
  static const int VipBinary_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, vipgrowvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, offlineopenvipdatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, vipendtimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, viptypedatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, lastcheckoverduetimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, viptype_),
  };
  VipBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipBinary_descriptor_,
      VipBinary::default_instance_,
      VipBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipBinary));
  WarDataBinary_descriptor_ = file->message_type(60);
  static const int WarDataBinary_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, losetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, pvptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, savetimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, weekwintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, weeklosetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, weekpvptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, weekkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, weekkillednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, killednum_),
  };
  WarDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarDataBinary_descriptor_,
      WarDataBinary::default_instance_,
      WarDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarDataBinary));
  FriendDataBinary_descriptor_ = file->message_type(61);
  static const int FriendDataBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDataBinary, addmeuseridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDataBinary, todaygetvitalitytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDataBinary, lastgetvitalitytimeinsec_),
  };
  FriendDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDataBinary_descriptor_,
      FriendDataBinary::default_instance_,
      FriendDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDataBinary));
  DuplDropBinary_descriptor_ = file->message_type(62);
  static const int DuplDropBinary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, duplid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, dropexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, dropmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, equipdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, petdata_),
  };
  DuplDropBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplDropBinary_descriptor_,
      DuplDropBinary::default_instance_,
      DuplDropBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplDropBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplDropBinary));
  DropItemData_descriptor_ = file->message_type(63);
  static const int DropItemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemData, itembaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemData, bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemData, num_),
  };
  DropItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropItemData_descriptor_,
      DropItemData::default_instance_,
      DropItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropItemData));
  DropEquipData_descriptor_ = file->message_type(64);
  static const int DropEquipData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropEquipData, equipbaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropEquipData, bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropEquipData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropEquipData, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropEquipData, identify_),
  };
  DropEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropEquipData_descriptor_,
      DropEquipData::default_instance_,
      DropEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropEquipData));
  DropPetData_descriptor_ = file->message_type(65);
  static const int DropPetData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropPetData, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropPetData, petexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropPetData, petuplevel_),
  };
  DropPetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropPetData_descriptor_,
      DropPetData::default_instance_,
      DropPetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropPetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropPetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropPetData));
  TaskBinary_descriptor_ = file->message_type(66);
  static const int TaskBinary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskBinary, maintaskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskBinary, equiptaskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskBinary, pettaskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskBinary, trumptaskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskBinary, intensifytaskdata_),
  };
  TaskBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskBinary_descriptor_,
      TaskBinary::default_instance_,
      TaskBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskBinary));
  MainTaskData_descriptor_ = file->message_type(67);
  static const int MainTaskData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainTaskData, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainTaskData, taskfinishnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainTaskData, isfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainTaskData, isreward_),
  };
  MainTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainTaskData_descriptor_,
      MainTaskData::default_instance_,
      MainTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainTaskData));
  EquipTaskData_descriptor_ = file->message_type(68);
  static const int EquipTaskData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipTaskData, equippos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipTaskData, equipquality_),
  };
  EquipTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipTaskData_descriptor_,
      EquipTaskData::default_instance_,
      EquipTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipTaskData));
  PetTaskData_descriptor_ = file->message_type(69);
  static const int PetTaskData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTaskData, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTaskData, petstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTaskData, petquality_),
  };
  PetTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetTaskData_descriptor_,
      PetTaskData::default_instance_,
      PetTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetTaskData));
  TrumpTaskData_descriptor_ = file->message_type(70);
  static const int TrumpTaskData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpTaskData, trumpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpTaskData, trumplevel_),
  };
  TrumpTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrumpTaskData_descriptor_,
      TrumpTaskData::default_instance_,
      TrumpTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrumpTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrumpTaskData));
  IntensifyTaskData_descriptor_ = file->message_type(71);
  static const int IntensifyTaskData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntensifyTaskData, intensifypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntensifyTaskData, intensifylevel_),
  };
  IntensifyTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntensifyTaskData_descriptor_,
      IntensifyTaskData::default_instance_,
      IntensifyTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntensifyTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntensifyTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntensifyTaskData));
  WingBinary_descriptor_ = file->message_type(72);
  static const int WingBinary_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, winglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, wingstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, usewingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, blessingvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, upstaritemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, maxblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, hitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, avoidvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, critvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, critdefencevalue_),
  };
  WingBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingBinary_descriptor_,
      WingBinary::default_instance_,
      WingBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingBinary));
  VipDataBinary_descriptor_ = file->message_type(73);
  static const int VipDataBinary_offsets_[1] = {
  };
  VipDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipDataBinary_descriptor_,
      VipDataBinary::default_instance_,
      VipDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipDataBinary));
  MatchDataBinary_descriptor_ = file->message_type(74);
  static const int MatchDataBinary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, savetimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, commonelovalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, commonelogroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, commonmatchwintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, commonmatchlosetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, commonmatchrunofftimes_),
  };
  MatchDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchDataBinary_descriptor_,
      MatchDataBinary::default_instance_,
      MatchDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchDataBinary));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fProto_2fUserData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainPackageBinary_descriptor_, &MainPackageBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipPackageBinary_descriptor_, &EquipPackageBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeEndEffectData_descriptor_, &TimeEndEffectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseTimesEffectData_descriptor_, &UseTimesEffectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiscUserDataBinary_descriptor_, &MiscUserDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSerializeBinary_descriptor_, &LoginSerializeBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetDataSerializeBinary_descriptor_, &PetDataSerializeBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSaveData_descriptor_, &UserSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutCallbackData_descriptor_, &LogoutCallbackData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeLogicExtendData_descriptor_, &ChangeLogicExtendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageSaveData_descriptor_, &MessageSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageData_descriptor_, &MessageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetData_descriptor_, &PetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropData_descriptor_, &PropData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEquipBinary_descriptor_, &PetEquipBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllItemData_descriptor_, &AllItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemColdData_descriptor_, &ItemColdData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemColdBinary_descriptor_, &ItemColdBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllPackageBinary_descriptor_, &AllPackageBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBuildData_descriptor_, &SkillBuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildBaseData_descriptor_, &BuildBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseBuildData_descriptor_, &UseBuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillData_descriptor_, &UseSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillBinary_descriptor_, &UseSkillBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaveSkillBinary_descriptor_, &HaveSkillBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserUnlockWeaponData_descriptor_, &UserUnlockWeaponData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPassiveSkillBarBinary_descriptor_, &UnlockPassiveSkillBarBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplBinary_descriptor_, &DuplBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplData_descriptor_, &DuplData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealmData_descriptor_, &RealmData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamblingDataBinary_descriptor_, &GamblingDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamblingDropItem_descriptor_, &GamblingDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamblingWillDropItem_descriptor_, &GamblingWillDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneData_descriptor_, &StoneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipPosData_descriptor_, &EquipPosData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipPosBinary_descriptor_, &EquipPosBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrumpBinary_descriptor_, &TrumpBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrumpData_descriptor_, &TrumpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrumpSkillData_descriptor_, &TrumpSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRewardBinary_descriptor_, &UserRewardBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSignRewardBinary_descriptor_, &LoginSignRewardBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummonRaffleBinary_descriptor_, &SummonRaffleBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyDrawingBinary_descriptor_, &MoneyDrawingBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyVitalityBinary_descriptor_, &BuyVitalityBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeDataBinary_descriptor_, &RechargeDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignBinary_descriptor_, &SignBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockFlag_descriptor_, &FunctionUnlockFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockData_descriptor_, &FunctionUnlockData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDataBinary_descriptor_, &UserDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveryBinary_descriptor_, &DiscoveryBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineRewardData_descriptor_, &OfflineRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveryData_descriptor_, &DiscoveryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridData_descriptor_, &GridData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRelationSaveData_descriptor_, &UserRelationSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitJoinClubData_descriptor_, &WaitJoinClubData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSaveData_descriptor_, &ClubSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipTypeData_descriptor_, &VipTypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineOpenVipData_descriptor_, &OfflineOpenVipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipBinary_descriptor_, &VipBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarDataBinary_descriptor_, &WarDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDataBinary_descriptor_, &FriendDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplDropBinary_descriptor_, &DuplDropBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropItemData_descriptor_, &DropItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropEquipData_descriptor_, &DropEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropPetData_descriptor_, &DropPetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskBinary_descriptor_, &TaskBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainTaskData_descriptor_, &MainTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipTaskData_descriptor_, &EquipTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetTaskData_descriptor_, &PetTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrumpTaskData_descriptor_, &TrumpTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntensifyTaskData_descriptor_, &IntensifyTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingBinary_descriptor_, &WingBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipDataBinary_descriptor_, &VipDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchDataBinary_descriptor_, &MatchDataBinary::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto() {
  delete MainPackageBinary::default_instance_;
  delete MainPackageBinary_reflection_;
  delete EquipPackageBinary::default_instance_;
  delete EquipPackageBinary_reflection_;
  delete TimeEndEffectData::default_instance_;
  delete TimeEndEffectData_reflection_;
  delete UseTimesEffectData::default_instance_;
  delete UseTimesEffectData_reflection_;
  delete MiscUserDataBinary::default_instance_;
  delete MiscUserDataBinary_reflection_;
  delete LoginSerializeBinary::default_instance_;
  delete LoginSerializeBinary_reflection_;
  delete PetDataSerializeBinary::default_instance_;
  delete PetDataSerializeBinary_reflection_;
  delete UserSaveData::default_instance_;
  delete UserSaveData_reflection_;
  delete LogoutCallbackData::default_instance_;
  delete LogoutCallbackData_reflection_;
  delete ChangeLogicExtendData::default_instance_;
  delete ChangeLogicExtendData_reflection_;
  delete MessageSaveData::default_instance_;
  delete MessageSaveData_reflection_;
  delete MessageData::default_instance_;
  delete MessageData_reflection_;
  delete PetData::default_instance_;
  delete PetData_reflection_;
  delete PropData::default_instance_;
  delete PropData_reflection_;
  delete PetEquipBinary::default_instance_;
  delete PetEquipBinary_reflection_;
  delete AllItemData::default_instance_;
  delete AllItemData_reflection_;
  delete ItemColdData::default_instance_;
  delete ItemColdData_reflection_;
  delete ItemColdBinary::default_instance_;
  delete ItemColdBinary_reflection_;
  delete AllPackageBinary::default_instance_;
  delete AllPackageBinary_reflection_;
  delete SkillBuildData::default_instance_;
  delete SkillBuildData_reflection_;
  delete BuildBaseData::default_instance_;
  delete BuildBaseData_reflection_;
  delete UseBuildData::default_instance_;
  delete UseBuildData_reflection_;
  delete UseSkillData::default_instance_;
  delete UseSkillData_reflection_;
  delete UseSkillBinary::default_instance_;
  delete UseSkillBinary_reflection_;
  delete HaveSkillBinary::default_instance_;
  delete HaveSkillBinary_reflection_;
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
  delete UserUnlockWeaponData::default_instance_;
  delete UserUnlockWeaponData_reflection_;
  delete UnlockPassiveSkillBarBinary::default_instance_;
  delete UnlockPassiveSkillBarBinary_reflection_;
  delete DuplBinary::default_instance_;
  delete DuplBinary_reflection_;
  delete DuplData::default_instance_;
  delete DuplData_reflection_;
  delete RealmData::default_instance_;
  delete RealmData_reflection_;
  delete GamblingDataBinary::default_instance_;
  delete GamblingDataBinary_reflection_;
  delete GamblingDropItem::default_instance_;
  delete GamblingDropItem_reflection_;
  delete GamblingWillDropItem::default_instance_;
  delete GamblingWillDropItem_reflection_;
  delete StoneData::default_instance_;
  delete StoneData_reflection_;
  delete EquipPosData::default_instance_;
  delete EquipPosData_reflection_;
  delete EquipPosBinary::default_instance_;
  delete EquipPosBinary_reflection_;
  delete TrumpBinary::default_instance_;
  delete TrumpBinary_reflection_;
  delete TrumpData::default_instance_;
  delete TrumpData_reflection_;
  delete TrumpSkillData::default_instance_;
  delete TrumpSkillData_reflection_;
  delete UserRewardBinary::default_instance_;
  delete UserRewardBinary_reflection_;
  delete LoginSignRewardBinary::default_instance_;
  delete LoginSignRewardBinary_reflection_;
  delete SummonRaffleBinary::default_instance_;
  delete SummonRaffleBinary_reflection_;
  delete MoneyDrawingBinary::default_instance_;
  delete MoneyDrawingBinary_reflection_;
  delete BuyVitalityBinary::default_instance_;
  delete BuyVitalityBinary_reflection_;
  delete RechargeDataBinary::default_instance_;
  delete RechargeDataBinary_reflection_;
  delete SignBinary::default_instance_;
  delete SignBinary_reflection_;
  delete FunctionUnlockFlag::default_instance_;
  delete FunctionUnlockFlag_reflection_;
  delete FunctionUnlockData::default_instance_;
  delete FunctionUnlockData_reflection_;
  delete UserDataBinary::default_instance_;
  delete UserDataBinary_reflection_;
  delete DiscoveryBinary::default_instance_;
  delete DiscoveryBinary_reflection_;
  delete OfflineRewardData::default_instance_;
  delete OfflineRewardData_reflection_;
  delete DiscoveryData::default_instance_;
  delete DiscoveryData_reflection_;
  delete GridData::default_instance_;
  delete GridData_reflection_;
  delete UserRelationSaveData::default_instance_;
  delete UserRelationSaveData_reflection_;
  delete WaitJoinClubData::default_instance_;
  delete WaitJoinClubData_reflection_;
  delete ClubSaveData::default_instance_;
  delete ClubSaveData_reflection_;
  delete VipTypeData::default_instance_;
  delete VipTypeData_reflection_;
  delete OfflineOpenVipData::default_instance_;
  delete OfflineOpenVipData_reflection_;
  delete VipBinary::default_instance_;
  delete VipBinary_reflection_;
  delete WarDataBinary::default_instance_;
  delete WarDataBinary_reflection_;
  delete FriendDataBinary::default_instance_;
  delete FriendDataBinary_reflection_;
  delete DuplDropBinary::default_instance_;
  delete DuplDropBinary_reflection_;
  delete DropItemData::default_instance_;
  delete DropItemData_reflection_;
  delete DropEquipData::default_instance_;
  delete DropEquipData_reflection_;
  delete DropPetData::default_instance_;
  delete DropPetData_reflection_;
  delete TaskBinary::default_instance_;
  delete TaskBinary_reflection_;
  delete MainTaskData::default_instance_;
  delete MainTaskData_reflection_;
  delete EquipTaskData::default_instance_;
  delete EquipTaskData_reflection_;
  delete PetTaskData::default_instance_;
  delete PetTaskData_reflection_;
  delete TrumpTaskData::default_instance_;
  delete TrumpTaskData_reflection_;
  delete IntensifyTaskData::default_instance_;
  delete IntensifyTaskData_reflection_;
  delete WingBinary::default_instance_;
  delete WingBinary_reflection_;
  delete VipDataBinary::default_instance_;
  delete VipDataBinary_reflection_;
  delete MatchDataBinary::default_instance_;
  delete MatchDataBinary_reflection_;
}

void protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::item::protobuf_AddDesc_protocol_2fProto_2fItemData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035protocol/Proto/UserData.proto\022\rprotoco"
    "l.user\032\035protocol/Proto/ItemData.proto\"8\n"
    "\021MainPackageBinary\022\021\n\tpackageID\030\001 \002(\r\022\020\n"
    "\010capacity\030\002 \002(\r\">\n\022EquipPackageBinary\022(\n"
    "\005items\030\001 \003(\0132\031.protocol.item.ItemBinary\""
    "L\n\021TimeEndEffectData\022\022\n\neffectType\030\001 \002(\r"
    "\022\024\n\014endTimeInSec\030\002 \002(\r\022\r\n\005param\030\003 \001(\r\"I\n"
    "\022UseTimesEffectData\022\022\n\neffectType\030\001 \002(\r\022"
    "\020\n\010useTimes\030\002 \002(\r\022\r\n\005param\030\003 \001(\r\"\245\001\n\022Mis"
    "cUserDataBinary\022\023\n\013loginDayVec\030\001 \003(\r\022;\n\021"
    "timeEndEffectData\030\003 \003(\0132 .protocol.user."
    "TimeEndEffectData\022=\n\022useTimesEffectData\030"
    "\004 \003(\0132!.protocol.user.UseTimesEffectData"
    "\"\200\004\n\024LoginSerializeBinary\022\025\n\rpackageBina"
    "ry\030\001 \001(\014\022\022\n\nmiscBinary\030\002 \001(\014\022\026\n\016userData"
    "Binary\030\003 \001(\014\022\025\n\rrechargeMoney\030\004 \001(\r\022\025\n\rp"
    "etDataBinary\030\005 \001(\014\022\026\n\016itemColdBinary\030\006 \001"
    "(\014\022\026\n\016useSkillBinary\030\007 \001(\014\022\027\n\017haveSkillB"
    "inary\030\010 \001(\014\022\031\n\021havePassiveBinary\030\t \001(\014\022\022"
    "\n\nduplBinary\030\n \001(\014\022\026\n\016equipPosBinary\030\013 \001"
    "(\014\022\023\n\013trumpBinary\030\014 \001(\014\022\024\n\014rewardBinary\030"
    "\r \001(\014\022\027\n\017discoveryBinary\030\016 \001(\014\022\030\n\020friend"
    "DataBinary\030\017 \001(\014\022\026\n\016duplDropBinary\030\020 \001(\014"
    "\022\031\n\021mysteryShopBinary\030\021 \001(\014\022\022\n\ntaskBinar"
    "y\030\022 \001(\014\022\027\n\017matchDataBinary\030\023 \001(\014\022\022\n\nwing"
    "Binary\030\024 \001(\014\022\025\n\rvipDataBinary\030\025 \001(\014\"Z\n\026P"
    "etDataSerializeBinary\022\'\n\007petData\030\001 \003(\0132\026"
    ".protocol.user.PetData\022\027\n\017totalFightPowe"
    "r\030\002 \002(\r\"\215\006\n\014UserSaveData\022\025\n\rpackageBinar"
    "y\030\001 \001(\014\022\022\n\nmiscBinary\030\002 \001(\014\022\026\n\016userDataB"
    "inary\030\003 \001(\014\022\025\n\rrechargeMoney\030\004 \001(\r\022\016\n\006cu"
    "rExp\030\005 \001(\r\022\r\n\005level\030\007 \001(\r\022\017\n\007bitMask\030\010 \001"
    "(\r\022\020\n\010vitality\030\t \001(\r\022\022\n\nskillPoint\030\n \001(\r"
    "\022\026\n\016itemColdBinary\030\013 \001(\014\022\016\n\006silver\030\014 \001(\r"
    "\022\017\n\007diamond\030\r \001(\r\022\023\n\013bindDiamond\030\016 \001(\r\022\026"
    "\n\016useSkillBinary\030\017 \001(\014\022\027\n\017haveSkillBinar"
    "y\030\020 \001(\014\022\031\n\021havePassiveBinary\030\021 \001(\014\022\025\n\run"
    "lockPetData\030\022 \001(\014\022\022\n\nduplBinary\030\023 \001(\014\022\026\n"
    "\016equipPosBinary\030\024 \001(\014\022\017\n\007gmLevel\030\025 \001(\r\022\023"
    "\n\013trumpBinary\030\026 \001(\014\022\024\n\014rewardBinary\030\027 \001("
    "\014\022\027\n\017discoveryBinary\030\030 \001(\014\022\031\n\021monthCardS"
    "topTime\030\031 \001(\r\022\030\n\020friendDataBinary\030\032 \001(\014\022"
    "\031\n\021mysteryShopBinary\030\033 \001(\014\022\022\n\ntaskBinary"
    "\030\034 \001(\014\022\024\n\014thoughtValue\030\035 \001(\r\022\022\n\nfightPow"
    "er\030\036 \001(\r\022\027\n\017matchDataBinary\030\037 \001(\014\022\022\n\nwin"
    "gBinary\030  \001(\014\022\023\n\013honorPoints\030+ \001(\r\022\016\n\006vi"
    "pExp\030, \001(\r\022\020\n\010vipLevel\030- \001(\r\022\025\n\rvipDataB"
    "inary\030. \001(\014\022\022\n\nclubPoints\030/ \001(\r\"(\n\022Logou"
    "tCallbackData\022\022\n\ndestZoneID\030\001 \001(\r\"p\n\025Cha"
    "ngeLogicExtendData\022\025\n\ruserLoginData\030\001 \001("
    "\014\022\032\n\022intoRoomExtendData\030\002 \001(\014\022\022\n\nisAudie"
    "nce\030\003 \001(\010\022\020\n\010campType\030\004 \001(\r\"B\n\017MessageSa"
    "veData\022/\n\013messageData\030\001 \003(\0132\032.protocol.u"
    "ser.MessageData\".\n\013MessageData\022\021\n\tmessag"
    "eID\030\001 \002(\r\022\014\n\004info\030\002 \001(\t\"\224\002\n\007PetData\022\r\n\005p"
    "etID\030\001 \002(\r\022\016\n\006petExp\030\002 \002(\r\022\024\n\014petStarLev"
    "el\030\003 \002(\r\022\022\n\npetQuality\030\004 \002(\r\022.\n\014petSkill"
    "Data\030\005 \003(\0132\030.protocol.user.SkillData\0225\n\016"
    "petEquipBinary\030\006 \003(\0132\035.protocol.user.Pet"
    "EquipBinary\022\017\n\007teamPos\030\007 \002(\r\022)\n\010propData"
    "\030\010 \002(\0132\027.protocol.user.PropData\022\020\n\010petLe"
    "vel\030\t \002(\r\022\013\n\003seq\030\n \002(\r\"\252\003\n\010PropData\022\r\n\005m"
    "axHP\030\001 \002(\r\022\r\n\005maxMP\030\002 \002(\r\022\026\n\016physicalAtt"
    "ack\030\003 \002(\r\022\023\n\013magicAttack\030\004 \002(\r\022\022\n\npureDa"
    "mage\030\005 \002(\r\022\027\n\017physicalDefence\030\006 \002(\r\022\024\n\014m"
    "agicDefence\030\007 \002(\r\022\014\n\004crit\030\010 \002(\r\022\023\n\013critD"
    "efence\030\t \002(\r\022\021\n\tcritValue\030\n \002(\r\022\022\n\nappen"
    "dCrit\030\013 \002(\r\022\021\n\textraCrit\030\014 \002(\r\022\030\n\020extraC"
    "ritDefence\030\r \002(\r\022\020\n\010hitValue\030\016 \002(\r\022\022\n\nav"
    "oidValue\030\017 \002(\r\022\025\n\rextraHitValue\030\020 \002(\r\022\027\n"
    "\017extraAvoidValue\030\021 \002(\r\022\021\n\tmoveSpeed\030\022 \002("
    "\r\022\027\n\017hpRecoverySpeed\030\023 \002(\r\022\027\n\017mpRecovery"
    "Speed\030\024 \002(\r\"1\n\016PetEquipBinary\022\013\n\003pos\030\001 \002"
    "(\r\022\022\n\nitemBaseID\030\002 \002(\r\"\037\n\013AllItemData\022\020\n"
    "\010itemData\030\001 \003(\014\"6\n\014ItemColdData\022\020\n\010coldT"
    "ype\030\001 \002(\r\022\024\n\014endTimeInSec\030\002 \002(\r\"C\n\016ItemC"
    "oldBinary\0221\n\014itemColdData\030\001 \003(\0132\033.protoc"
    "ol.user.ItemColdData\"\270\001\n\020AllPackageBinar"
    "y\022(\n\005items\030\001 \003(\0132\031.protocol.item.ItemBin"
    "ary\022;\n\021mainPackageBinary\030\002 \001(\0132 .protoco"
    "l.user.MainPackageBinary\022=\n\022equipPackage"
    "Binary\030\003 \001(\0132!.protocol.user.EquipPackag"
    "eBinary\"X\n\016SkillBuildData\022\021\n\tweaponeID\030\001"
    " \001(\r\0223\n\rbuildBaseData\030\002 \003(\0132\034.protocol.u"
    "ser.BuildBaseData\"f\n\rBuildBaseData\022\017\n\007bu"
    "ildID\030\001 \001(\r\022\021\n\tbuildName\030\002 \001(\t\0221\n\014useSki"
    "llData\030\003 \003(\0132\033.protocol.user.UseSkillDat"
    "a\"2\n\014UseBuildData\022\021\n\tweaponeID\030\001 \001(\r\022\017\n\007"
    "buildID\030\002 \001(\r\"4\n\014UseSkillData\022\017\n\007skillID"
    "\030\001 \001(\r\022\023\n\013selectIndex\030\002 \001(\r\"\255\001\n\016UseSkill"
    "Binary\0221\n\014useSkillData\030\001 \003(\0132\033.protocol."
    "user.UseSkillData\0225\n\016skillBuilddata\030\002 \003("
    "\0132\035.protocol.user.SkillBuildData\0221\n\014useB"
    "uildData\030\003 \003(\0132\033.protocol.user.UseBuildD"
    "ata\"\201\001\n\017HaveSkillBinary\022+\n\tskillData\030\001 \003"
    "(\0132\030.protocol.user.SkillData\022A\n\024userUnlo"
    "ckWeaponData\030\002 \003(\0132#.protocol.user.UserU"
    "nlockWeaponData\"0\n\tSkillData\022\017\n\007skillID\030"
    "\001 \002(\r\022\022\n\nskillLevel\030\002 \002(\r\"=\n\024UserUnlockW"
    "eaponData\022\020\n\010weaponID\030\001 \002(\r\022\023\n\013unlockSta"
    "te\030\002 \002(\r\",\n\033UnlockPassiveSkillBarBinary\022"
    "\r\n\005index\030\001 \003(\r\"\220\002\n\nDuplBinary\022)\n\010dupldat"
    "a\030\001 \003(\0132\027.protocol.user.DuplData\022+\n\treal"
    "mData\030\002 \003(\0132\030.protocol.user.RealmData\022\032\n"
    "\022ExpDuplRemainTimes\030\003 \002(\r\022\034\n\024MoneyDuplRe"
    "mainTimes\030\004 \002(\r\022=\n\022gamblingDataBinary\030\005 "
    "\002(\0132!.protocol.user.GamblingDataBinary\022\033"
    "\n\023ItemDuplRemainTimes\030\006 \002(\r\022\024\n\014buyBackTi"
    "mes\030\007 \001(\r\"r\n\010DuplData\022\016\n\006duplID\030\001 \002(\r\022\020\n"
    "\010duplStar\030\002 \002(\r\022\023\n\013remainTimes\030\003 \002(\r\022\025\n\r"
    "havePlayStory\030\004 \002(\r\022\030\n\020resetRemainTimes\030"
    "\005 \002(\r\"D\n\tRealmData\022\017\n\007realmID\030\001 \001(\r\022\027\n\017d"
    "ifficultyLevel\030\002 \001(\r\022\r\n\005boxID\030\003 \003(\r\"\243\002\n\022"
    "GamblingDataBinary\022\026\n\016gamblingDuplID\030\001 \001"
    "(\r\022\037\n\027gamblingDuplRemainTimes\030\002 \001(\r\022\020\n\010c"
    "anAward\030\003 \001(\010\0229\n\020gamblingDropItem\030\004 \003(\0132"
    "\037.protocol.user.GamblingDropItem\022\017\n\007will"
    "Exp\030\005 \001(\r\022\021\n\twillMoney\030\006 \001(\r\022A\n\024gambling"
    "WillDropItem\030\007 \003(\0132#.protocol.user.Gambl"
    "ingWillDropItem\022\016\n\006bossID\030\010 \001(\r\022\020\n\010isRew"
    "ard\030\t \001(\r\"h\n\020GamblingDropItem\022\022\n\nitemBas"
    "eID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\022\017\n\007quality\030\003 \001(\r\022"
    "\020\n\010identify\030\004 \001(\r\022\020\n\010needBind\030\005 \001(\r\"l\n\024G"
    "amblingWillDropItem\022\022\n\nitemBaseID\030\001 \001(\r\022"
    "\013\n\003num\030\002 \001(\r\022\017\n\007quality\030\003 \001(\r\022\020\n\010identif"
    "y\030\004 \001(\r\022\020\n\010needBind\030\005 \001(\r\"0\n\tStoneData\022\017"
    "\n\007stoneID\030\001 \002(\r\022\022\n\nstoneLevel\030\002 \002(\r\"e\n\014E"
    "quipPosData\022\020\n\010equipPos\030\001 \002(\r\022\026\n\016intensi"
    "fyLevel\030\002 \002(\r\022+\n\tstoneData\030\003 \003(\0132\030.proto"
    "col.user.StoneData\"C\n\016EquipPosBinary\0221\n\014"
    "equipPosData\030\001 \003(\0132\033.protocol.user.Equip"
    "PosData\"e\n\013TrumpBinary\022+\n\ttrumpData\030\001 \003("
    "\0132\030.protocol.user.TrumpData\022\022\n\nuseTrumpI"
    "D\030\002 \002(\r\022\025\n\ruseTrumpLevel\030\003 \002(\r\"t\n\tTrumpD"
    "ata\022\017\n\007trumpID\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\0220\n\ts"
    "killData\030\003 \003(\0132\035.protocol.user.TrumpSkil"
    "lData\022\025\n\rblessingValue\030\004 \002(\r\"5\n\016TrumpSki"
    "llData\022\017\n\007skillID\030\001 \002(\r\022\022\n\nskillLevel\030\002 "
    "\002(\r\"\255\003\n\020UserRewardBinary\022\031\n\021saveDayStart"
    "InSec\030\001 \002(\r\022C\n\025loginSignRewardBinary\030\002 \001"
    "(\0132$.protocol.user.LoginSignRewardBinary"
    "\022=\n\022summonRaffleBinary\030\003 \002(\0132!.protocol."
    "user.SummonRaffleBinary\022=\n\022moneyDrawingB"
    "inary\030\004 \002(\0132!.protocol.user.MoneyDrawing"
    "Binary\022;\n\021BuyVitalityBinary\030\005 \002(\0132 .prot"
    "ocol.user.BuyVitalityBinary\022=\n\022RechargeD"
    "ataBinary\030\006 \003(\0132!.protocol.user.Recharge"
    "DataBinary\022-\n\nsignBinary\030\007 \001(\0132\031.protoco"
    "l.user.SignBinary\022\020\n\010vipBoxID\030\010 \003(\r\"\201\001\n\025"
    "LoginSignRewardBinary\022\035\n\025lastSignDayStar"
    "tInSec\030\001 \002(\r\022\032\n\022continueSignDayNum\030\002 \002(\r"
    "\022\030\n\020isHaveWeekReward\030\003 \001(\010\022\023\n\013loginDayNu"
    "m\030\004 \002(\r\"\261\001\n\022SummonRaffleBinary\022\036\n\026isHadR"
    "affleNormalFirst\030\001 \002(\010\022\035\n\025isHadRaffleEqu"
    "ipFirst\030\002 \002(\010\022\034\n\024lastRaffleNormalTime\030\003 "
    "\002(\004\022\035\n\025normalFreeRemainTimes\030\004 \002(\r\022\037\n\027eq"
    "uipLastFreeRaffleTime\030\005 \002(\004\"\205\001\n\022MoneyDra"
    "wingBinary\022\030\n\020moneyDrawingTime\030\001 \002(\r\022\033\n\023"
    "maxMoneyDrawingTime\030\002 \002(\r\022\035\n\025totalMoneyD"
    "rawingTime\030\003 \002(\r\022\031\n\021moneyDrawingboxID\030\004 "
    "\003(\r\"J\n\021BuyVitalityBinary\022\030\n\020buyVitalityT"
    "imes\030\001 \002(\r\022\033\n\023maxBuyVitalityTimes\030\002 \002(\r\""
    "=\n\022RechargeDataBinary\022\022\n\nrechargeID\030\001 \001("
    "\r\022\023\n\013rechargeNum\030\002 \001(\r\"2\n\nSignBinary\022\021\n\t"
    "signTimes\030\001 \001(\r\022\021\n\tsignState\030\002 \001(\r\".\n\022Fu"
    "nctionUnlockFlag\022\014\n\004type\030\001 \002(\r\022\n\n\002id\030\002 \002"
    "(\r\"L\n\022FunctionUnlockData\0226\n\013functionVec\030"
    "\001 \003(\0132!.protocol.user.FunctionUnlockFlag"
    "\"|\n\016UserDataBinary\022\033\n\023isUnlockFunctionVe"
    "c\030\001 \001(\014\022\023\n\013loginDayVec\030\002 \003(\r\022\033\n\023complete"
    "dGuideStage\030\003 \002(\r\022\033\n\023hasPassNewCharGuide"
    "\030\004 \001(\010\"\236\002\n\017DiscoveryBinary\022\022\n\nnowSceneID"
    "\030\001 \002(\r\022\014\n\004posX\030\002 \002(\r\022\014\n\004posY\030\003 \002(\r\022\024\n\014th"
    "oughtLevel\030\004 \002(\r\022\022\n\nthoughtExp\030\005 \002(\r\0223\n\r"
    "discoveryData\030\007 \003(\0132\034.protocol.user.Disc"
    "overyData\022)\n\010gridData\030\010 \003(\0132\027.protocol.u"
    "ser.GridData\022\024\n\014monsterLevel\030\t \002(\r\022;\n\021of"
    "flineRewardData\030\n \003(\0132 .protocol.user.Of"
    "flineRewardData\"t\n\021OfflineRewardData\022\r\n\005"
    "index\030\001 \002(\r\022\017\n\007sceneID\030\002 \002(\r\022\025\n\rneedTime"
    "InSec\030\003 \002(\r\022\026\n\016startTimeInSec\030\004 \002(\r\022\020\n\010i"
    "sUnlock\030\005 \002(\r\"/\n\rDiscoveryData\022\017\n\007sceneI"
    "D\030\001 \002(\r\022\r\n\005times\030\002 \002(\r\"\252\001\n\010GridData\022\r\n\005o"
    "bjID\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\022\016\n\006isBind\030\003 \002(\r\022"
    "\021\n\ttimeInSec\030\004 \002(\r\022\014\n\004type\030\005 \002(\r\022\r\n\005inde"
    "x\030\006 \002(\r\022\016\n\006isOpen\030\007 \002(\010\022\025\n\ropenTimeInSec"
    "\030\010 \002(\010\022\033\n\023addSpeedNeedItemNum\030\t \002(\r\"I\n\024U"
    "serRelationSaveData\022\016\n\006charID\030\001 \001(\r\022\020\n\010c"
    "lubData\030\002 \001(\014\022\017\n\007message\030\003 \001(\014\"<\n\020WaitJo"
    "inClubData\022\016\n\006clubID\030\001 \002(\r\022\030\n\020requestTim"
    "eInSec\030\002 \002(\r\"\341\001\n\014ClubSaveData\022\016\n\006clubID\030"
    "\001 \001(\r\022\036\n\026lastLeaveClubTimeInSec\030\002 \001(\r\022\035\n"
    "\025clubContributionLevel\030\003 \001(\r\022\035\n\025clubCont"
    "ributionValue\030\004 \001(\r\0229\n\020waitJoinClubList\030"
    "\005 \003(\0132\037.protocol.user.WaitJoinClubData\022\025"
    "\n\rsaveTimeInSec\030\006 \001(\r\022\021\n\tclubTitle\030\007 \001(\r"
    "\"4\n\013VipTypeData\022\017\n\007vipType\030\001 \002(\r\022\024\n\014endT"
    "imeInSec\030\002 \002(\r\"]\n\022OfflineOpenVipData\022\027\n\017"
    "requestUserName\030\001 \002(\t\022\025\n\ropenTimeInSec\030\002"
    " \002(\r\022\027\n\017effectTimeInDay\030\003 \002(\r\"\370\001\n\tVipBin"
    "ary\022\020\n\010vipLevel\030\001 \001(\r\022\024\n\014vipGrowValue\030\002 "
    "\001(\r\022A\n\026offlineOpenVipDataList\030\003 \003(\0132!.pr"
    "otocol.user.OfflineOpenVipData\022\027\n\017vipEnd"
    "TimeInSec\030\004 \001(\r\0223\n\017vipTypeDataList\030\005 \003(\013"
    "2\032.protocol.user.VipTypeData\022!\n\031lastChec"
    "kOverdueTimeInSec\030\006 \001(\r\022\017\n\007vipType\030\007 \001(\r"
    "\"\360\001\n\rWarDataBinary\022\020\n\010winTimes\030\001 \001(\r\022\021\n\t"
    "loseTimes\030\002 \001(\r\022\020\n\010pvpTimes\030\003 \001(\r\022\025\n\rsav"
    "eTimeInSec\030\004 \001(\r\022\024\n\014weekWinTimes\030\005 \001(\r\022\025"
    "\n\rweekLoseTimes\030\006 \001(\r\022\024\n\014weekPvpTimes\030\007 "
    "\001(\r\022\023\n\013weekKillNum\030\010 \001(\r\022\025\n\rweekKilledNu"
    "m\030\t \001(\r\022\017\n\007killNum\030\n \001(\r\022\021\n\tkilledNum\030\013 "
    "\001(\r\"l\n\020FriendDataBinary\022\027\n\017addMeUserIDLi"
    "st\030\001 \003(\r\022\035\n\025todayGetVitalityTimes\030\002 \002(\r\022"
    " \n\030lastGetVitalityTimeInSec\030\003 \002(\r\"\321\001\n\016Du"
    "plDropBinary\022\016\n\006duplID\030\001 \002(\r\022\017\n\007dropExp\030"
    "\002 \002(\r\022\021\n\tdropMoney\030\003 \002(\r\022-\n\010itemData\030\004 \003"
    "(\0132\033.protocol.user.DropItemData\022/\n\tequip"
    "Data\030\005 \003(\0132\034.protocol.user.DropEquipData"
    "\022+\n\007petData\030\006 \003(\0132\032.protocol.user.DropPe"
    "tData\"A\n\014DropItemData\022\022\n\nitemBaseID\030\001 \002("
    "\r\022\020\n\010bindType\030\002 \002(\r\022\013\n\003num\030\003 \002(\r\"f\n\rDrop"
    "EquipData\022\023\n\013equipBaseID\030\001 \002(\r\022\020\n\010bindTy"
    "pe\030\002 \002(\r\022\013\n\003num\030\003 \002(\r\022\017\n\007quality\030\004 \002(\r\022\020"
    "\n\010identify\030\005 \002(\r\"@\n\013DropPetData\022\r\n\005petID"
    "\030\001 \002(\r\022\016\n\006petExp\030\002 \002(\r\022\022\n\npetUpLevel\030\003 \002"
    "(\r\"\227\002\n\nTaskBinary\0221\n\014mainTaskData\030\001 \003(\0132"
    "\033.protocol.user.MainTaskData\0223\n\requipTas"
    "kData\030\002 \003(\0132\034.protocol.user.EquipTaskDat"
    "a\022/\n\013petTaskData\030\003 \003(\0132\032.protocol.user.P"
    "etTaskData\0223\n\rtrumpTaskData\030\004 \003(\0132\034.prot"
    "ocol.user.TrumpTaskData\022;\n\021intensifyTask"
    "Data\030\005 \003(\0132 .protocol.user.IntensifyTask"
    "Data\"Y\n\014MainTaskData\022\016\n\006taskID\030\001 \002(\r\022\025\n\r"
    "taskFinishNum\030\002 \002(\r\022\020\n\010isFinish\030\003 \002(\r\022\020\n"
    "\010isReward\030\004 \002(\r\"7\n\rEquipTaskData\022\020\n\010equi"
    "pPos\030\001 \001(\r\022\024\n\014equipQuality\030\002 \001(\r\"A\n\013PetT"
    "askData\022\r\n\005petID\030\001 \001(\r\022\017\n\007petStar\030\002 \001(\r\022"
    "\022\n\npetQuality\030\003 \001(\r\"4\n\rTrumpTaskData\022\017\n\007"
    "trumpID\030\001 \001(\r\022\022\n\ntrumpLevel\030\002 \001(\r\"A\n\021Int"
    "ensifyTaskData\022\024\n\014intensifyPos\030\001 \001(\r\022\026\n\016"
    "intensifyLevel\030\002 \001(\r\"\370\001\n\nWingBinary\022\021\n\tw"
    "ingLevel\030\001 \001(\r\022\021\n\twingState\030\002 \001(\r\022\021\n\tuse"
    "WingID\030\003 \001(\r\022\025\n\rblessingValue\030\004 \001(\r\022\024\n\014u"
    "pStarItemID\030\005 \001(\r\022\016\n\006attack\030\006 \001(\r\022\017\n\007def"
    "ence\030\007 \001(\r\022\020\n\010maxBlood\030\010 \001(\r\022\020\n\010hitValue"
    "\030\t \001(\r\022\022\n\navoidValue\030\n \001(\r\022\021\n\tcritValue\030"
    "\013 \001(\r\022\030\n\020critDefenceValue\030\014 \001(\r\"\017\n\rVipDa"
    "taBinary\"\263\001\n\017MatchDataBinary\022\025\n\rsaveTime"
    "InSec\030\001 \001(\r\022\026\n\016commonEloValue\030\002 \001(\r\022\026\n\016c"
    "ommonEloGroup\030\003 \001(\r\022\033\n\023commonMatchWinTim"
    "es\030\004 \001(\r\022\034\n\024commonMatchLoseTimes\030\005 \001(\r\022\036"
    "\n\026commonMatchRunOffTimes\030\006 \001(\r", 10110);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/Proto/UserData.proto", &protobuf_RegisterTypes);
  MainPackageBinary::default_instance_ = new MainPackageBinary();
  EquipPackageBinary::default_instance_ = new EquipPackageBinary();
  TimeEndEffectData::default_instance_ = new TimeEndEffectData();
  UseTimesEffectData::default_instance_ = new UseTimesEffectData();
  MiscUserDataBinary::default_instance_ = new MiscUserDataBinary();
  LoginSerializeBinary::default_instance_ = new LoginSerializeBinary();
  PetDataSerializeBinary::default_instance_ = new PetDataSerializeBinary();
  UserSaveData::default_instance_ = new UserSaveData();
  LogoutCallbackData::default_instance_ = new LogoutCallbackData();
  ChangeLogicExtendData::default_instance_ = new ChangeLogicExtendData();
  MessageSaveData::default_instance_ = new MessageSaveData();
  MessageData::default_instance_ = new MessageData();
  PetData::default_instance_ = new PetData();
  PropData::default_instance_ = new PropData();
  PetEquipBinary::default_instance_ = new PetEquipBinary();
  AllItemData::default_instance_ = new AllItemData();
  ItemColdData::default_instance_ = new ItemColdData();
  ItemColdBinary::default_instance_ = new ItemColdBinary();
  AllPackageBinary::default_instance_ = new AllPackageBinary();
  SkillBuildData::default_instance_ = new SkillBuildData();
  BuildBaseData::default_instance_ = new BuildBaseData();
  UseBuildData::default_instance_ = new UseBuildData();
  UseSkillData::default_instance_ = new UseSkillData();
  UseSkillBinary::default_instance_ = new UseSkillBinary();
  HaveSkillBinary::default_instance_ = new HaveSkillBinary();
  SkillData::default_instance_ = new SkillData();
  UserUnlockWeaponData::default_instance_ = new UserUnlockWeaponData();
  UnlockPassiveSkillBarBinary::default_instance_ = new UnlockPassiveSkillBarBinary();
  DuplBinary::default_instance_ = new DuplBinary();
  DuplData::default_instance_ = new DuplData();
  RealmData::default_instance_ = new RealmData();
  GamblingDataBinary::default_instance_ = new GamblingDataBinary();
  GamblingDropItem::default_instance_ = new GamblingDropItem();
  GamblingWillDropItem::default_instance_ = new GamblingWillDropItem();
  StoneData::default_instance_ = new StoneData();
  EquipPosData::default_instance_ = new EquipPosData();
  EquipPosBinary::default_instance_ = new EquipPosBinary();
  TrumpBinary::default_instance_ = new TrumpBinary();
  TrumpData::default_instance_ = new TrumpData();
  TrumpSkillData::default_instance_ = new TrumpSkillData();
  UserRewardBinary::default_instance_ = new UserRewardBinary();
  LoginSignRewardBinary::default_instance_ = new LoginSignRewardBinary();
  SummonRaffleBinary::default_instance_ = new SummonRaffleBinary();
  MoneyDrawingBinary::default_instance_ = new MoneyDrawingBinary();
  BuyVitalityBinary::default_instance_ = new BuyVitalityBinary();
  RechargeDataBinary::default_instance_ = new RechargeDataBinary();
  SignBinary::default_instance_ = new SignBinary();
  FunctionUnlockFlag::default_instance_ = new FunctionUnlockFlag();
  FunctionUnlockData::default_instance_ = new FunctionUnlockData();
  UserDataBinary::default_instance_ = new UserDataBinary();
  DiscoveryBinary::default_instance_ = new DiscoveryBinary();
  OfflineRewardData::default_instance_ = new OfflineRewardData();
  DiscoveryData::default_instance_ = new DiscoveryData();
  GridData::default_instance_ = new GridData();
  UserRelationSaveData::default_instance_ = new UserRelationSaveData();
  WaitJoinClubData::default_instance_ = new WaitJoinClubData();
  ClubSaveData::default_instance_ = new ClubSaveData();
  VipTypeData::default_instance_ = new VipTypeData();
  OfflineOpenVipData::default_instance_ = new OfflineOpenVipData();
  VipBinary::default_instance_ = new VipBinary();
  WarDataBinary::default_instance_ = new WarDataBinary();
  FriendDataBinary::default_instance_ = new FriendDataBinary();
  DuplDropBinary::default_instance_ = new DuplDropBinary();
  DropItemData::default_instance_ = new DropItemData();
  DropEquipData::default_instance_ = new DropEquipData();
  DropPetData::default_instance_ = new DropPetData();
  TaskBinary::default_instance_ = new TaskBinary();
  MainTaskData::default_instance_ = new MainTaskData();
  EquipTaskData::default_instance_ = new EquipTaskData();
  PetTaskData::default_instance_ = new PetTaskData();
  TrumpTaskData::default_instance_ = new TrumpTaskData();
  IntensifyTaskData::default_instance_ = new IntensifyTaskData();
  WingBinary::default_instance_ = new WingBinary();
  VipDataBinary::default_instance_ = new VipDataBinary();
  MatchDataBinary::default_instance_ = new MatchDataBinary();
  MainPackageBinary::default_instance_->InitAsDefaultInstance();
  EquipPackageBinary::default_instance_->InitAsDefaultInstance();
  TimeEndEffectData::default_instance_->InitAsDefaultInstance();
  UseTimesEffectData::default_instance_->InitAsDefaultInstance();
  MiscUserDataBinary::default_instance_->InitAsDefaultInstance();
  LoginSerializeBinary::default_instance_->InitAsDefaultInstance();
  PetDataSerializeBinary::default_instance_->InitAsDefaultInstance();
  UserSaveData::default_instance_->InitAsDefaultInstance();
  LogoutCallbackData::default_instance_->InitAsDefaultInstance();
  ChangeLogicExtendData::default_instance_->InitAsDefaultInstance();
  MessageSaveData::default_instance_->InitAsDefaultInstance();
  MessageData::default_instance_->InitAsDefaultInstance();
  PetData::default_instance_->InitAsDefaultInstance();
  PropData::default_instance_->InitAsDefaultInstance();
  PetEquipBinary::default_instance_->InitAsDefaultInstance();
  AllItemData::default_instance_->InitAsDefaultInstance();
  ItemColdData::default_instance_->InitAsDefaultInstance();
  ItemColdBinary::default_instance_->InitAsDefaultInstance();
  AllPackageBinary::default_instance_->InitAsDefaultInstance();
  SkillBuildData::default_instance_->InitAsDefaultInstance();
  BuildBaseData::default_instance_->InitAsDefaultInstance();
  UseBuildData::default_instance_->InitAsDefaultInstance();
  UseSkillData::default_instance_->InitAsDefaultInstance();
  UseSkillBinary::default_instance_->InitAsDefaultInstance();
  HaveSkillBinary::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  UserUnlockWeaponData::default_instance_->InitAsDefaultInstance();
  UnlockPassiveSkillBarBinary::default_instance_->InitAsDefaultInstance();
  DuplBinary::default_instance_->InitAsDefaultInstance();
  DuplData::default_instance_->InitAsDefaultInstance();
  RealmData::default_instance_->InitAsDefaultInstance();
  GamblingDataBinary::default_instance_->InitAsDefaultInstance();
  GamblingDropItem::default_instance_->InitAsDefaultInstance();
  GamblingWillDropItem::default_instance_->InitAsDefaultInstance();
  StoneData::default_instance_->InitAsDefaultInstance();
  EquipPosData::default_instance_->InitAsDefaultInstance();
  EquipPosBinary::default_instance_->InitAsDefaultInstance();
  TrumpBinary::default_instance_->InitAsDefaultInstance();
  TrumpData::default_instance_->InitAsDefaultInstance();
  TrumpSkillData::default_instance_->InitAsDefaultInstance();
  UserRewardBinary::default_instance_->InitAsDefaultInstance();
  LoginSignRewardBinary::default_instance_->InitAsDefaultInstance();
  SummonRaffleBinary::default_instance_->InitAsDefaultInstance();
  MoneyDrawingBinary::default_instance_->InitAsDefaultInstance();
  BuyVitalityBinary::default_instance_->InitAsDefaultInstance();
  RechargeDataBinary::default_instance_->InitAsDefaultInstance();
  SignBinary::default_instance_->InitAsDefaultInstance();
  FunctionUnlockFlag::default_instance_->InitAsDefaultInstance();
  FunctionUnlockData::default_instance_->InitAsDefaultInstance();
  UserDataBinary::default_instance_->InitAsDefaultInstance();
  DiscoveryBinary::default_instance_->InitAsDefaultInstance();
  OfflineRewardData::default_instance_->InitAsDefaultInstance();
  DiscoveryData::default_instance_->InitAsDefaultInstance();
  GridData::default_instance_->InitAsDefaultInstance();
  UserRelationSaveData::default_instance_->InitAsDefaultInstance();
  WaitJoinClubData::default_instance_->InitAsDefaultInstance();
  ClubSaveData::default_instance_->InitAsDefaultInstance();
  VipTypeData::default_instance_->InitAsDefaultInstance();
  OfflineOpenVipData::default_instance_->InitAsDefaultInstance();
  VipBinary::default_instance_->InitAsDefaultInstance();
  WarDataBinary::default_instance_->InitAsDefaultInstance();
  FriendDataBinary::default_instance_->InitAsDefaultInstance();
  DuplDropBinary::default_instance_->InitAsDefaultInstance();
  DropItemData::default_instance_->InitAsDefaultInstance();
  DropEquipData::default_instance_->InitAsDefaultInstance();
  DropPetData::default_instance_->InitAsDefaultInstance();
  TaskBinary::default_instance_->InitAsDefaultInstance();
  MainTaskData::default_instance_->InitAsDefaultInstance();
  EquipTaskData::default_instance_->InitAsDefaultInstance();
  PetTaskData::default_instance_->InitAsDefaultInstance();
  TrumpTaskData::default_instance_->InitAsDefaultInstance();
  IntensifyTaskData::default_instance_->InitAsDefaultInstance();
  WingBinary::default_instance_->InitAsDefaultInstance();
  VipDataBinary::default_instance_->InitAsDefaultInstance();
  MatchDataBinary::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fProto_2fUserData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fProto_2fUserData_2eproto {
  StaticDescriptorInitializer_protocol_2fProto_2fUserData_2eproto() {
    protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  }
} static_descriptor_initializer_protocol_2fProto_2fUserData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MainPackageBinary::kPackageIDFieldNumber;
const int MainPackageBinary::kCapacityFieldNumber;
#endif  // !_MSC_VER

MainPackageBinary::MainPackageBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MainPackageBinary::InitAsDefaultInstance() {
}

MainPackageBinary::MainPackageBinary(const MainPackageBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MainPackageBinary::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  capacity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainPackageBinary::~MainPackageBinary() {
  SharedDtor();
}

void MainPackageBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainPackageBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainPackageBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainPackageBinary_descriptor_;
}

const MainPackageBinary& MainPackageBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

MainPackageBinary* MainPackageBinary::default_instance_ = NULL;

MainPackageBinary* MainPackageBinary::New() const {
  return new MainPackageBinary;
}

void MainPackageBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    capacity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainPackageBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 packageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }

      // required uint32 capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MainPackageBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 packageID = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // required uint32 capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->capacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MainPackageBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 packageID = 1;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // required uint32 capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->capacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MainPackageBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 packageID = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // required uint32 capacity = 2;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainPackageBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainPackageBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainPackageBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainPackageBinary::MergeFrom(const MainPackageBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainPackageBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainPackageBinary::CopyFrom(const MainPackageBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainPackageBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MainPackageBinary::Swap(MainPackageBinary* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(capacity_, other->capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainPackageBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainPackageBinary_descriptor_;
  metadata.reflection = MainPackageBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipPackageBinary::kItemsFieldNumber;
#endif  // !_MSC_VER

EquipPackageBinary::EquipPackageBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipPackageBinary::InitAsDefaultInstance() {
}

EquipPackageBinary::EquipPackageBinary(const EquipPackageBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipPackageBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipPackageBinary::~EquipPackageBinary() {
  SharedDtor();
}

void EquipPackageBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipPackageBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipPackageBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPackageBinary_descriptor_;
}

const EquipPackageBinary& EquipPackageBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

EquipPackageBinary* EquipPackageBinary::default_instance_ = NULL;

EquipPackageBinary* EquipPackageBinary::New() const {
  return new EquipPackageBinary;
}

void EquipPackageBinary::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipPackageBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.item.ItemBinary items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipPackageBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.item.ItemBinary items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipPackageBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.item.ItemBinary items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipPackageBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.item.ItemBinary items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipPackageBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipPackageBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipPackageBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipPackageBinary::MergeFrom(const EquipPackageBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipPackageBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipPackageBinary::CopyFrom(const EquipPackageBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipPackageBinary::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void EquipPackageBinary::Swap(EquipPackageBinary* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipPackageBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipPackageBinary_descriptor_;
  metadata.reflection = EquipPackageBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeEndEffectData::kEffectTypeFieldNumber;
const int TimeEndEffectData::kEndTimeInSecFieldNumber;
const int TimeEndEffectData::kParamFieldNumber;
#endif  // !_MSC_VER

TimeEndEffectData::TimeEndEffectData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeEndEffectData::InitAsDefaultInstance() {
}

TimeEndEffectData::TimeEndEffectData(const TimeEndEffectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeEndEffectData::SharedCtor() {
  _cached_size_ = 0;
  effecttype_ = 0u;
  endtimeinsec_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeEndEffectData::~TimeEndEffectData() {
  SharedDtor();
}

void TimeEndEffectData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeEndEffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeEndEffectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeEndEffectData_descriptor_;
}

const TimeEndEffectData& TimeEndEffectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

TimeEndEffectData* TimeEndEffectData::default_instance_ = NULL;

TimeEndEffectData* TimeEndEffectData::New() const {
  return new TimeEndEffectData;
}

void TimeEndEffectData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effecttype_ = 0u;
    endtimeinsec_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeEndEffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 effectType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTimeInSec;
        break;
      }

      // required uint32 endTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtimeinsec_)));
          set_has_endtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeEndEffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 effectType = 1;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effecttype(), output);
  }

  // required uint32 endTimeInSec = 2;
  if (has_endtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtimeinsec(), output);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeEndEffectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 effectType = 1;
  if (has_effecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effecttype(), target);
  }

  // required uint32 endTimeInSec = 2;
  if (has_endtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtimeinsec(), target);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeEndEffectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 effectType = 1;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effecttype());
    }

    // required uint32 endTimeInSec = 2;
    if (has_endtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtimeinsec());
    }

    // optional uint32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeEndEffectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeEndEffectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeEndEffectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeEndEffectData::MergeFrom(const TimeEndEffectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_endtimeinsec()) {
      set_endtimeinsec(from.endtimeinsec());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeEndEffectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeEndEffectData::CopyFrom(const TimeEndEffectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeEndEffectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeEndEffectData::Swap(TimeEndEffectData* other) {
  if (other != this) {
    std::swap(effecttype_, other->effecttype_);
    std::swap(endtimeinsec_, other->endtimeinsec_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeEndEffectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeEndEffectData_descriptor_;
  metadata.reflection = TimeEndEffectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseTimesEffectData::kEffectTypeFieldNumber;
const int UseTimesEffectData::kUseTimesFieldNumber;
const int UseTimesEffectData::kParamFieldNumber;
#endif  // !_MSC_VER

UseTimesEffectData::UseTimesEffectData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseTimesEffectData::InitAsDefaultInstance() {
}

UseTimesEffectData::UseTimesEffectData(const UseTimesEffectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseTimesEffectData::SharedCtor() {
  _cached_size_ = 0;
  effecttype_ = 0u;
  usetimes_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseTimesEffectData::~UseTimesEffectData() {
  SharedDtor();
}

void UseTimesEffectData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseTimesEffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseTimesEffectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseTimesEffectData_descriptor_;
}

const UseTimesEffectData& UseTimesEffectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UseTimesEffectData* UseTimesEffectData::default_instance_ = NULL;

UseTimesEffectData* UseTimesEffectData::New() const {
  return new UseTimesEffectData;
}

void UseTimesEffectData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effecttype_ = 0u;
    usetimes_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseTimesEffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 effectType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useTimes;
        break;
      }

      // required uint32 useTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetimes_)));
          set_has_usetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseTimesEffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 effectType = 1;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effecttype(), output);
  }

  // required uint32 useTimes = 2;
  if (has_usetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usetimes(), output);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseTimesEffectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 effectType = 1;
  if (has_effecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effecttype(), target);
  }

  // required uint32 useTimes = 2;
  if (has_usetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usetimes(), target);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseTimesEffectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 effectType = 1;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effecttype());
    }

    // required uint32 useTimes = 2;
    if (has_usetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetimes());
    }

    // optional uint32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseTimesEffectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseTimesEffectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseTimesEffectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseTimesEffectData::MergeFrom(const UseTimesEffectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_usetimes()) {
      set_usetimes(from.usetimes());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseTimesEffectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseTimesEffectData::CopyFrom(const UseTimesEffectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseTimesEffectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UseTimesEffectData::Swap(UseTimesEffectData* other) {
  if (other != this) {
    std::swap(effecttype_, other->effecttype_);
    std::swap(usetimes_, other->usetimes_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseTimesEffectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseTimesEffectData_descriptor_;
  metadata.reflection = UseTimesEffectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiscUserDataBinary::kLoginDayVecFieldNumber;
const int MiscUserDataBinary::kTimeEndEffectDataFieldNumber;
const int MiscUserDataBinary::kUseTimesEffectDataFieldNumber;
#endif  // !_MSC_VER

MiscUserDataBinary::MiscUserDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiscUserDataBinary::InitAsDefaultInstance() {
}

MiscUserDataBinary::MiscUserDataBinary(const MiscUserDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiscUserDataBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiscUserDataBinary::~MiscUserDataBinary() {
  SharedDtor();
}

void MiscUserDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MiscUserDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiscUserDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiscUserDataBinary_descriptor_;
}

const MiscUserDataBinary& MiscUserDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

MiscUserDataBinary* MiscUserDataBinary::default_instance_ = NULL;

MiscUserDataBinary* MiscUserDataBinary::New() const {
  return new MiscUserDataBinary;
}

void MiscUserDataBinary::Clear() {
  logindayvec_.Clear();
  timeendeffectdata_.Clear();
  usetimeseffectdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiscUserDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 loginDayVec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginDayVec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_logindayvec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_logindayvec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_loginDayVec;
        if (input->ExpectTag(26)) goto parse_timeEndEffectData;
        break;
      }

      // repeated .protocol.user.TimeEndEffectData timeEndEffectData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeEndEffectData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timeendeffectdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timeEndEffectData;
        if (input->ExpectTag(34)) goto parse_useTimesEffectData;
        break;
      }

      // repeated .protocol.user.UseTimesEffectData useTimesEffectData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useTimesEffectData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usetimeseffectdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_useTimesEffectData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiscUserDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 loginDayVec = 1;
  for (int i = 0; i < this->logindayvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->logindayvec(i), output);
  }

  // repeated .protocol.user.TimeEndEffectData timeEndEffectData = 3;
  for (int i = 0; i < this->timeendeffectdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timeendeffectdata(i), output);
  }

  // repeated .protocol.user.UseTimesEffectData useTimesEffectData = 4;
  for (int i = 0; i < this->usetimeseffectdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usetimeseffectdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiscUserDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 loginDayVec = 1;
  for (int i = 0; i < this->logindayvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->logindayvec(i), target);
  }

  // repeated .protocol.user.TimeEndEffectData timeEndEffectData = 3;
  for (int i = 0; i < this->timeendeffectdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timeendeffectdata(i), target);
  }

  // repeated .protocol.user.UseTimesEffectData useTimesEffectData = 4;
  for (int i = 0; i < this->usetimeseffectdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usetimeseffectdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiscUserDataBinary::ByteSize() const {
  int total_size = 0;

  // repeated uint32 loginDayVec = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->logindayvec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->logindayvec(i));
    }
    total_size += 1 * this->logindayvec_size() + data_size;
  }

  // repeated .protocol.user.TimeEndEffectData timeEndEffectData = 3;
  total_size += 1 * this->timeendeffectdata_size();
  for (int i = 0; i < this->timeendeffectdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timeendeffectdata(i));
  }

  // repeated .protocol.user.UseTimesEffectData useTimesEffectData = 4;
  total_size += 1 * this->usetimeseffectdata_size();
  for (int i = 0; i < this->usetimeseffectdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usetimeseffectdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiscUserDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiscUserDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiscUserDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiscUserDataBinary::MergeFrom(const MiscUserDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  logindayvec_.MergeFrom(from.logindayvec_);
  timeendeffectdata_.MergeFrom(from.timeendeffectdata_);
  usetimeseffectdata_.MergeFrom(from.usetimeseffectdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiscUserDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiscUserDataBinary::CopyFrom(const MiscUserDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiscUserDataBinary::IsInitialized() const {

  for (int i = 0; i < timeendeffectdata_size(); i++) {
    if (!this->timeendeffectdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < usetimeseffectdata_size(); i++) {
    if (!this->usetimeseffectdata(i).IsInitialized()) return false;
  }
  return true;
}

void MiscUserDataBinary::Swap(MiscUserDataBinary* other) {
  if (other != this) {
    logindayvec_.Swap(&other->logindayvec_);
    timeendeffectdata_.Swap(&other->timeendeffectdata_);
    usetimeseffectdata_.Swap(&other->usetimeseffectdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiscUserDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiscUserDataBinary_descriptor_;
  metadata.reflection = MiscUserDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSerializeBinary::kPackageBinaryFieldNumber;
const int LoginSerializeBinary::kMiscBinaryFieldNumber;
const int LoginSerializeBinary::kUserDataBinaryFieldNumber;
const int LoginSerializeBinary::kRechargeMoneyFieldNumber;
const int LoginSerializeBinary::kPetDataBinaryFieldNumber;
const int LoginSerializeBinary::kItemColdBinaryFieldNumber;
const int LoginSerializeBinary::kUseSkillBinaryFieldNumber;
const int LoginSerializeBinary::kHaveSkillBinaryFieldNumber;
const int LoginSerializeBinary::kHavePassiveBinaryFieldNumber;
const int LoginSerializeBinary::kDuplBinaryFieldNumber;
const int LoginSerializeBinary::kEquipPosBinaryFieldNumber;
const int LoginSerializeBinary::kTrumpBinaryFieldNumber;
const int LoginSerializeBinary::kRewardBinaryFieldNumber;
const int LoginSerializeBinary::kDiscoveryBinaryFieldNumber;
const int LoginSerializeBinary::kFriendDataBinaryFieldNumber;
const int LoginSerializeBinary::kDuplDropBinaryFieldNumber;
const int LoginSerializeBinary::kMysteryShopBinaryFieldNumber;
const int LoginSerializeBinary::kTaskBinaryFieldNumber;
const int LoginSerializeBinary::kMatchDataBinaryFieldNumber;
const int LoginSerializeBinary::kWingBinaryFieldNumber;
const int LoginSerializeBinary::kVipDataBinaryFieldNumber;
#endif  // !_MSC_VER

LoginSerializeBinary::LoginSerializeBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSerializeBinary::InitAsDefaultInstance() {
}

LoginSerializeBinary::LoginSerializeBinary(const LoginSerializeBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSerializeBinary::SharedCtor() {
  _cached_size_ = 0;
  packagebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  miscbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rechargemoney_ = 0u;
  petdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemcoldbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haveskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  havepassivebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duplbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipposbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trumpbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rewardbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  discoverybinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frienddatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dupldropbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysteryshopbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wingbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vipdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSerializeBinary::~LoginSerializeBinary() {
  SharedDtor();
}

void LoginSerializeBinary::SharedDtor() {
  if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete packagebinary_;
  }
  if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete miscbinary_;
  }
  if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete userdatabinary_;
  }
  if (petdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete petdatabinary_;
  }
  if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete itemcoldbinary_;
  }
  if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete useskillbinary_;
  }
  if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete haveskillbinary_;
  }
  if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete havepassivebinary_;
  }
  if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete duplbinary_;
  }
  if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete equipposbinary_;
  }
  if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete trumpbinary_;
  }
  if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardbinary_;
  }
  if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
    delete discoverybinary_;
  }
  if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete frienddatabinary_;
  }
  if (dupldropbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete dupldropbinary_;
  }
  if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete mysteryshopbinary_;
  }
  if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete taskbinary_;
  }
  if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete matchdatabinary_;
  }
  if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete wingbinary_;
  }
  if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete vipdatabinary_;
  }
  if (this != default_instance_) {
  }
}

void LoginSerializeBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSerializeBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSerializeBinary_descriptor_;
}

const LoginSerializeBinary& LoginSerializeBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

LoginSerializeBinary* LoginSerializeBinary::default_instance_ = NULL;

LoginSerializeBinary* LoginSerializeBinary::New() const {
  return new LoginSerializeBinary;
}

void LoginSerializeBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_packagebinary()) {
      if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
        packagebinary_->clear();
      }
    }
    if (has_miscbinary()) {
      if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
        miscbinary_->clear();
      }
    }
    if (has_userdatabinary()) {
      if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
        userdatabinary_->clear();
      }
    }
    rechargemoney_ = 0u;
    if (has_petdatabinary()) {
      if (petdatabinary_ != &::google::protobuf::internal::kEmptyString) {
        petdatabinary_->clear();
      }
    }
    if (has_itemcoldbinary()) {
      if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
        itemcoldbinary_->clear();
      }
    }
    if (has_useskillbinary()) {
      if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
        useskillbinary_->clear();
      }
    }
    if (has_haveskillbinary()) {
      if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
        haveskillbinary_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_havepassivebinary()) {
      if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
        havepassivebinary_->clear();
      }
    }
    if (has_duplbinary()) {
      if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
        duplbinary_->clear();
      }
    }
    if (has_equipposbinary()) {
      if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
        equipposbinary_->clear();
      }
    }
    if (has_trumpbinary()) {
      if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
        trumpbinary_->clear();
      }
    }
    if (has_rewardbinary()) {
      if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
        rewardbinary_->clear();
      }
    }
    if (has_discoverybinary()) {
      if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
        discoverybinary_->clear();
      }
    }
    if (has_frienddatabinary()) {
      if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
        frienddatabinary_->clear();
      }
    }
    if (has_dupldropbinary()) {
      if (dupldropbinary_ != &::google::protobuf::internal::kEmptyString) {
        dupldropbinary_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_mysteryshopbinary()) {
      if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
        mysteryshopbinary_->clear();
      }
    }
    if (has_taskbinary()) {
      if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
        taskbinary_->clear();
      }
    }
    if (has_matchdatabinary()) {
      if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
        matchdatabinary_->clear();
      }
    }
    if (has_wingbinary()) {
      if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
        wingbinary_->clear();
      }
    }
    if (has_vipdatabinary()) {
      if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
        vipdatabinary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSerializeBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes packageBinary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packagebinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_miscBinary;
        break;
      }

      // optional bytes miscBinary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miscBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_miscbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userDataBinary;
        break;
      }

      // optional bytes userDataBinary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rechargeMoney;
        break;
      }

      // optional uint32 rechargeMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargemoney_)));
          set_has_rechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_petDataBinary;
        break;
      }

      // optional bytes petDataBinary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_petdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemColdBinary;
        break;
      }

      // optional bytes itemColdBinary = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemColdBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemcoldbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_useSkillBinary;
        break;
      }

      // optional bytes useSkillBinary = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useSkillBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_useskillbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_haveSkillBinary;
        break;
      }

      // optional bytes haveSkillBinary = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_haveSkillBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_haveskillbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_havePassiveBinary;
        break;
      }

      // optional bytes havePassiveBinary = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_havePassiveBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_havepassivebinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_duplBinary;
        break;
      }

      // optional bytes duplBinary = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_duplbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_equipPosBinary;
        break;
      }

      // optional bytes equipPosBinary = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipPosBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_equipposbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_trumpBinary;
        break;
      }

      // optional bytes trumpBinary = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trumpBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trumpbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_rewardBinary;
        break;
      }

      // optional bytes rewardBinary = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rewardbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_discoveryBinary;
        break;
      }

      // optional bytes discoveryBinary = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discoveryBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_discoverybinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_friendDataBinary;
        break;
      }

      // optional bytes friendDataBinary = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frienddatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_duplDropBinary;
        break;
      }

      // optional bytes duplDropBinary = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplDropBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dupldropbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_mysteryShopBinary;
        break;
      }

      // optional bytes mysteryShopBinary = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysteryShopBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mysteryshopbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_taskBinary;
        break;
      }

      // optional bytes taskBinary = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_matchDataBinary;
        break;
      }

      // optional bytes matchDataBinary = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_matchdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_wingBinary;
        break;
      }

      // optional bytes wingBinary = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wingbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_vipDataBinary;
        break;
      }

      // optional bytes vipDataBinary = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vipdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSerializeBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes packageBinary = 1;
  if (has_packagebinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->packagebinary(), output);
  }

  // optional bytes miscBinary = 2;
  if (has_miscbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->miscbinary(), output);
  }

  // optional bytes userDataBinary = 3;
  if (has_userdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->userdatabinary(), output);
  }

  // optional uint32 rechargeMoney = 4;
  if (has_rechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rechargemoney(), output);
  }

  // optional bytes petDataBinary = 5;
  if (has_petdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->petdatabinary(), output);
  }

  // optional bytes itemColdBinary = 6;
  if (has_itemcoldbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->itemcoldbinary(), output);
  }

  // optional bytes useSkillBinary = 7;
  if (has_useskillbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->useskillbinary(), output);
  }

  // optional bytes haveSkillBinary = 8;
  if (has_haveskillbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->haveskillbinary(), output);
  }

  // optional bytes havePassiveBinary = 9;
  if (has_havepassivebinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->havepassivebinary(), output);
  }

  // optional bytes duplBinary = 10;
  if (has_duplbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->duplbinary(), output);
  }

  // optional bytes equipPosBinary = 11;
  if (has_equipposbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->equipposbinary(), output);
  }

  // optional bytes trumpBinary = 12;
  if (has_trumpbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->trumpbinary(), output);
  }

  // optional bytes rewardBinary = 13;
  if (has_rewardbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->rewardbinary(), output);
  }

  // optional bytes discoveryBinary = 14;
  if (has_discoverybinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->discoverybinary(), output);
  }

  // optional bytes friendDataBinary = 15;
  if (has_frienddatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->frienddatabinary(), output);
  }

  // optional bytes duplDropBinary = 16;
  if (has_dupldropbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->dupldropbinary(), output);
  }

  // optional bytes mysteryShopBinary = 17;
  if (has_mysteryshopbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->mysteryshopbinary(), output);
  }

  // optional bytes taskBinary = 18;
  if (has_taskbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->taskbinary(), output);
  }

  // optional bytes matchDataBinary = 19;
  if (has_matchdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->matchdatabinary(), output);
  }

  // optional bytes wingBinary = 20;
  if (has_wingbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->wingbinary(), output);
  }

  // optional bytes vipDataBinary = 21;
  if (has_vipdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      21, this->vipdatabinary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSerializeBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes packageBinary = 1;
  if (has_packagebinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->packagebinary(), target);
  }

  // optional bytes miscBinary = 2;
  if (has_miscbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->miscbinary(), target);
  }

  // optional bytes userDataBinary = 3;
  if (has_userdatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->userdatabinary(), target);
  }

  // optional uint32 rechargeMoney = 4;
  if (has_rechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rechargemoney(), target);
  }

  // optional bytes petDataBinary = 5;
  if (has_petdatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->petdatabinary(), target);
  }

  // optional bytes itemColdBinary = 6;
  if (has_itemcoldbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->itemcoldbinary(), target);
  }

  // optional bytes useSkillBinary = 7;
  if (has_useskillbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->useskillbinary(), target);
  }

  // optional bytes haveSkillBinary = 8;
  if (has_haveskillbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->haveskillbinary(), target);
  }

  // optional bytes havePassiveBinary = 9;
  if (has_havepassivebinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->havepassivebinary(), target);
  }

  // optional bytes duplBinary = 10;
  if (has_duplbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->duplbinary(), target);
  }

  // optional bytes equipPosBinary = 11;
  if (has_equipposbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->equipposbinary(), target);
  }

  // optional bytes trumpBinary = 12;
  if (has_trumpbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->trumpbinary(), target);
  }

  // optional bytes rewardBinary = 13;
  if (has_rewardbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->rewardbinary(), target);
  }

  // optional bytes discoveryBinary = 14;
  if (has_discoverybinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->discoverybinary(), target);
  }

  // optional bytes friendDataBinary = 15;
  if (has_frienddatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->frienddatabinary(), target);
  }

  // optional bytes duplDropBinary = 16;
  if (has_dupldropbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->dupldropbinary(), target);
  }

  // optional bytes mysteryShopBinary = 17;
  if (has_mysteryshopbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->mysteryshopbinary(), target);
  }

  // optional bytes taskBinary = 18;
  if (has_taskbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->taskbinary(), target);
  }

  // optional bytes matchDataBinary = 19;
  if (has_matchdatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->matchdatabinary(), target);
  }

  // optional bytes wingBinary = 20;
  if (has_wingbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->wingbinary(), target);
  }

  // optional bytes vipDataBinary = 21;
  if (has_vipdatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->vipdatabinary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSerializeBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes packageBinary = 1;
    if (has_packagebinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packagebinary());
    }

    // optional bytes miscBinary = 2;
    if (has_miscbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->miscbinary());
    }

    // optional bytes userDataBinary = 3;
    if (has_userdatabinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdatabinary());
    }

    // optional uint32 rechargeMoney = 4;
    if (has_rechargemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargemoney());
    }

    // optional bytes petDataBinary = 5;
    if (has_petdatabinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->petdatabinary());
    }

    // optional bytes itemColdBinary = 6;
    if (has_itemcoldbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itemcoldbinary());
    }

    // optional bytes useSkillBinary = 7;
    if (has_useskillbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->useskillbinary());
    }

    // optional bytes haveSkillBinary = 8;
    if (has_haveskillbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->haveskillbinary());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes havePassiveBinary = 9;
    if (has_havepassivebinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->havepassivebinary());
    }

    // optional bytes duplBinary = 10;
    if (has_duplbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->duplbinary());
    }

    // optional bytes equipPosBinary = 11;
    if (has_equipposbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->equipposbinary());
    }

    // optional bytes trumpBinary = 12;
    if (has_trumpbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trumpbinary());
    }

    // optional bytes rewardBinary = 13;
    if (has_rewardbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rewardbinary());
    }

    // optional bytes discoveryBinary = 14;
    if (has_discoverybinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->discoverybinary());
    }

    // optional bytes friendDataBinary = 15;
    if (has_frienddatabinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frienddatabinary());
    }

    // optional bytes duplDropBinary = 16;
    if (has_dupldropbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dupldropbinary());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes mysteryShopBinary = 17;
    if (has_mysteryshopbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mysteryshopbinary());
    }

    // optional bytes taskBinary = 18;
    if (has_taskbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->taskbinary());
    }

    // optional bytes matchDataBinary = 19;
    if (has_matchdatabinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->matchdatabinary());
    }

    // optional bytes wingBinary = 20;
    if (has_wingbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wingbinary());
    }

    // optional bytes vipDataBinary = 21;
    if (has_vipdatabinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vipdatabinary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSerializeBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSerializeBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSerializeBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSerializeBinary::MergeFrom(const LoginSerializeBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packagebinary()) {
      set_packagebinary(from.packagebinary());
    }
    if (from.has_miscbinary()) {
      set_miscbinary(from.miscbinary());
    }
    if (from.has_userdatabinary()) {
      set_userdatabinary(from.userdatabinary());
    }
    if (from.has_rechargemoney()) {
      set_rechargemoney(from.rechargemoney());
    }
    if (from.has_petdatabinary()) {
      set_petdatabinary(from.petdatabinary());
    }
    if (from.has_itemcoldbinary()) {
      set_itemcoldbinary(from.itemcoldbinary());
    }
    if (from.has_useskillbinary()) {
      set_useskillbinary(from.useskillbinary());
    }
    if (from.has_haveskillbinary()) {
      set_haveskillbinary(from.haveskillbinary());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_havepassivebinary()) {
      set_havepassivebinary(from.havepassivebinary());
    }
    if (from.has_duplbinary()) {
      set_duplbinary(from.duplbinary());
    }
    if (from.has_equipposbinary()) {
      set_equipposbinary(from.equipposbinary());
    }
    if (from.has_trumpbinary()) {
      set_trumpbinary(from.trumpbinary());
    }
    if (from.has_rewardbinary()) {
      set_rewardbinary(from.rewardbinary());
    }
    if (from.has_discoverybinary()) {
      set_discoverybinary(from.discoverybinary());
    }
    if (from.has_frienddatabinary()) {
      set_frienddatabinary(from.frienddatabinary());
    }
    if (from.has_dupldropbinary()) {
      set_dupldropbinary(from.dupldropbinary());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mysteryshopbinary()) {
      set_mysteryshopbinary(from.mysteryshopbinary());
    }
    if (from.has_taskbinary()) {
      set_taskbinary(from.taskbinary());
    }
    if (from.has_matchdatabinary()) {
      set_matchdatabinary(from.matchdatabinary());
    }
    if (from.has_wingbinary()) {
      set_wingbinary(from.wingbinary());
    }
    if (from.has_vipdatabinary()) {
      set_vipdatabinary(from.vipdatabinary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSerializeBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSerializeBinary::CopyFrom(const LoginSerializeBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSerializeBinary::IsInitialized() const {

  return true;
}

void LoginSerializeBinary::Swap(LoginSerializeBinary* other) {
  if (other != this) {
    std::swap(packagebinary_, other->packagebinary_);
    std::swap(miscbinary_, other->miscbinary_);
    std::swap(userdatabinary_, other->userdatabinary_);
    std::swap(rechargemoney_, other->rechargemoney_);
    std::swap(petdatabinary_, other->petdatabinary_);
    std::swap(itemcoldbinary_, other->itemcoldbinary_);
    std::swap(useskillbinary_, other->useskillbinary_);
    std::swap(haveskillbinary_, other->haveskillbinary_);
    std::swap(havepassivebinary_, other->havepassivebinary_);
    std::swap(duplbinary_, other->duplbinary_);
    std::swap(equipposbinary_, other->equipposbinary_);
    std::swap(trumpbinary_, other->trumpbinary_);
    std::swap(rewardbinary_, other->rewardbinary_);
    std::swap(discoverybinary_, other->discoverybinary_);
    std::swap(frienddatabinary_, other->frienddatabinary_);
    std::swap(dupldropbinary_, other->dupldropbinary_);
    std::swap(mysteryshopbinary_, other->mysteryshopbinary_);
    std::swap(taskbinary_, other->taskbinary_);
    std::swap(matchdatabinary_, other->matchdatabinary_);
    std::swap(wingbinary_, other->wingbinary_);
    std::swap(vipdatabinary_, other->vipdatabinary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSerializeBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSerializeBinary_descriptor_;
  metadata.reflection = LoginSerializeBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetDataSerializeBinary::kPetDataFieldNumber;
const int PetDataSerializeBinary::kTotalFightPowerFieldNumber;
#endif  // !_MSC_VER

PetDataSerializeBinary::PetDataSerializeBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetDataSerializeBinary::InitAsDefaultInstance() {
}

PetDataSerializeBinary::PetDataSerializeBinary(const PetDataSerializeBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetDataSerializeBinary::SharedCtor() {
  _cached_size_ = 0;
  totalfightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetDataSerializeBinary::~PetDataSerializeBinary() {
  SharedDtor();
}

void PetDataSerializeBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetDataSerializeBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetDataSerializeBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetDataSerializeBinary_descriptor_;
}

const PetDataSerializeBinary& PetDataSerializeBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

PetDataSerializeBinary* PetDataSerializeBinary::default_instance_ = NULL;

PetDataSerializeBinary* PetDataSerializeBinary::New() const {
  return new PetDataSerializeBinary;
}

void PetDataSerializeBinary::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    totalfightpower_ = 0u;
  }
  petdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetDataSerializeBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.PetData petData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_petData;
        if (input->ExpectTag(16)) goto parse_totalFightPower;
        break;
      }

      // required uint32 totalFightPower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalFightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalfightpower_)));
          set_has_totalfightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetDataSerializeBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.PetData petData = 1;
  for (int i = 0; i < this->petdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->petdata(i), output);
  }

  // required uint32 totalFightPower = 2;
  if (has_totalfightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalfightpower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetDataSerializeBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.PetData petData = 1;
  for (int i = 0; i < this->petdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->petdata(i), target);
  }

  // required uint32 totalFightPower = 2;
  if (has_totalfightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalfightpower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetDataSerializeBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 totalFightPower = 2;
    if (has_totalfightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalfightpower());
    }

  }
  // repeated .protocol.user.PetData petData = 1;
  total_size += 1 * this->petdata_size();
  for (int i = 0; i < this->petdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetDataSerializeBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetDataSerializeBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetDataSerializeBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetDataSerializeBinary::MergeFrom(const PetDataSerializeBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  petdata_.MergeFrom(from.petdata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_totalfightpower()) {
      set_totalfightpower(from.totalfightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetDataSerializeBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDataSerializeBinary::CopyFrom(const PetDataSerializeBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDataSerializeBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < petdata_size(); i++) {
    if (!this->petdata(i).IsInitialized()) return false;
  }
  return true;
}

void PetDataSerializeBinary::Swap(PetDataSerializeBinary* other) {
  if (other != this) {
    petdata_.Swap(&other->petdata_);
    std::swap(totalfightpower_, other->totalfightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetDataSerializeBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetDataSerializeBinary_descriptor_;
  metadata.reflection = PetDataSerializeBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSaveData::kPackageBinaryFieldNumber;
const int UserSaveData::kMiscBinaryFieldNumber;
const int UserSaveData::kUserDataBinaryFieldNumber;
const int UserSaveData::kRechargeMoneyFieldNumber;
const int UserSaveData::kCurExpFieldNumber;
const int UserSaveData::kLevelFieldNumber;
const int UserSaveData::kBitMaskFieldNumber;
const int UserSaveData::kVitalityFieldNumber;
const int UserSaveData::kSkillPointFieldNumber;
const int UserSaveData::kItemColdBinaryFieldNumber;
const int UserSaveData::kSilverFieldNumber;
const int UserSaveData::kDiamondFieldNumber;
const int UserSaveData::kBindDiamondFieldNumber;
const int UserSaveData::kUseSkillBinaryFieldNumber;
const int UserSaveData::kHaveSkillBinaryFieldNumber;
const int UserSaveData::kHavePassiveBinaryFieldNumber;
const int UserSaveData::kUnlockPetDataFieldNumber;
const int UserSaveData::kDuplBinaryFieldNumber;
const int UserSaveData::kEquipPosBinaryFieldNumber;
const int UserSaveData::kGmLevelFieldNumber;
const int UserSaveData::kTrumpBinaryFieldNumber;
const int UserSaveData::kRewardBinaryFieldNumber;
const int UserSaveData::kDiscoveryBinaryFieldNumber;
const int UserSaveData::kMonthCardStopTimeFieldNumber;
const int UserSaveData::kFriendDataBinaryFieldNumber;
const int UserSaveData::kMysteryShopBinaryFieldNumber;
const int UserSaveData::kTaskBinaryFieldNumber;
const int UserSaveData::kThoughtValueFieldNumber;
const int UserSaveData::kFightPowerFieldNumber;
const int UserSaveData::kMatchDataBinaryFieldNumber;
const int UserSaveData::kWingBinaryFieldNumber;
const int UserSaveData::kHonorPointsFieldNumber;
const int UserSaveData::kVipExpFieldNumber;
const int UserSaveData::kVipLevelFieldNumber;
const int UserSaveData::kVipDataBinaryFieldNumber;
const int UserSaveData::kClubPointsFieldNumber;
#endif  // !_MSC_VER

UserSaveData::UserSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSaveData::InitAsDefaultInstance() {
}

UserSaveData::UserSaveData(const UserSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSaveData::SharedCtor() {
  _cached_size_ = 0;
  packagebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  miscbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rechargemoney_ = 0u;
  curexp_ = 0u;
  level_ = 0u;
  bitmask_ = 0u;
  vitality_ = 0u;
  skillpoint_ = 0u;
  itemcoldbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  silver_ = 0u;
  diamond_ = 0u;
  binddiamond_ = 0u;
  useskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haveskillbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  havepassivebinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unlockpetdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duplbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipposbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gmlevel_ = 0u;
  trumpbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rewardbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  discoverybinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monthcardstoptime_ = 0u;
  frienddatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysteryshopbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thoughtvalue_ = 0u;
  fightpower_ = 0u;
  matchdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wingbinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  honorpoints_ = 0u;
  vipexp_ = 0u;
  viplevel_ = 0u;
  vipdatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clubpoints_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSaveData::~UserSaveData() {
  SharedDtor();
}

void UserSaveData::SharedDtor() {
  if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete packagebinary_;
  }
  if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete miscbinary_;
  }
  if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete userdatabinary_;
  }
  if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete itemcoldbinary_;
  }
  if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete useskillbinary_;
  }
  if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete haveskillbinary_;
  }
  if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
    delete havepassivebinary_;
  }
  if (unlockpetdata_ != &::google::protobuf::internal::kEmptyString) {
    delete unlockpetdata_;
  }
  if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete duplbinary_;
  }
  if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete equipposbinary_;
  }
  if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete trumpbinary_;
  }
  if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardbinary_;
  }
  if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
    delete discoverybinary_;
  }
  if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete frienddatabinary_;
  }
  if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete mysteryshopbinary_;
  }
  if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete taskbinary_;
  }
  if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete matchdatabinary_;
  }
  if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
    delete wingbinary_;
  }
  if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete vipdatabinary_;
  }
  if (this != default_instance_) {
  }
}

void UserSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSaveData_descriptor_;
}

const UserSaveData& UserSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UserSaveData* UserSaveData::default_instance_ = NULL;

UserSaveData* UserSaveData::New() const {
  return new UserSaveData;
}

void UserSaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_packagebinary()) {
      if (packagebinary_ != &::google::protobuf::internal::kEmptyString) {
        packagebinary_->clear();
      }
    }
    if (has_miscbinary()) {
      if (miscbinary_ != &::google::protobuf::internal::kEmptyString) {
        miscbinary_->clear();
      }
    }
    if (has_userdatabinary()) {
      if (userdatabinary_ != &::google::protobuf::internal::kEmptyString) {
        userdatabinary_->clear();
      }
    }
    rechargemoney_ = 0u;
    curexp_ = 0u;
    level_ = 0u;
    bitmask_ = 0u;
    vitality_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skillpoint_ = 0u;
    if (has_itemcoldbinary()) {
      if (itemcoldbinary_ != &::google::protobuf::internal::kEmptyString) {
        itemcoldbinary_->clear();
      }
    }
    silver_ = 0u;
    diamond_ = 0u;
    binddiamond_ = 0u;
    if (has_useskillbinary()) {
      if (useskillbinary_ != &::google::protobuf::internal::kEmptyString) {
        useskillbinary_->clear();
      }
    }
    if (has_haveskillbinary()) {
      if (haveskillbinary_ != &::google::protobuf::internal::kEmptyString) {
        haveskillbinary_->clear();
      }
    }
    if (has_havepassivebinary()) {
      if (havepassivebinary_ != &::google::protobuf::internal::kEmptyString) {
        havepassivebinary_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_unlockpetdata()) {
      if (unlockpetdata_ != &::google::protobuf::internal::kEmptyString) {
        unlockpetdata_->clear();
      }
    }
    if (has_duplbinary()) {
      if (duplbinary_ != &::google::protobuf::internal::kEmptyString) {
        duplbinary_->clear();
      }
    }
    if (has_equipposbinary()) {
      if (equipposbinary_ != &::google::protobuf::internal::kEmptyString) {
        equipposbinary_->clear();
      }
    }
    gmlevel_ = 0u;
    if (has_trumpbinary()) {
      if (trumpbinary_ != &::google::protobuf::internal::kEmptyString) {
        trumpbinary_->clear();
      }
    }
    if (has_rewardbinary()) {
      if (rewardbinary_ != &::google::protobuf::internal::kEmptyString) {
        rewardbinary_->clear();
      }
    }
    if (has_discoverybinary()) {
      if (discoverybinary_ != &::google::protobuf::internal::kEmptyString) {
        discoverybinary_->clear();
      }
    }
    monthcardstoptime_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_frienddatabinary()) {
      if (frienddatabinary_ != &::google::protobuf::internal::kEmptyString) {
        frienddatabinary_->clear();
      }
    }
    if (has_mysteryshopbinary()) {
      if (mysteryshopbinary_ != &::google::protobuf::internal::kEmptyString) {
        mysteryshopbinary_->clear();
      }
    }
    if (has_taskbinary()) {
      if (taskbinary_ != &::google::protobuf::internal::kEmptyString) {
        taskbinary_->clear();
      }
    }
    thoughtvalue_ = 0u;
    fightpower_ = 0u;
    if (has_matchdatabinary()) {
      if (matchdatabinary_ != &::google::protobuf::internal::kEmptyString) {
        matchdatabinary_->clear();
      }
    }
    if (has_wingbinary()) {
      if (wingbinary_ != &::google::protobuf::internal::kEmptyString) {
        wingbinary_->clear();
      }
    }
    honorpoints_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    vipexp_ = 0u;
    viplevel_ = 0u;
    if (has_vipdatabinary()) {
      if (vipdatabinary_ != &::google::protobuf::internal::kEmptyString) {
        vipdatabinary_->clear();
      }
    }
    clubpoints_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes packageBinary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packagebinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_miscBinary;
        break;
      }

      // optional bytes miscBinary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miscBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_miscbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userDataBinary;
        break;
      }

      // optional bytes userDataBinary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rechargeMoney;
        break;
      }

      // optional uint32 rechargeMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargemoney_)));
          set_has_rechargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curExp;
        break;
      }

      // optional uint32 curExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bitMask;
        break;
      }

      // optional uint32 bitMask = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitmask_)));
          set_has_bitmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vitality;
        break;
      }

      // optional uint32 vitality = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vitality_)));
          set_has_vitality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_skillPoint;
        break;
      }

      // optional uint32 skillPoint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_itemColdBinary;
        break;
      }

      // optional bytes itemColdBinary = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemColdBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemcoldbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_silver;
        break;
      }

      // optional uint32 silver = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bindDiamond;
        break;
      }

      // optional uint32 bindDiamond = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_useSkillBinary;
        break;
      }

      // optional bytes useSkillBinary = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useSkillBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_useskillbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_haveSkillBinary;
        break;
      }

      // optional bytes haveSkillBinary = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_haveSkillBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_haveskillbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_havePassiveBinary;
        break;
      }

      // optional bytes havePassiveBinary = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_havePassiveBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_havepassivebinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_unlockPetData;
        break;
      }

      // optional bytes unlockPetData = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockPetData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlockpetdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_duplBinary;
        break;
      }

      // optional bytes duplBinary = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_duplbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_equipPosBinary;
        break;
      }

      // optional bytes equipPosBinary = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipPosBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_equipposbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_gmLevel;
        break;
      }

      // optional uint32 gmLevel = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmlevel_)));
          set_has_gmlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_trumpBinary;
        break;
      }

      // optional bytes trumpBinary = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trumpBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trumpbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_rewardBinary;
        break;
      }

      // optional bytes rewardBinary = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rewardbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_discoveryBinary;
        break;
      }

      // optional bytes discoveryBinary = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discoveryBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_discoverybinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_monthCardStopTime;
        break;
      }

      // optional uint32 monthCardStopTime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthCardStopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monthcardstoptime_)));
          set_has_monthcardstoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_friendDataBinary;
        break;
      }

      // optional bytes friendDataBinary = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frienddatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_mysteryShopBinary;
        break;
      }

      // optional bytes mysteryShopBinary = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysteryShopBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mysteryshopbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_taskBinary;
        break;
      }

      // optional bytes taskBinary = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_thoughtValue;
        break;
      }

      // optional uint32 thoughtValue = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thoughtValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thoughtvalue_)));
          set_has_thoughtvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fightPower;
        break;
      }

      // optional uint32 fightPower = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_matchDataBinary;
        break;
      }

      // optional bytes matchDataBinary = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_matchdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_wingBinary;
        break;
      }

      // optional bytes wingBinary = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wingbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_honorPoints;
        break;
      }

      // optional uint32 honorPoints = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honorPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honorpoints_)));
          set_has_honorpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_vipExp;
        break;
      }

      // optional uint32 vipExp = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_vipDataBinary;
        break;
      }

      // optional bytes vipDataBinary = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vipdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_clubPoints;
        break;
      }

      // optional uint32 clubPoints = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clubpoints_)));
          set_has_clubpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes packageBinary = 1;
  if (has_packagebinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->packagebinary(), output);
  }

  // optional bytes miscBinary = 2;
  if (has_miscbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->miscbinary(), output);
  }

  // optional bytes userDataBinary = 3;
  if (has_userdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->userdatabinary(), output);
  }

  // optional uint32 rechargeMoney = 4;
  if (has_rechargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rechargemoney(), output);
  }

  // optional uint32 curExp = 5;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curexp(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 bitMask = 8;
  if (has_bitmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bitmask(), output);
  }

  // optional uint32 vitality = 9;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vitality(), output);
  }

  // optional uint32 skillPoint = 10;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skillpoint(), output);
  }

  // optional bytes itemColdBinary = 11;
  if (has_itemcoldbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->itemcoldbinary(), output);
  }

  // optional uint32 silver = 12;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->silver(), output);
  }

  // optional uint32 diamond = 13;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->diamond(), output);
  }

  // optional uint32 bindDiamond = 14;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->binddiamond(), output);
  }

  // optional bytes useSkillBinary = 15;
  if (has_useskillbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->useskillbinary(), output);
  }

  // optional bytes haveSkillBinary = 16;
  if (has_haveskillbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->haveskillbinary(), output);
  }

  // optional bytes havePassiveBinary = 17;
  if (has_havepassivebinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->havepassivebinary(), output);
  }

  // optional bytes unlockPetData = 18;
  if (has_unlockpetdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->unlockpetdata(), output);
  }

  // optional bytes duplBinary = 19;
  if (has_duplbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->duplbinary(), output);
  }

  // optional bytes equipPosBinary = 20;
  if (has_equipposbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->equipposbinary(), output);
  }

  // optional uint32 gmLevel = 21;
  if (has_gmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->gmlevel(), output);
  }

  // optional bytes trumpBinary = 22;
  if (has_trumpbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->trumpbinary(), output);
  }

  // optional bytes rewardBinary = 23;
  if (has_rewardbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->rewardbinary(), output);
  }

  // optional bytes discoveryBinary = 24;
  if (has_discoverybinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->discoverybinary(), output);
  }

  // optional uint32 monthCardStopTime = 25;
  if (has_monthcardstoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->monthcardstoptime(), output);
  }

  // optional bytes friendDataBinary = 26;
  if (has_frienddatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      26, this->frienddatabinary(), output);
  }

  // optional bytes mysteryShopBinary = 27;
  if (has_mysteryshopbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      27, this->mysteryshopbinary(), output);
  }

  // optional bytes taskBinary = 28;
  if (has_taskbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      28, this->taskbinary(), output);
  }

  // optional uint32 thoughtValue = 29;
  if (has_thoughtvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->thoughtvalue(), output);
  }

  // optional uint32 fightPower = 30;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->fightpower(), output);
  }

  // optional bytes matchDataBinary = 31;
  if (has_matchdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      31, this->matchdatabinary(), output);
  }

  // optional bytes wingBinary = 32;
  if (has_wingbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      32, this->wingbinary(), output);
  }

  // optional uint32 honorPoints = 43;
  if (has_honorpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->honorpoints(), output);
  }

  // optional uint32 vipExp = 44;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->vipexp(), output);
  }

  // optional uint32 vipLevel = 45;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->viplevel(), output);
  }

  // optional bytes vipDataBinary = 46;
  if (has_vipdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      46, this->vipdatabinary(), output);
  }

  // optional uint32 clubPoints = 47;
  if (has_clubpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->clubpoints(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes packageBinary = 1;
  if (has_packagebinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->packagebinary(), target);
  }

  // optional bytes miscBinary = 2;
  if (has_miscbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->miscbinary(), target);
  }

  // optional bytes userDataBinary = 3;
  if (has_userdatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->userdatabinary(), target);
  }

  // optional uint32 rechargeMoney = 4;
  if (has_rechargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rechargemoney(), target);
  }

  // optional uint32 curExp = 5;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curexp(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 bitMask = 8;
  if (has_bitmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bitmask(), target);
  }

  // optional uint32 vitality = 9;
  if (has_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vitality(), target);
  }

  // optional uint32 skillPoint = 10;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skillpoint(), target);
  }

  // optional bytes itemColdBinary = 11;
  if (has_itemcoldbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->itemcoldbinary(), target);
  }

  // optional uint32 silver = 12;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->silver(), target);
  }

  // optional uint32 diamond = 13;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->diamond(), target);
  }

  // optional uint32 bindDiamond = 14;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->binddiamond(), target);
  }

  // optional bytes useSkillBinary = 15;
  if (has_useskillbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->useskillbinary(), target);
  }

  // optional bytes haveSkillBinary = 16;
  if (has_haveskillbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->haveskillbinary(), target);
  }

  // optional bytes havePassiveBinary = 17;
  if (has_havepassivebinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->havepassivebinary(), target);
  }

  // optional bytes unlockPetData = 18;
  if (has_unlockpetdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->unlockpetdata(), target);
  }

  // optional bytes duplBinary = 19;
  if (has_duplbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->duplbinary(), target);
  }

  // optional bytes equipPosBinary = 20;
  if (has_equipposbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->equipposbinary(), target);
  }

  // optional uint32 gmLevel = 21;
  if (has_gmlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->gmlevel(), target);
  }

  // optional bytes trumpBinary = 22;
  if (has_trumpbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->trumpbinary(), target);
  }

  // optional bytes rewardBinary = 23;
  if (has_rewardbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->rewardbinary(), target);
  }

  // optional bytes discoveryBinary = 24;
  if (has_discoverybinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->discoverybinary(), target);
  }

  // optional uint32 monthCardStopTime = 25;
  if (has_monthcardstoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->monthcardstoptime(), target);
  }

  // optional bytes friendDataBinary = 26;
  if (has_frienddatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->frienddatabinary(), target);
  }

  // optional bytes mysteryShopBinary = 27;
  if (has_mysteryshopbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->mysteryshopbinary(), target);
  }

  // optional bytes taskBinary = 28;
  if (has_taskbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->taskbinary(), target);
  }

  // optional uint32 thoughtValue = 29;
  if (has_thoughtvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->thoughtvalue(), target);
  }

  // optional uint32 fightPower = 30;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->fightpower(), target);
  }

  // optional bytes matchDataBinary = 31;
  if (has_matchdatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->matchdatabinary(), target);
  }

  // optional bytes wingBinary = 32;
  if (has_wingbinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        32, this->wingbinary(), target);
  }

  // optional uint32 honorPoints = 43;
  if (has_honorpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->honorpoints(), target);
  }

  // optional uint32 vipExp = 44;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->vipexp(), target);
  }

  // optional uint32 vipLevel = 45;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->viplevel(), target);
  }

  // optional bytes vipDataBinary = 46;
  if (has_vipdatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        46, this->vipdatabinary(), target);
  }

  // optional uint32 clubPoints = 47;
  if (has_clubpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->clubpoints(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes packageBinary = 1;
    if (has_packagebinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packagebinary());
    }

    // optional bytes miscBinary = 2;
    if (has_miscbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->miscbinary());
    }

    // optional bytes userDataBinary = 3;
    if (has_userdatabinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdatabinary());
    }

    // optional uint32 rechargeMoney = 4;
    if (has_rechargemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargemoney());
    }

    // optional uint32 curExp = 5;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curexp());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 bitMask = 8;
    if (has_bitmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitmask());
    }

    // optional uint32 vitality = 9;
    if (has_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vitality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 skillPoint = 10;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // optional bytes itemColdBinary = 11;
    if (has_itemcoldbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itemcoldbinary());
    }

    // optional uint32 silver = 12;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silver());
    }

    // optional uint32 diamond = 13;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 bindDiamond = 14;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binddiamond());
    }

    // optional bytes useSkillBinary = 15;
    if (has_useskillbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->useskillbinary());
    }

    // optional bytes haveSkillBinary = 16;
    if (has_haveskillbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->haveskillbinary());
    }

    // optional bytes havePassiveBinary = 17;
    if (has_havepassivebinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->havepassivebinary());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes unlockPetData = 18;
    if (has_unlockpetdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unlockpetdata());
    }

    // optional bytes duplBinary = 19;
    if (has_duplbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->duplbinary());
    }

    // optional bytes equipPosBinary = 20;
    if (has_equipposbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->equipposbinary());
    }

    // optional uint32 gmLevel = 21;
    if (has_gmlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmlevel());
    }

    // optional bytes trumpBinary = 22;
    if (has_trumpbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trumpbinary());
    }

    // optional bytes rewardBinary = 23;
    if (has_rewardbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rewardbinary());
    }

    // optional bytes discoveryBinary = 24;
    if (has_discoverybinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->discoverybinary());
    }

    // optional uint32 monthCardStopTime = 25;
    if (has_monthcardstoptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monthcardstoptime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes friendDataBinary = 26;
    if (has_frienddatabinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frienddatabinary());
    }

    // optional bytes mysteryShopBinary = 27;
    if (has_mysteryshopbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mysteryshopbinary());
    }

    // optional bytes taskBinary = 28;
    if (has_taskbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->taskbinary());
    }

    // optional uint32 thoughtValue = 29;
    if (has_thoughtvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thoughtvalue());
    }

    // optional uint32 fightPower = 30;
    if (has_fightpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }

    // optional bytes matchDataBinary = 31;
    if (has_matchdatabinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->matchdatabinary());
    }

    // optional bytes wingBinary = 32;
    if (has_wingbinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wingbinary());
    }

    // optional uint32 honorPoints = 43;
    if (has_honorpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honorpoints());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 vipExp = 44;
    if (has_vipexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexp());
    }

    // optional uint32 vipLevel = 45;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional bytes vipDataBinary = 46;
    if (has_vipdatabinary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vipdatabinary());
    }

    // optional uint32 clubPoints = 47;
    if (has_clubpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clubpoints());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSaveData::MergeFrom(const UserSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packagebinary()) {
      set_packagebinary(from.packagebinary());
    }
    if (from.has_miscbinary()) {
      set_miscbinary(from.miscbinary());
    }
    if (from.has_userdatabinary()) {
      set_userdatabinary(from.userdatabinary());
    }
    if (from.has_rechargemoney()) {
      set_rechargemoney(from.rechargemoney());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_bitmask()) {
      set_bitmask(from.bitmask());
    }
    if (from.has_vitality()) {
      set_vitality(from.vitality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_itemcoldbinary()) {
      set_itemcoldbinary(from.itemcoldbinary());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_useskillbinary()) {
      set_useskillbinary(from.useskillbinary());
    }
    if (from.has_haveskillbinary()) {
      set_haveskillbinary(from.haveskillbinary());
    }
    if (from.has_havepassivebinary()) {
      set_havepassivebinary(from.havepassivebinary());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_unlockpetdata()) {
      set_unlockpetdata(from.unlockpetdata());
    }
    if (from.has_duplbinary()) {
      set_duplbinary(from.duplbinary());
    }
    if (from.has_equipposbinary()) {
      set_equipposbinary(from.equipposbinary());
    }
    if (from.has_gmlevel()) {
      set_gmlevel(from.gmlevel());
    }
    if (from.has_trumpbinary()) {
      set_trumpbinary(from.trumpbinary());
    }
    if (from.has_rewardbinary()) {
      set_rewardbinary(from.rewardbinary());
    }
    if (from.has_discoverybinary()) {
      set_discoverybinary(from.discoverybinary());
    }
    if (from.has_monthcardstoptime()) {
      set_monthcardstoptime(from.monthcardstoptime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_frienddatabinary()) {
      set_frienddatabinary(from.frienddatabinary());
    }
    if (from.has_mysteryshopbinary()) {
      set_mysteryshopbinary(from.mysteryshopbinary());
    }
    if (from.has_taskbinary()) {
      set_taskbinary(from.taskbinary());
    }
    if (from.has_thoughtvalue()) {
      set_thoughtvalue(from.thoughtvalue());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_matchdatabinary()) {
      set_matchdatabinary(from.matchdatabinary());
    }
    if (from.has_wingbinary()) {
      set_wingbinary(from.wingbinary());
    }
    if (from.has_honorpoints()) {
      set_honorpoints(from.honorpoints());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipdatabinary()) {
      set_vipdatabinary(from.vipdatabinary());
    }
    if (from.has_clubpoints()) {
      set_clubpoints(from.clubpoints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSaveData::CopyFrom(const UserSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSaveData::IsInitialized() const {

  return true;
}

void UserSaveData::Swap(UserSaveData* other) {
  if (other != this) {
    std::swap(packagebinary_, other->packagebinary_);
    std::swap(miscbinary_, other->miscbinary_);
    std::swap(userdatabinary_, other->userdatabinary_);
    std::swap(rechargemoney_, other->rechargemoney_);
    std::swap(curexp_, other->curexp_);
    std::swap(level_, other->level_);
    std::swap(bitmask_, other->bitmask_);
    std::swap(vitality_, other->vitality_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(itemcoldbinary_, other->itemcoldbinary_);
    std::swap(silver_, other->silver_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(useskillbinary_, other->useskillbinary_);
    std::swap(haveskillbinary_, other->haveskillbinary_);
    std::swap(havepassivebinary_, other->havepassivebinary_);
    std::swap(unlockpetdata_, other->unlockpetdata_);
    std::swap(duplbinary_, other->duplbinary_);
    std::swap(equipposbinary_, other->equipposbinary_);
    std::swap(gmlevel_, other->gmlevel_);
    std::swap(trumpbinary_, other->trumpbinary_);
    std::swap(rewardbinary_, other->rewardbinary_);
    std::swap(discoverybinary_, other->discoverybinary_);
    std::swap(monthcardstoptime_, other->monthcardstoptime_);
    std::swap(frienddatabinary_, other->frienddatabinary_);
    std::swap(mysteryshopbinary_, other->mysteryshopbinary_);
    std::swap(taskbinary_, other->taskbinary_);
    std::swap(thoughtvalue_, other->thoughtvalue_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(matchdatabinary_, other->matchdatabinary_);
    std::swap(wingbinary_, other->wingbinary_);
    std::swap(honorpoints_, other->honorpoints_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipdatabinary_, other->vipdatabinary_);
    std::swap(clubpoints_, other->clubpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSaveData_descriptor_;
  metadata.reflection = UserSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutCallbackData::kDestZoneIDFieldNumber;
#endif  // !_MSC_VER

LogoutCallbackData::LogoutCallbackData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutCallbackData::InitAsDefaultInstance() {
}

LogoutCallbackData::LogoutCallbackData(const LogoutCallbackData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutCallbackData::SharedCtor() {
  _cached_size_ = 0;
  destzoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutCallbackData::~LogoutCallbackData() {
  SharedDtor();
}

void LogoutCallbackData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutCallbackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutCallbackData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutCallbackData_descriptor_;
}

const LogoutCallbackData& LogoutCallbackData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

LogoutCallbackData* LogoutCallbackData::default_instance_ = NULL;

LogoutCallbackData* LogoutCallbackData::New() const {
  return new LogoutCallbackData;
}

void LogoutCallbackData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destzoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutCallbackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 destZoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destzoneid_)));
          set_has_destzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutCallbackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 destZoneID = 1;
  if (has_destzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->destzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutCallbackData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 destZoneID = 1;
  if (has_destzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->destzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutCallbackData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 destZoneID = 1;
    if (has_destzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutCallbackData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutCallbackData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutCallbackData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutCallbackData::MergeFrom(const LogoutCallbackData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destzoneid()) {
      set_destzoneid(from.destzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutCallbackData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutCallbackData::CopyFrom(const LogoutCallbackData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutCallbackData::IsInitialized() const {

  return true;
}

void LogoutCallbackData::Swap(LogoutCallbackData* other) {
  if (other != this) {
    std::swap(destzoneid_, other->destzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutCallbackData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutCallbackData_descriptor_;
  metadata.reflection = LogoutCallbackData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeLogicExtendData::kUserLoginDataFieldNumber;
const int ChangeLogicExtendData::kIntoRoomExtendDataFieldNumber;
const int ChangeLogicExtendData::kIsAudienceFieldNumber;
const int ChangeLogicExtendData::kCampTypeFieldNumber;
#endif  // !_MSC_VER

ChangeLogicExtendData::ChangeLogicExtendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeLogicExtendData::InitAsDefaultInstance() {
}

ChangeLogicExtendData::ChangeLogicExtendData(const ChangeLogicExtendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeLogicExtendData::SharedCtor() {
  _cached_size_ = 0;
  userlogindata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intoroomextenddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isaudience_ = false;
  camptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeLogicExtendData::~ChangeLogicExtendData() {
  SharedDtor();
}

void ChangeLogicExtendData::SharedDtor() {
  if (userlogindata_ != &::google::protobuf::internal::kEmptyString) {
    delete userlogindata_;
  }
  if (intoroomextenddata_ != &::google::protobuf::internal::kEmptyString) {
    delete intoroomextenddata_;
  }
  if (this != default_instance_) {
  }
}

void ChangeLogicExtendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLogicExtendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLogicExtendData_descriptor_;
}

const ChangeLogicExtendData& ChangeLogicExtendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

ChangeLogicExtendData* ChangeLogicExtendData::default_instance_ = NULL;

ChangeLogicExtendData* ChangeLogicExtendData::New() const {
  return new ChangeLogicExtendData;
}

void ChangeLogicExtendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userlogindata()) {
      if (userlogindata_ != &::google::protobuf::internal::kEmptyString) {
        userlogindata_->clear();
      }
    }
    if (has_intoroomextenddata()) {
      if (intoroomextenddata_ != &::google::protobuf::internal::kEmptyString) {
        intoroomextenddata_->clear();
      }
    }
    isaudience_ = false;
    camptype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeLogicExtendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userLoginData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userlogindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_intoRoomExtendData;
        break;
      }

      // optional bytes intoRoomExtendData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intoRoomExtendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_intoroomextenddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isAudience;
        break;
      }

      // optional bool isAudience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAudience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaudience_)));
          set_has_isaudience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_campType;
        break;
      }

      // optional uint32 campType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camptype_)));
          set_has_camptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeLogicExtendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes userLoginData = 1;
  if (has_userlogindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userlogindata(), output);
  }

  // optional bytes intoRoomExtendData = 2;
  if (has_intoroomextenddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->intoroomextenddata(), output);
  }

  // optional bool isAudience = 3;
  if (has_isaudience()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isaudience(), output);
  }

  // optional uint32 campType = 4;
  if (has_camptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->camptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeLogicExtendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes userLoginData = 1;
  if (has_userlogindata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userlogindata(), target);
  }

  // optional bytes intoRoomExtendData = 2;
  if (has_intoroomextenddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->intoroomextenddata(), target);
  }

  // optional bool isAudience = 3;
  if (has_isaudience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isaudience(), target);
  }

  // optional uint32 campType = 4;
  if (has_camptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->camptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeLogicExtendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes userLoginData = 1;
    if (has_userlogindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userlogindata());
    }

    // optional bytes intoRoomExtendData = 2;
    if (has_intoroomextenddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->intoroomextenddata());
    }

    // optional bool isAudience = 3;
    if (has_isaudience()) {
      total_size += 1 + 1;
    }

    // optional uint32 campType = 4;
    if (has_camptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLogicExtendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeLogicExtendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeLogicExtendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeLogicExtendData::MergeFrom(const ChangeLogicExtendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userlogindata()) {
      set_userlogindata(from.userlogindata());
    }
    if (from.has_intoroomextenddata()) {
      set_intoroomextenddata(from.intoroomextenddata());
    }
    if (from.has_isaudience()) {
      set_isaudience(from.isaudience());
    }
    if (from.has_camptype()) {
      set_camptype(from.camptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeLogicExtendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLogicExtendData::CopyFrom(const ChangeLogicExtendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLogicExtendData::IsInitialized() const {

  return true;
}

void ChangeLogicExtendData::Swap(ChangeLogicExtendData* other) {
  if (other != this) {
    std::swap(userlogindata_, other->userlogindata_);
    std::swap(intoroomextenddata_, other->intoroomextenddata_);
    std::swap(isaudience_, other->isaudience_);
    std::swap(camptype_, other->camptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeLogicExtendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeLogicExtendData_descriptor_;
  metadata.reflection = ChangeLogicExtendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageSaveData::kMessageDataFieldNumber;
#endif  // !_MSC_VER

MessageSaveData::MessageSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageSaveData::InitAsDefaultInstance() {
}

MessageSaveData::MessageSaveData(const MessageSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageSaveData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageSaveData::~MessageSaveData() {
  SharedDtor();
}

void MessageSaveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageSaveData_descriptor_;
}

const MessageSaveData& MessageSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

MessageSaveData* MessageSaveData::default_instance_ = NULL;

MessageSaveData* MessageSaveData::New() const {
  return new MessageSaveData;
}

void MessageSaveData::Clear() {
  messagedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.MessageData messageData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_messageData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.MessageData messageData = 1;
  for (int i = 0; i < this->messagedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messagedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.MessageData messageData = 1;
  for (int i = 0; i < this->messagedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messagedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageSaveData::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.user.MessageData messageData = 1;
  total_size += 1 * this->messagedata_size();
  for (int i = 0; i < this->messagedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messagedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageSaveData::MergeFrom(const MessageSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  messagedata_.MergeFrom(from.messagedata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageSaveData::CopyFrom(const MessageSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageSaveData::IsInitialized() const {

  for (int i = 0; i < messagedata_size(); i++) {
    if (!this->messagedata(i).IsInitialized()) return false;
  }
  return true;
}

void MessageSaveData::Swap(MessageSaveData* other) {
  if (other != this) {
    messagedata_.Swap(&other->messagedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageSaveData_descriptor_;
  metadata.reflection = MessageSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageData::kMessageIDFieldNumber;
const int MessageData::kInfoFieldNumber;
#endif  // !_MSC_VER

MessageData::MessageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageData::InitAsDefaultInstance() {
}

MessageData::MessageData(const MessageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageData::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = 0u;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageData::~MessageData() {
  SharedDtor();
}

void MessageData::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void MessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageData_descriptor_;
}

const MessageData& MessageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

MessageData* MessageData::default_instance_ = NULL;

MessageData* MessageData::New() const {
  return new MessageData;
}

void MessageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messageid_ = 0u;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 messageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 messageID = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messageid(), output);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 messageID = 1;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messageid(), target);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 messageID = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messageid());
    }

    // optional string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageData::Swap(MessageData* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageData_descriptor_;
  metadata.reflection = MessageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetData::kPetIDFieldNumber;
const int PetData::kPetExpFieldNumber;
const int PetData::kPetStarLevelFieldNumber;
const int PetData::kPetQualityFieldNumber;
const int PetData::kPetSkillDataFieldNumber;
const int PetData::kPetEquipBinaryFieldNumber;
const int PetData::kTeamPosFieldNumber;
const int PetData::kPropDataFieldNumber;
const int PetData::kPetLevelFieldNumber;
const int PetData::kSeqFieldNumber;
#endif  // !_MSC_VER

PetData::PetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetData::InitAsDefaultInstance() {
  propdata_ = const_cast< ::protocol::user::PropData*>(&::protocol::user::PropData::default_instance());
}

PetData::PetData(const PetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetData::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0u;
  petexp_ = 0u;
  petstarlevel_ = 0u;
  petquality_ = 0u;
  teampos_ = 0u;
  propdata_ = NULL;
  petlevel_ = 0u;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetData::~PetData() {
  SharedDtor();
}

void PetData::SharedDtor() {
  if (this != default_instance_) {
    delete propdata_;
  }
}

void PetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetData_descriptor_;
}

const PetData& PetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

PetData* PetData::default_instance_ = NULL;

PetData* PetData::New() const {
  return new PetData;
}

void PetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0u;
    petexp_ = 0u;
    petstarlevel_ = 0u;
    petquality_ = 0u;
    teampos_ = 0u;
    if (has_propdata()) {
      if (propdata_ != NULL) propdata_->::protocol::user::PropData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    petlevel_ = 0u;
    seq_ = 0u;
  }
  petskilldata_.Clear();
  petequipbinary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petExp;
        break;
      }

      // required uint32 petExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petexp_)));
          set_has_petexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_petStarLevel;
        break;
      }

      // required uint32 petStarLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petStarLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petstarlevel_)));
          set_has_petstarlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_petQuality;
        break;
      }

      // required uint32 petQuality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petquality_)));
          set_has_petquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_petSkillData;
        break;
      }

      // repeated .protocol.user.SkillData petSkillData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petSkillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petskilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_petSkillData;
        if (input->ExpectTag(50)) goto parse_petEquipBinary;
        break;
      }

      // repeated .protocol.user.PetEquipBinary petEquipBinary = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petEquipBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petequipbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_petEquipBinary;
        if (input->ExpectTag(56)) goto parse_teamPos;
        break;
      }

      // required uint32 teamPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teampos_)));
          set_has_teampos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_propData;
        break;
      }

      // required .protocol.user.PropData propData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_petLevel;
        break;
      }

      // required uint32 petLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petlevel_)));
          set_has_petlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_seq;
        break;
      }

      // required uint32 seq = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 petID = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  // required uint32 petExp = 2;
  if (has_petexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petexp(), output);
  }

  // required uint32 petStarLevel = 3;
  if (has_petstarlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petstarlevel(), output);
  }

  // required uint32 petQuality = 4;
  if (has_petquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->petquality(), output);
  }

  // repeated .protocol.user.SkillData petSkillData = 5;
  for (int i = 0; i < this->petskilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->petskilldata(i), output);
  }

  // repeated .protocol.user.PetEquipBinary petEquipBinary = 6;
  for (int i = 0; i < this->petequipbinary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->petequipbinary(i), output);
  }

  // required uint32 teamPos = 7;
  if (has_teampos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->teampos(), output);
  }

  // required .protocol.user.PropData propData = 8;
  if (has_propdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->propdata(), output);
  }

  // required uint32 petLevel = 9;
  if (has_petlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->petlevel(), output);
  }

  // required uint32 seq = 10;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 petID = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  // required uint32 petExp = 2;
  if (has_petexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petexp(), target);
  }

  // required uint32 petStarLevel = 3;
  if (has_petstarlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petstarlevel(), target);
  }

  // required uint32 petQuality = 4;
  if (has_petquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->petquality(), target);
  }

  // repeated .protocol.user.SkillData petSkillData = 5;
  for (int i = 0; i < this->petskilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->petskilldata(i), target);
  }

  // repeated .protocol.user.PetEquipBinary petEquipBinary = 6;
  for (int i = 0; i < this->petequipbinary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->petequipbinary(i), target);
  }

  // required uint32 teamPos = 7;
  if (has_teampos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->teampos(), target);
  }

  // required .protocol.user.PropData propData = 8;
  if (has_propdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->propdata(), target);
  }

  // required uint32 petLevel = 9;
  if (has_petlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->petlevel(), target);
  }

  // required uint32 seq = 10;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petID = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // required uint32 petExp = 2;
    if (has_petexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petexp());
    }

    // required uint32 petStarLevel = 3;
    if (has_petstarlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petstarlevel());
    }

    // required uint32 petQuality = 4;
    if (has_petquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petquality());
    }

    // required uint32 teamPos = 7;
    if (has_teampos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teampos());
    }

    // required .protocol.user.PropData propData = 8;
    if (has_propdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propdata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 petLevel = 9;
    if (has_petlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petlevel());
    }

    // required uint32 seq = 10;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  // repeated .protocol.user.SkillData petSkillData = 5;
  total_size += 1 * this->petskilldata_size();
  for (int i = 0; i < this->petskilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petskilldata(i));
  }

  // repeated .protocol.user.PetEquipBinary petEquipBinary = 6;
  total_size += 1 * this->petequipbinary_size();
  for (int i = 0; i < this->petequipbinary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petequipbinary(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetData::MergeFrom(const PetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  petskilldata_.MergeFrom(from.petskilldata_);
  petequipbinary_.MergeFrom(from.petequipbinary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_petexp()) {
      set_petexp(from.petexp());
    }
    if (from.has_petstarlevel()) {
      set_petstarlevel(from.petstarlevel());
    }
    if (from.has_petquality()) {
      set_petquality(from.petquality());
    }
    if (from.has_teampos()) {
      set_teampos(from.teampos());
    }
    if (from.has_propdata()) {
      mutable_propdata()->::protocol::user::PropData::MergeFrom(from.propdata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_petlevel()) {
      set_petlevel(from.petlevel());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetData::CopyFrom(const PetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003cf) != 0x000003cf) return false;

  for (int i = 0; i < petskilldata_size(); i++) {
    if (!this->petskilldata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < petequipbinary_size(); i++) {
    if (!this->petequipbinary(i).IsInitialized()) return false;
  }
  if (has_propdata()) {
    if (!this->propdata().IsInitialized()) return false;
  }
  return true;
}

void PetData::Swap(PetData* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(petexp_, other->petexp_);
    std::swap(petstarlevel_, other->petstarlevel_);
    std::swap(petquality_, other->petquality_);
    petskilldata_.Swap(&other->petskilldata_);
    petequipbinary_.Swap(&other->petequipbinary_);
    std::swap(teampos_, other->teampos_);
    std::swap(propdata_, other->propdata_);
    std::swap(petlevel_, other->petlevel_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetData_descriptor_;
  metadata.reflection = PetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropData::kMaxHPFieldNumber;
const int PropData::kMaxMPFieldNumber;
const int PropData::kPhysicalAttackFieldNumber;
const int PropData::kMagicAttackFieldNumber;
const int PropData::kPureDamageFieldNumber;
const int PropData::kPhysicalDefenceFieldNumber;
const int PropData::kMagicDefenceFieldNumber;
const int PropData::kCritFieldNumber;
const int PropData::kCritDefenceFieldNumber;
const int PropData::kCritValueFieldNumber;
const int PropData::kAppendCritFieldNumber;
const int PropData::kExtraCritFieldNumber;
const int PropData::kExtraCritDefenceFieldNumber;
const int PropData::kHitValueFieldNumber;
const int PropData::kAvoidValueFieldNumber;
const int PropData::kExtraHitValueFieldNumber;
const int PropData::kExtraAvoidValueFieldNumber;
const int PropData::kMoveSpeedFieldNumber;
const int PropData::kHpRecoverySpeedFieldNumber;
const int PropData::kMpRecoverySpeedFieldNumber;
#endif  // !_MSC_VER

PropData::PropData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropData::InitAsDefaultInstance() {
}

PropData::PropData(const PropData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropData::SharedCtor() {
  _cached_size_ = 0;
  maxhp_ = 0u;
  maxmp_ = 0u;
  physicalattack_ = 0u;
  magicattack_ = 0u;
  puredamage_ = 0u;
  physicaldefence_ = 0u;
  magicdefence_ = 0u;
  crit_ = 0u;
  critdefence_ = 0u;
  critvalue_ = 0u;
  appendcrit_ = 0u;
  extracrit_ = 0u;
  extracritdefence_ = 0u;
  hitvalue_ = 0u;
  avoidvalue_ = 0u;
  extrahitvalue_ = 0u;
  extraavoidvalue_ = 0u;
  movespeed_ = 0u;
  hprecoveryspeed_ = 0u;
  mprecoveryspeed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropData::~PropData() {
  SharedDtor();
}

void PropData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropData_descriptor_;
}

const PropData& PropData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

PropData* PropData::default_instance_ = NULL;

PropData* PropData::New() const {
  return new PropData;
}

void PropData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxhp_ = 0u;
    maxmp_ = 0u;
    physicalattack_ = 0u;
    magicattack_ = 0u;
    puredamage_ = 0u;
    physicaldefence_ = 0u;
    magicdefence_ = 0u;
    crit_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    critdefence_ = 0u;
    critvalue_ = 0u;
    appendcrit_ = 0u;
    extracrit_ = 0u;
    extracritdefence_ = 0u;
    hitvalue_ = 0u;
    avoidvalue_ = 0u;
    extrahitvalue_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    extraavoidvalue_ = 0u;
    movespeed_ = 0u;
    hprecoveryspeed_ = 0u;
    mprecoveryspeed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxMP;
        break;
      }

      // required uint32 maxMP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_physicalAttack;
        break;
      }

      // required uint32 physicalAttack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physicalattack_)));
          set_has_physicalattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_magicAttack;
        break;
      }

      // required uint32 magicAttack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pureDamage;
        break;
      }

      // required uint32 pureDamage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pureDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &puredamage_)));
          set_has_puredamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_physicalDefence;
        break;
      }

      // required uint32 physicalDefence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physicaldefence_)));
          set_has_physicaldefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_magicDefence;
        break;
      }

      // required uint32 magicDefence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicdefence_)));
          set_has_magicdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_crit;
        break;
      }

      // required uint32 crit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_critDefence;
        break;
      }

      // required uint32 critDefence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critdefence_)));
          set_has_critdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_critValue;
        break;
      }

      // required uint32 critValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critvalue_)));
          set_has_critvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_appendCrit;
        break;
      }

      // required uint32 appendCrit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appendCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appendcrit_)));
          set_has_appendcrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_extraCrit;
        break;
      }

      // required uint32 extraCrit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extracrit_)));
          set_has_extracrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_extraCritDefence;
        break;
      }

      // required uint32 extraCritDefence = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraCritDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extracritdefence_)));
          set_has_extracritdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hitValue;
        break;
      }

      // required uint32 hitValue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitvalue_)));
          set_has_hitvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_avoidValue;
        break;
      }

      // required uint32 avoidValue = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidvalue_)));
          set_has_avoidvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_extraHitValue;
        break;
      }

      // required uint32 extraHitValue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraHitValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extrahitvalue_)));
          set_has_extrahitvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_extraAvoidValue;
        break;
      }

      // required uint32 extraAvoidValue = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraAvoidValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraavoidvalue_)));
          set_has_extraavoidvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_moveSpeed;
        break;
      }

      // required uint32 moveSpeed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_hpRecoverySpeed;
        break;
      }

      // required uint32 hpRecoverySpeed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpRecoverySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hprecoveryspeed_)));
          set_has_hprecoveryspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_mpRecoverySpeed;
        break;
      }

      // required uint32 mpRecoverySpeed = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpRecoverySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mprecoveryspeed_)));
          set_has_mprecoveryspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 maxHP = 1;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxhp(), output);
  }

  // required uint32 maxMP = 2;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxmp(), output);
  }

  // required uint32 physicalAttack = 3;
  if (has_physicalattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->physicalattack(), output);
  }

  // required uint32 magicAttack = 4;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->magicattack(), output);
  }

  // required uint32 pureDamage = 5;
  if (has_puredamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->puredamage(), output);
  }

  // required uint32 physicalDefence = 6;
  if (has_physicaldefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->physicaldefence(), output);
  }

  // required uint32 magicDefence = 7;
  if (has_magicdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->magicdefence(), output);
  }

  // required uint32 crit = 8;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->crit(), output);
  }

  // required uint32 critDefence = 9;
  if (has_critdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->critdefence(), output);
  }

  // required uint32 critValue = 10;
  if (has_critvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->critvalue(), output);
  }

  // required uint32 appendCrit = 11;
  if (has_appendcrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->appendcrit(), output);
  }

  // required uint32 extraCrit = 12;
  if (has_extracrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->extracrit(), output);
  }

  // required uint32 extraCritDefence = 13;
  if (has_extracritdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->extracritdefence(), output);
  }

  // required uint32 hitValue = 14;
  if (has_hitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->hitvalue(), output);
  }

  // required uint32 avoidValue = 15;
  if (has_avoidvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->avoidvalue(), output);
  }

  // required uint32 extraHitValue = 16;
  if (has_extrahitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->extrahitvalue(), output);
  }

  // required uint32 extraAvoidValue = 17;
  if (has_extraavoidvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->extraavoidvalue(), output);
  }

  // required uint32 moveSpeed = 18;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->movespeed(), output);
  }

  // required uint32 hpRecoverySpeed = 19;
  if (has_hprecoveryspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->hprecoveryspeed(), output);
  }

  // required uint32 mpRecoverySpeed = 20;
  if (has_mprecoveryspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mprecoveryspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 maxHP = 1;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxhp(), target);
  }

  // required uint32 maxMP = 2;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxmp(), target);
  }

  // required uint32 physicalAttack = 3;
  if (has_physicalattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->physicalattack(), target);
  }

  // required uint32 magicAttack = 4;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->magicattack(), target);
  }

  // required uint32 pureDamage = 5;
  if (has_puredamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->puredamage(), target);
  }

  // required uint32 physicalDefence = 6;
  if (has_physicaldefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->physicaldefence(), target);
  }

  // required uint32 magicDefence = 7;
  if (has_magicdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->magicdefence(), target);
  }

  // required uint32 crit = 8;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->crit(), target);
  }

  // required uint32 critDefence = 9;
  if (has_critdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->critdefence(), target);
  }

  // required uint32 critValue = 10;
  if (has_critvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->critvalue(), target);
  }

  // required uint32 appendCrit = 11;
  if (has_appendcrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->appendcrit(), target);
  }

  // required uint32 extraCrit = 12;
  if (has_extracrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->extracrit(), target);
  }

  // required uint32 extraCritDefence = 13;
  if (has_extracritdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->extracritdefence(), target);
  }

  // required uint32 hitValue = 14;
  if (has_hitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->hitvalue(), target);
  }

  // required uint32 avoidValue = 15;
  if (has_avoidvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->avoidvalue(), target);
  }

  // required uint32 extraHitValue = 16;
  if (has_extrahitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->extrahitvalue(), target);
  }

  // required uint32 extraAvoidValue = 17;
  if (has_extraavoidvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->extraavoidvalue(), target);
  }

  // required uint32 moveSpeed = 18;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->movespeed(), target);
  }

  // required uint32 hpRecoverySpeed = 19;
  if (has_hprecoveryspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->hprecoveryspeed(), target);
  }

  // required uint32 mpRecoverySpeed = 20;
  if (has_mprecoveryspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mprecoveryspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxHP = 1;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // required uint32 maxMP = 2;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmp());
    }

    // required uint32 physicalAttack = 3;
    if (has_physicalattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physicalattack());
    }

    // required uint32 magicAttack = 4;
    if (has_magicattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicattack());
    }

    // required uint32 pureDamage = 5;
    if (has_puredamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->puredamage());
    }

    // required uint32 physicalDefence = 6;
    if (has_physicaldefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physicaldefence());
    }

    // required uint32 magicDefence = 7;
    if (has_magicdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicdefence());
    }

    // required uint32 crit = 8;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 critDefence = 9;
    if (has_critdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critdefence());
    }

    // required uint32 critValue = 10;
    if (has_critvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critvalue());
    }

    // required uint32 appendCrit = 11;
    if (has_appendcrit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appendcrit());
    }

    // required uint32 extraCrit = 12;
    if (has_extracrit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extracrit());
    }

    // required uint32 extraCritDefence = 13;
    if (has_extracritdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extracritdefence());
    }

    // required uint32 hitValue = 14;
    if (has_hitvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitvalue());
    }

    // required uint32 avoidValue = 15;
    if (has_avoidvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avoidvalue());
    }

    // required uint32 extraHitValue = 16;
    if (has_extrahitvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extrahitvalue());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 extraAvoidValue = 17;
    if (has_extraavoidvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraavoidvalue());
    }

    // required uint32 moveSpeed = 18;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // required uint32 hpRecoverySpeed = 19;
    if (has_hprecoveryspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hprecoveryspeed());
    }

    // required uint32 mpRecoverySpeed = 20;
    if (has_mprecoveryspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mprecoveryspeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropData::MergeFrom(const PropData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_physicalattack()) {
      set_physicalattack(from.physicalattack());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_puredamage()) {
      set_puredamage(from.puredamage());
    }
    if (from.has_physicaldefence()) {
      set_physicaldefence(from.physicaldefence());
    }
    if (from.has_magicdefence()) {
      set_magicdefence(from.magicdefence());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_critdefence()) {
      set_critdefence(from.critdefence());
    }
    if (from.has_critvalue()) {
      set_critvalue(from.critvalue());
    }
    if (from.has_appendcrit()) {
      set_appendcrit(from.appendcrit());
    }
    if (from.has_extracrit()) {
      set_extracrit(from.extracrit());
    }
    if (from.has_extracritdefence()) {
      set_extracritdefence(from.extracritdefence());
    }
    if (from.has_hitvalue()) {
      set_hitvalue(from.hitvalue());
    }
    if (from.has_avoidvalue()) {
      set_avoidvalue(from.avoidvalue());
    }
    if (from.has_extrahitvalue()) {
      set_extrahitvalue(from.extrahitvalue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_extraavoidvalue()) {
      set_extraavoidvalue(from.extraavoidvalue());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_hprecoveryspeed()) {
      set_hprecoveryspeed(from.hprecoveryspeed());
    }
    if (from.has_mprecoveryspeed()) {
      set_mprecoveryspeed(from.mprecoveryspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropData::CopyFrom(const PropData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;

  return true;
}

void PropData::Swap(PropData* other) {
  if (other != this) {
    std::swap(maxhp_, other->maxhp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(physicalattack_, other->physicalattack_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(puredamage_, other->puredamage_);
    std::swap(physicaldefence_, other->physicaldefence_);
    std::swap(magicdefence_, other->magicdefence_);
    std::swap(crit_, other->crit_);
    std::swap(critdefence_, other->critdefence_);
    std::swap(critvalue_, other->critvalue_);
    std::swap(appendcrit_, other->appendcrit_);
    std::swap(extracrit_, other->extracrit_);
    std::swap(extracritdefence_, other->extracritdefence_);
    std::swap(hitvalue_, other->hitvalue_);
    std::swap(avoidvalue_, other->avoidvalue_);
    std::swap(extrahitvalue_, other->extrahitvalue_);
    std::swap(extraavoidvalue_, other->extraavoidvalue_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(hprecoveryspeed_, other->hprecoveryspeed_);
    std::swap(mprecoveryspeed_, other->mprecoveryspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropData_descriptor_;
  metadata.reflection = PropData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEquipBinary::kPosFieldNumber;
const int PetEquipBinary::kItemBaseIDFieldNumber;
#endif  // !_MSC_VER

PetEquipBinary::PetEquipBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetEquipBinary::InitAsDefaultInstance() {
}

PetEquipBinary::PetEquipBinary(const PetEquipBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetEquipBinary::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  itembaseid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEquipBinary::~PetEquipBinary() {
  SharedDtor();
}

void PetEquipBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEquipBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEquipBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEquipBinary_descriptor_;
}

const PetEquipBinary& PetEquipBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

PetEquipBinary* PetEquipBinary::default_instance_ = NULL;

PetEquipBinary* PetEquipBinary::New() const {
  return new PetEquipBinary;
}

void PetEquipBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    itembaseid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEquipBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemBaseID;
        break;
      }

      // required uint32 itemBaseID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemBaseID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itembaseid_)));
          set_has_itembaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetEquipBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 itemBaseID = 2;
  if (has_itembaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itembaseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetEquipBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 itemBaseID = 2;
  if (has_itembaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itembaseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetEquipBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 itemBaseID = 2;
    if (has_itembaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itembaseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEquipBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEquipBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEquipBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEquipBinary::MergeFrom(const PetEquipBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_itembaseid()) {
      set_itembaseid(from.itembaseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEquipBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEquipBinary::CopyFrom(const PetEquipBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEquipBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PetEquipBinary::Swap(PetEquipBinary* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(itembaseid_, other->itembaseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEquipBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEquipBinary_descriptor_;
  metadata.reflection = PetEquipBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllItemData::kItemDataFieldNumber;
#endif  // !_MSC_VER

AllItemData::AllItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllItemData::InitAsDefaultInstance() {
}

AllItemData::AllItemData(const AllItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllItemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllItemData::~AllItemData() {
  SharedDtor();
}

void AllItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllItemData_descriptor_;
}

const AllItemData& AllItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

AllItemData* AllItemData::default_instance_ = NULL;

AllItemData* AllItemData::New() const {
  return new AllItemData;
}

void AllItemData::Clear() {
  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes itemData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes itemData = 1;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->itemdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes itemData = 1;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->itemdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllItemData::ByteSize() const {
  int total_size = 0;

  // repeated bytes itemData = 1;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllItemData::MergeFrom(const AllItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllItemData::CopyFrom(const AllItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllItemData::IsInitialized() const {

  return true;
}

void AllItemData::Swap(AllItemData* other) {
  if (other != this) {
    itemdata_.Swap(&other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllItemData_descriptor_;
  metadata.reflection = AllItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemColdData::kColdTypeFieldNumber;
const int ItemColdData::kEndTimeInSecFieldNumber;
#endif  // !_MSC_VER

ItemColdData::ItemColdData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemColdData::InitAsDefaultInstance() {
}

ItemColdData::ItemColdData(const ItemColdData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemColdData::SharedCtor() {
  _cached_size_ = 0;
  coldtype_ = 0u;
  endtimeinsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemColdData::~ItemColdData() {
  SharedDtor();
}

void ItemColdData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemColdData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemColdData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemColdData_descriptor_;
}

const ItemColdData& ItemColdData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

ItemColdData* ItemColdData::default_instance_ = NULL;

ItemColdData* ItemColdData::New() const {
  return new ItemColdData;
}

void ItemColdData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coldtype_ = 0u;
    endtimeinsec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemColdData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coldType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coldtype_)));
          set_has_coldtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTimeInSec;
        break;
      }

      // required uint32 endTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtimeinsec_)));
          set_has_endtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemColdData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 coldType = 1;
  if (has_coldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coldtype(), output);
  }

  // required uint32 endTimeInSec = 2;
  if (has_endtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtimeinsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemColdData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 coldType = 1;
  if (has_coldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coldtype(), target);
  }

  // required uint32 endTimeInSec = 2;
  if (has_endtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtimeinsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemColdData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coldType = 1;
    if (has_coldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coldtype());
    }

    // required uint32 endTimeInSec = 2;
    if (has_endtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtimeinsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemColdData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemColdData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemColdData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemColdData::MergeFrom(const ItemColdData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coldtype()) {
      set_coldtype(from.coldtype());
    }
    if (from.has_endtimeinsec()) {
      set_endtimeinsec(from.endtimeinsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemColdData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemColdData::CopyFrom(const ItemColdData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemColdData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemColdData::Swap(ItemColdData* other) {
  if (other != this) {
    std::swap(coldtype_, other->coldtype_);
    std::swap(endtimeinsec_, other->endtimeinsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemColdData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemColdData_descriptor_;
  metadata.reflection = ItemColdData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemColdBinary::kItemColdDataFieldNumber;
#endif  // !_MSC_VER

ItemColdBinary::ItemColdBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemColdBinary::InitAsDefaultInstance() {
}

ItemColdBinary::ItemColdBinary(const ItemColdBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemColdBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemColdBinary::~ItemColdBinary() {
  SharedDtor();
}

void ItemColdBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemColdBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemColdBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemColdBinary_descriptor_;
}

const ItemColdBinary& ItemColdBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

ItemColdBinary* ItemColdBinary::default_instance_ = NULL;

ItemColdBinary* ItemColdBinary::New() const {
  return new ItemColdBinary;
}

void ItemColdBinary::Clear() {
  itemcolddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemColdBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.ItemColdData itemColdData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemColdData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemcolddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemColdData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemColdBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.ItemColdData itemColdData = 1;
  for (int i = 0; i < this->itemcolddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemcolddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemColdBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.ItemColdData itemColdData = 1;
  for (int i = 0; i < this->itemcolddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemcolddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemColdBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.user.ItemColdData itemColdData = 1;
  total_size += 1 * this->itemcolddata_size();
  for (int i = 0; i < this->itemcolddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemcolddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemColdBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemColdBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemColdBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemColdBinary::MergeFrom(const ItemColdBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemcolddata_.MergeFrom(from.itemcolddata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemColdBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemColdBinary::CopyFrom(const ItemColdBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemColdBinary::IsInitialized() const {

  for (int i = 0; i < itemcolddata_size(); i++) {
    if (!this->itemcolddata(i).IsInitialized()) return false;
  }
  return true;
}

void ItemColdBinary::Swap(ItemColdBinary* other) {
  if (other != this) {
    itemcolddata_.Swap(&other->itemcolddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemColdBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemColdBinary_descriptor_;
  metadata.reflection = ItemColdBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllPackageBinary::kItemsFieldNumber;
const int AllPackageBinary::kMainPackageBinaryFieldNumber;
const int AllPackageBinary::kEquipPackageBinaryFieldNumber;
#endif  // !_MSC_VER

AllPackageBinary::AllPackageBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllPackageBinary::InitAsDefaultInstance() {
  mainpackagebinary_ = const_cast< ::protocol::user::MainPackageBinary*>(&::protocol::user::MainPackageBinary::default_instance());
  equippackagebinary_ = const_cast< ::protocol::user::EquipPackageBinary*>(&::protocol::user::EquipPackageBinary::default_instance());
}

AllPackageBinary::AllPackageBinary(const AllPackageBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllPackageBinary::SharedCtor() {
  _cached_size_ = 0;
  mainpackagebinary_ = NULL;
  equippackagebinary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllPackageBinary::~AllPackageBinary() {
  SharedDtor();
}

void AllPackageBinary::SharedDtor() {
  if (this != default_instance_) {
    delete mainpackagebinary_;
    delete equippackagebinary_;
  }
}

void AllPackageBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllPackageBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllPackageBinary_descriptor_;
}

const AllPackageBinary& AllPackageBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

AllPackageBinary* AllPackageBinary::default_instance_ = NULL;

AllPackageBinary* AllPackageBinary::New() const {
  return new AllPackageBinary;
}

void AllPackageBinary::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_mainpackagebinary()) {
      if (mainpackagebinary_ != NULL) mainpackagebinary_->::protocol::user::MainPackageBinary::Clear();
    }
    if (has_equippackagebinary()) {
      if (equippackagebinary_ != NULL) equippackagebinary_->::protocol::user::EquipPackageBinary::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllPackageBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.item.ItemBinary items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_mainPackageBinary;
        break;
      }

      // optional .protocol.user.MainPackageBinary mainPackageBinary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainPackageBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainpackagebinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equipPackageBinary;
        break;
      }

      // optional .protocol.user.EquipPackageBinary equipPackageBinary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipPackageBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equippackagebinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllPackageBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.item.ItemBinary items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional .protocol.user.MainPackageBinary mainPackageBinary = 2;
  if (has_mainpackagebinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mainpackagebinary(), output);
  }

  // optional .protocol.user.EquipPackageBinary equipPackageBinary = 3;
  if (has_equippackagebinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equippackagebinary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllPackageBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.item.ItemBinary items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional .protocol.user.MainPackageBinary mainPackageBinary = 2;
  if (has_mainpackagebinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mainpackagebinary(), target);
  }

  // optional .protocol.user.EquipPackageBinary equipPackageBinary = 3;
  if (has_equippackagebinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equippackagebinary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllPackageBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .protocol.user.MainPackageBinary mainPackageBinary = 2;
    if (has_mainpackagebinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mainpackagebinary());
    }

    // optional .protocol.user.EquipPackageBinary equipPackageBinary = 3;
    if (has_equippackagebinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equippackagebinary());
    }

  }
  // repeated .protocol.item.ItemBinary items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllPackageBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllPackageBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllPackageBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllPackageBinary::MergeFrom(const AllPackageBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mainpackagebinary()) {
      mutable_mainpackagebinary()->::protocol::user::MainPackageBinary::MergeFrom(from.mainpackagebinary());
    }
    if (from.has_equippackagebinary()) {
      mutable_equippackagebinary()->::protocol::user::EquipPackageBinary::MergeFrom(from.equippackagebinary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllPackageBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllPackageBinary::CopyFrom(const AllPackageBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllPackageBinary::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  if (has_mainpackagebinary()) {
    if (!this->mainpackagebinary().IsInitialized()) return false;
  }
  if (has_equippackagebinary()) {
    if (!this->equippackagebinary().IsInitialized()) return false;
  }
  return true;
}

void AllPackageBinary::Swap(AllPackageBinary* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(mainpackagebinary_, other->mainpackagebinary_);
    std::swap(equippackagebinary_, other->equippackagebinary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllPackageBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllPackageBinary_descriptor_;
  metadata.reflection = AllPackageBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBuildData::kWeaponeIDFieldNumber;
const int SkillBuildData::kBuildBaseDataFieldNumber;
#endif  // !_MSC_VER

SkillBuildData::SkillBuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillBuildData::InitAsDefaultInstance() {
}

SkillBuildData::SkillBuildData(const SkillBuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillBuildData::SharedCtor() {
  _cached_size_ = 0;
  weaponeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBuildData::~SkillBuildData() {
  SharedDtor();
}

void SkillBuildData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillBuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBuildData_descriptor_;
}

const SkillBuildData& SkillBuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

SkillBuildData* SkillBuildData::default_instance_ = NULL;

SkillBuildData* SkillBuildData::New() const {
  return new SkillBuildData;
}

void SkillBuildData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weaponeid_ = 0u;
  }
  buildbasedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillBuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 weaponeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponeid_)));
          set_has_weaponeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buildBaseData;
        break;
      }

      // repeated .protocol.user.BuildBaseData buildBaseData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildBaseData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildbasedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buildBaseData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillBuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 weaponeID = 1;
  if (has_weaponeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weaponeid(), output);
  }

  // repeated .protocol.user.BuildBaseData buildBaseData = 2;
  for (int i = 0; i < this->buildbasedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buildbasedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillBuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 weaponeID = 1;
  if (has_weaponeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weaponeid(), target);
  }

  // repeated .protocol.user.BuildBaseData buildBaseData = 2;
  for (int i = 0; i < this->buildbasedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buildbasedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillBuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 weaponeID = 1;
    if (has_weaponeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponeid());
    }

  }
  // repeated .protocol.user.BuildBaseData buildBaseData = 2;
  total_size += 1 * this->buildbasedata_size();
  for (int i = 0; i < this->buildbasedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildbasedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillBuildData::MergeFrom(const SkillBuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildbasedata_.MergeFrom(from.buildbasedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponeid()) {
      set_weaponeid(from.weaponeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillBuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillBuildData::CopyFrom(const SkillBuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBuildData::IsInitialized() const {

  return true;
}

void SkillBuildData::Swap(SkillBuildData* other) {
  if (other != this) {
    std::swap(weaponeid_, other->weaponeid_);
    buildbasedata_.Swap(&other->buildbasedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillBuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBuildData_descriptor_;
  metadata.reflection = SkillBuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildBaseData::kBuildIDFieldNumber;
const int BuildBaseData::kBuildNameFieldNumber;
const int BuildBaseData::kUseSkillDataFieldNumber;
#endif  // !_MSC_VER

BuildBaseData::BuildBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildBaseData::InitAsDefaultInstance() {
}

BuildBaseData::BuildBaseData(const BuildBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildBaseData::SharedCtor() {
  _cached_size_ = 0;
  buildid_ = 0u;
  buildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildBaseData::~BuildBaseData() {
  SharedDtor();
}

void BuildBaseData::SharedDtor() {
  if (buildname_ != &::google::protobuf::internal::kEmptyString) {
    delete buildname_;
  }
  if (this != default_instance_) {
  }
}

void BuildBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildBaseData_descriptor_;
}

const BuildBaseData& BuildBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

BuildBaseData* BuildBaseData::default_instance_ = NULL;

BuildBaseData* BuildBaseData::New() const {
  return new BuildBaseData;
}

void BuildBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildid_ = 0u;
    if (has_buildname()) {
      if (buildname_ != &::google::protobuf::internal::kEmptyString) {
        buildname_->clear();
      }
    }
  }
  useskilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buildName;
        break;
      }

      // optional string buildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildname().data(), this->buildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_useSkillData;
        break;
      }

      // repeated .protocol.user.UseSkillData useSkillData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useSkillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useskilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_useSkillData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buildID = 1;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildid(), output);
  }

  // optional string buildName = 2;
  if (has_buildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildname().data(), this->buildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->buildname(), output);
  }

  // repeated .protocol.user.UseSkillData useSkillData = 3;
  for (int i = 0; i < this->useskilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->useskilldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buildID = 1;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildid(), target);
  }

  // optional string buildName = 2;
  if (has_buildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildname().data(), this->buildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buildname(), target);
  }

  // repeated .protocol.user.UseSkillData useSkillData = 3;
  for (int i = 0; i < this->useskilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->useskilldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buildID = 1;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

    // optional string buildName = 2;
    if (has_buildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildname());
    }

  }
  // repeated .protocol.user.UseSkillData useSkillData = 3;
  total_size += 1 * this->useskilldata_size();
  for (int i = 0; i < this->useskilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useskilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildBaseData::MergeFrom(const BuildBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  useskilldata_.MergeFrom(from.useskilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_buildname()) {
      set_buildname(from.buildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildBaseData::CopyFrom(const BuildBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildBaseData::IsInitialized() const {

  return true;
}

void BuildBaseData::Swap(BuildBaseData* other) {
  if (other != this) {
    std::swap(buildid_, other->buildid_);
    std::swap(buildname_, other->buildname_);
    useskilldata_.Swap(&other->useskilldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildBaseData_descriptor_;
  metadata.reflection = BuildBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseBuildData::kWeaponeIDFieldNumber;
const int UseBuildData::kBuildIDFieldNumber;
#endif  // !_MSC_VER

UseBuildData::UseBuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseBuildData::InitAsDefaultInstance() {
}

UseBuildData::UseBuildData(const UseBuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseBuildData::SharedCtor() {
  _cached_size_ = 0;
  weaponeid_ = 0u;
  buildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseBuildData::~UseBuildData() {
  SharedDtor();
}

void UseBuildData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseBuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseBuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseBuildData_descriptor_;
}

const UseBuildData& UseBuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UseBuildData* UseBuildData::default_instance_ = NULL;

UseBuildData* UseBuildData::New() const {
  return new UseBuildData;
}

void UseBuildData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weaponeid_ = 0u;
    buildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseBuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 weaponeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponeid_)));
          set_has_weaponeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildID;
        break;
      }

      // optional uint32 buildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseBuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 weaponeID = 1;
  if (has_weaponeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weaponeid(), output);
  }

  // optional uint32 buildID = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseBuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 weaponeID = 1;
  if (has_weaponeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weaponeid(), target);
  }

  // optional uint32 buildID = 2;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseBuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 weaponeID = 1;
    if (has_weaponeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponeid());
    }

    // optional uint32 buildID = 2;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseBuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseBuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseBuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseBuildData::MergeFrom(const UseBuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponeid()) {
      set_weaponeid(from.weaponeid());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseBuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseBuildData::CopyFrom(const UseBuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseBuildData::IsInitialized() const {

  return true;
}

void UseBuildData::Swap(UseBuildData* other) {
  if (other != this) {
    std::swap(weaponeid_, other->weaponeid_);
    std::swap(buildid_, other->buildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseBuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseBuildData_descriptor_;
  metadata.reflection = UseBuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillData::kSkillIDFieldNumber;
const int UseSkillData::kSelectIndexFieldNumber;
#endif  // !_MSC_VER

UseSkillData::UseSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillData::InitAsDefaultInstance() {
}

UseSkillData::UseSkillData(const UseSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  selectindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillData::~UseSkillData() {
  SharedDtor();
}

void UseSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillData_descriptor_;
}

const UseSkillData& UseSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UseSkillData* UseSkillData::default_instance_ = NULL;

UseSkillData* UseSkillData::New() const {
  return new UseSkillData;
}

void UseSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    selectindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selectIndex;
        break;
      }

      // optional uint32 selectIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selectindex_)));
          set_has_selectindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 selectIndex = 2;
  if (has_selectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selectindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 selectIndex = 2;
  if (has_selectindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selectindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 selectIndex = 2;
    if (has_selectindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selectindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillData::MergeFrom(const UseSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_selectindex()) {
      set_selectindex(from.selectindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillData::CopyFrom(const UseSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillData::IsInitialized() const {

  return true;
}

void UseSkillData::Swap(UseSkillData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(selectindex_, other->selectindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillData_descriptor_;
  metadata.reflection = UseSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillBinary::kUseSkillDataFieldNumber;
const int UseSkillBinary::kSkillBuilddataFieldNumber;
const int UseSkillBinary::kUseBuildDataFieldNumber;
#endif  // !_MSC_VER

UseSkillBinary::UseSkillBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillBinary::InitAsDefaultInstance() {
}

UseSkillBinary::UseSkillBinary(const UseSkillBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillBinary::~UseSkillBinary() {
  SharedDtor();
}

void UseSkillBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSkillBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillBinary_descriptor_;
}

const UseSkillBinary& UseSkillBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UseSkillBinary* UseSkillBinary::default_instance_ = NULL;

UseSkillBinary* UseSkillBinary::New() const {
  return new UseSkillBinary;
}

void UseSkillBinary::Clear() {
  useskilldata_.Clear();
  skillbuilddata_.Clear();
  usebuilddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.UseSkillData useSkillData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useSkillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useskilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_useSkillData;
        if (input->ExpectTag(18)) goto parse_skillBuilddata;
        break;
      }

      // repeated .protocol.user.SkillBuildData skillBuilddata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillBuilddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillbuilddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillBuilddata;
        if (input->ExpectTag(26)) goto parse_useBuildData;
        break;
      }

      // repeated .protocol.user.UseBuildData useBuildData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useBuildData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usebuilddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_useBuildData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.UseSkillData useSkillData = 1;
  for (int i = 0; i < this->useskilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->useskilldata(i), output);
  }

  // repeated .protocol.user.SkillBuildData skillBuilddata = 2;
  for (int i = 0; i < this->skillbuilddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillbuilddata(i), output);
  }

  // repeated .protocol.user.UseBuildData useBuildData = 3;
  for (int i = 0; i < this->usebuilddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usebuilddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.UseSkillData useSkillData = 1;
  for (int i = 0; i < this->useskilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->useskilldata(i), target);
  }

  // repeated .protocol.user.SkillBuildData skillBuilddata = 2;
  for (int i = 0; i < this->skillbuilddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillbuilddata(i), target);
  }

  // repeated .protocol.user.UseBuildData useBuildData = 3;
  for (int i = 0; i < this->usebuilddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->usebuilddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.user.UseSkillData useSkillData = 1;
  total_size += 1 * this->useskilldata_size();
  for (int i = 0; i < this->useskilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useskilldata(i));
  }

  // repeated .protocol.user.SkillBuildData skillBuilddata = 2;
  total_size += 1 * this->skillbuilddata_size();
  for (int i = 0; i < this->skillbuilddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillbuilddata(i));
  }

  // repeated .protocol.user.UseBuildData useBuildData = 3;
  total_size += 1 * this->usebuilddata_size();
  for (int i = 0; i < this->usebuilddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usebuilddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillBinary::MergeFrom(const UseSkillBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  useskilldata_.MergeFrom(from.useskilldata_);
  skillbuilddata_.MergeFrom(from.skillbuilddata_);
  usebuilddata_.MergeFrom(from.usebuilddata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillBinary::CopyFrom(const UseSkillBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillBinary::IsInitialized() const {

  return true;
}

void UseSkillBinary::Swap(UseSkillBinary* other) {
  if (other != this) {
    useskilldata_.Swap(&other->useskilldata_);
    skillbuilddata_.Swap(&other->skillbuilddata_);
    usebuilddata_.Swap(&other->usebuilddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillBinary_descriptor_;
  metadata.reflection = UseSkillBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaveSkillBinary::kSkillDataFieldNumber;
const int HaveSkillBinary::kUserUnlockWeaponDataFieldNumber;
#endif  // !_MSC_VER

HaveSkillBinary::HaveSkillBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaveSkillBinary::InitAsDefaultInstance() {
}

HaveSkillBinary::HaveSkillBinary(const HaveSkillBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaveSkillBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaveSkillBinary::~HaveSkillBinary() {
  SharedDtor();
}

void HaveSkillBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaveSkillBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaveSkillBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaveSkillBinary_descriptor_;
}

const HaveSkillBinary& HaveSkillBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

HaveSkillBinary* HaveSkillBinary::default_instance_ = NULL;

HaveSkillBinary* HaveSkillBinary::New() const {
  return new HaveSkillBinary;
}

void HaveSkillBinary::Clear() {
  skilldata_.Clear();
  userunlockweapondata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaveSkillBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.SkillData skillData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillData;
        if (input->ExpectTag(18)) goto parse_userUnlockWeaponData;
        break;
      }

      // repeated .protocol.user.UserUnlockWeaponData userUnlockWeaponData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userUnlockWeaponData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userunlockweapondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userUnlockWeaponData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaveSkillBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.SkillData skillData = 1;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skilldata(i), output);
  }

  // repeated .protocol.user.UserUnlockWeaponData userUnlockWeaponData = 2;
  for (int i = 0; i < this->userunlockweapondata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userunlockweapondata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaveSkillBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.SkillData skillData = 1;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skilldata(i), target);
  }

  // repeated .protocol.user.UserUnlockWeaponData userUnlockWeaponData = 2;
  for (int i = 0; i < this->userunlockweapondata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userunlockweapondata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaveSkillBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.user.SkillData skillData = 1;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  // repeated .protocol.user.UserUnlockWeaponData userUnlockWeaponData = 2;
  total_size += 1 * this->userunlockweapondata_size();
  for (int i = 0; i < this->userunlockweapondata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userunlockweapondata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaveSkillBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaveSkillBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaveSkillBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaveSkillBinary::MergeFrom(const HaveSkillBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  userunlockweapondata_.MergeFrom(from.userunlockweapondata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaveSkillBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaveSkillBinary::CopyFrom(const HaveSkillBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaveSkillBinary::IsInitialized() const {

  for (int i = 0; i < skilldata_size(); i++) {
    if (!this->skilldata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < userunlockweapondata_size(); i++) {
    if (!this->userunlockweapondata(i).IsInitialized()) return false;
  }
  return true;
}

void HaveSkillBinary::Swap(HaveSkillBinary* other) {
  if (other != this) {
    skilldata_.Swap(&other->skilldata_);
    userunlockweapondata_.Swap(&other->userunlockweapondata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaveSkillBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaveSkillBinary_descriptor_;
  metadata.reflection = HaveSkillBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kSkillIDFieldNumber;
const int SkillData::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLevel;
        break;
      }

      // required uint32 skillLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 skillLevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 skillLevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 skillLevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserUnlockWeaponData::kWeaponIDFieldNumber;
const int UserUnlockWeaponData::kUnlockStateFieldNumber;
#endif  // !_MSC_VER

UserUnlockWeaponData::UserUnlockWeaponData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserUnlockWeaponData::InitAsDefaultInstance() {
}

UserUnlockWeaponData::UserUnlockWeaponData(const UserUnlockWeaponData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserUnlockWeaponData::SharedCtor() {
  _cached_size_ = 0;
  weaponid_ = 0u;
  unlockstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserUnlockWeaponData::~UserUnlockWeaponData() {
  SharedDtor();
}

void UserUnlockWeaponData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserUnlockWeaponData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserUnlockWeaponData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserUnlockWeaponData_descriptor_;
}

const UserUnlockWeaponData& UserUnlockWeaponData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UserUnlockWeaponData* UserUnlockWeaponData::default_instance_ = NULL;

UserUnlockWeaponData* UserUnlockWeaponData::New() const {
  return new UserUnlockWeaponData;
}

void UserUnlockWeaponData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weaponid_ = 0u;
    unlockstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserUnlockWeaponData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 weaponID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unlockState;
        break;
      }

      // required uint32 unlockState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlockstate_)));
          set_has_unlockstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserUnlockWeaponData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 weaponID = 1;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weaponid(), output);
  }

  // required uint32 unlockState = 2;
  if (has_unlockstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlockstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserUnlockWeaponData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 weaponID = 1;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weaponid(), target);
  }

  // required uint32 unlockState = 2;
  if (has_unlockstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlockstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserUnlockWeaponData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 weaponID = 1;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // required uint32 unlockState = 2;
    if (has_unlockstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlockstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserUnlockWeaponData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserUnlockWeaponData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserUnlockWeaponData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserUnlockWeaponData::MergeFrom(const UserUnlockWeaponData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_unlockstate()) {
      set_unlockstate(from.unlockstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserUnlockWeaponData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserUnlockWeaponData::CopyFrom(const UserUnlockWeaponData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserUnlockWeaponData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserUnlockWeaponData::Swap(UserUnlockWeaponData* other) {
  if (other != this) {
    std::swap(weaponid_, other->weaponid_);
    std::swap(unlockstate_, other->unlockstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserUnlockWeaponData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserUnlockWeaponData_descriptor_;
  metadata.reflection = UserUnlockWeaponData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockPassiveSkillBarBinary::kIndexFieldNumber;
#endif  // !_MSC_VER

UnlockPassiveSkillBarBinary::UnlockPassiveSkillBarBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlockPassiveSkillBarBinary::InitAsDefaultInstance() {
}

UnlockPassiveSkillBarBinary::UnlockPassiveSkillBarBinary(const UnlockPassiveSkillBarBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlockPassiveSkillBarBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPassiveSkillBarBinary::~UnlockPassiveSkillBarBinary() {
  SharedDtor();
}

void UnlockPassiveSkillBarBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockPassiveSkillBarBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPassiveSkillBarBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPassiveSkillBarBinary_descriptor_;
}

const UnlockPassiveSkillBarBinary& UnlockPassiveSkillBarBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UnlockPassiveSkillBarBinary* UnlockPassiveSkillBarBinary::default_instance_ = NULL;

UnlockPassiveSkillBarBinary* UnlockPassiveSkillBarBinary::New() const {
  return new UnlockPassiveSkillBarBinary;
}

void UnlockPassiveSkillBarBinary::Clear() {
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPassiveSkillBarBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlockPassiveSkillBarBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlockPassiveSkillBarBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlockPassiveSkillBarBinary::ByteSize() const {
  int total_size = 0;

  // repeated uint32 index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPassiveSkillBarBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPassiveSkillBarBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPassiveSkillBarBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPassiveSkillBarBinary::MergeFrom(const UnlockPassiveSkillBarBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPassiveSkillBarBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPassiveSkillBarBinary::CopyFrom(const UnlockPassiveSkillBarBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPassiveSkillBarBinary::IsInitialized() const {

  return true;
}

void UnlockPassiveSkillBarBinary::Swap(UnlockPassiveSkillBarBinary* other) {
  if (other != this) {
    index_.Swap(&other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPassiveSkillBarBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPassiveSkillBarBinary_descriptor_;
  metadata.reflection = UnlockPassiveSkillBarBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplBinary::kDupldataFieldNumber;
const int DuplBinary::kRealmDataFieldNumber;
const int DuplBinary::kExpDuplRemainTimesFieldNumber;
const int DuplBinary::kMoneyDuplRemainTimesFieldNumber;
const int DuplBinary::kGamblingDataBinaryFieldNumber;
const int DuplBinary::kItemDuplRemainTimesFieldNumber;
const int DuplBinary::kBuyBackTimesFieldNumber;
#endif  // !_MSC_VER

DuplBinary::DuplBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplBinary::InitAsDefaultInstance() {
  gamblingdatabinary_ = const_cast< ::protocol::user::GamblingDataBinary*>(&::protocol::user::GamblingDataBinary::default_instance());
}

DuplBinary::DuplBinary(const DuplBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplBinary::SharedCtor() {
  _cached_size_ = 0;
  expduplremaintimes_ = 0u;
  moneyduplremaintimes_ = 0u;
  gamblingdatabinary_ = NULL;
  itemduplremaintimes_ = 0u;
  buybacktimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplBinary::~DuplBinary() {
  SharedDtor();
}

void DuplBinary::SharedDtor() {
  if (this != default_instance_) {
    delete gamblingdatabinary_;
  }
}

void DuplBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplBinary_descriptor_;
}

const DuplBinary& DuplBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DuplBinary* DuplBinary::default_instance_ = NULL;

DuplBinary* DuplBinary::New() const {
  return new DuplBinary;
}

void DuplBinary::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    expduplremaintimes_ = 0u;
    moneyduplremaintimes_ = 0u;
    if (has_gamblingdatabinary()) {
      if (gamblingdatabinary_ != NULL) gamblingdatabinary_->::protocol::user::GamblingDataBinary::Clear();
    }
    itemduplremaintimes_ = 0u;
    buybacktimes_ = 0u;
  }
  dupldata_.Clear();
  realmdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.DuplData dupldata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dupldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dupldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dupldata;
        if (input->ExpectTag(18)) goto parse_realmData;
        break;
      }

      // repeated .protocol.user.RealmData realmData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realmData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_realmdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_realmData;
        if (input->ExpectTag(24)) goto parse_ExpDuplRemainTimes;
        break;
      }

      // required uint32 ExpDuplRemainTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExpDuplRemainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expduplremaintimes_)));
          set_has_expduplremaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MoneyDuplRemainTimes;
        break;
      }

      // required uint32 MoneyDuplRemainTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MoneyDuplRemainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneyduplremaintimes_)));
          set_has_moneyduplremaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gamblingDataBinary;
        break;
      }

      // required .protocol.user.GamblingDataBinary gamblingDataBinary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamblingDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamblingdatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ItemDuplRemainTimes;
        break;
      }

      // required uint32 ItemDuplRemainTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemDuplRemainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemduplremaintimes_)));
          set_has_itemduplremaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buyBackTimes;
        break;
      }

      // optional uint32 buyBackTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyBackTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buybacktimes_)));
          set_has_buybacktimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.DuplData dupldata = 1;
  for (int i = 0; i < this->dupldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dupldata(i), output);
  }

  // repeated .protocol.user.RealmData realmData = 2;
  for (int i = 0; i < this->realmdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->realmdata(i), output);
  }

  // required uint32 ExpDuplRemainTimes = 3;
  if (has_expduplremaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expduplremaintimes(), output);
  }

  // required uint32 MoneyDuplRemainTimes = 4;
  if (has_moneyduplremaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->moneyduplremaintimes(), output);
  }

  // required .protocol.user.GamblingDataBinary gamblingDataBinary = 5;
  if (has_gamblingdatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gamblingdatabinary(), output);
  }

  // required uint32 ItemDuplRemainTimes = 6;
  if (has_itemduplremaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemduplremaintimes(), output);
  }

  // optional uint32 buyBackTimes = 7;
  if (has_buybacktimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buybacktimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.DuplData dupldata = 1;
  for (int i = 0; i < this->dupldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dupldata(i), target);
  }

  // repeated .protocol.user.RealmData realmData = 2;
  for (int i = 0; i < this->realmdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->realmdata(i), target);
  }

  // required uint32 ExpDuplRemainTimes = 3;
  if (has_expduplremaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expduplremaintimes(), target);
  }

  // required uint32 MoneyDuplRemainTimes = 4;
  if (has_moneyduplremaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->moneyduplremaintimes(), target);
  }

  // required .protocol.user.GamblingDataBinary gamblingDataBinary = 5;
  if (has_gamblingdatabinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gamblingdatabinary(), target);
  }

  // required uint32 ItemDuplRemainTimes = 6;
  if (has_itemduplremaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->itemduplremaintimes(), target);
  }

  // optional uint32 buyBackTimes = 7;
  if (has_buybacktimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buybacktimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 ExpDuplRemainTimes = 3;
    if (has_expduplremaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expduplremaintimes());
    }

    // required uint32 MoneyDuplRemainTimes = 4;
    if (has_moneyduplremaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneyduplremaintimes());
    }

    // required .protocol.user.GamblingDataBinary gamblingDataBinary = 5;
    if (has_gamblingdatabinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamblingdatabinary());
    }

    // required uint32 ItemDuplRemainTimes = 6;
    if (has_itemduplremaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemduplremaintimes());
    }

    // optional uint32 buyBackTimes = 7;
    if (has_buybacktimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buybacktimes());
    }

  }
  // repeated .protocol.user.DuplData dupldata = 1;
  total_size += 1 * this->dupldata_size();
  for (int i = 0; i < this->dupldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dupldata(i));
  }

  // repeated .protocol.user.RealmData realmData = 2;
  total_size += 1 * this->realmdata_size();
  for (int i = 0; i < this->realmdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->realmdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplBinary::MergeFrom(const DuplBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  dupldata_.MergeFrom(from.dupldata_);
  realmdata_.MergeFrom(from.realmdata_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_expduplremaintimes()) {
      set_expduplremaintimes(from.expduplremaintimes());
    }
    if (from.has_moneyduplremaintimes()) {
      set_moneyduplremaintimes(from.moneyduplremaintimes());
    }
    if (from.has_gamblingdatabinary()) {
      mutable_gamblingdatabinary()->::protocol::user::GamblingDataBinary::MergeFrom(from.gamblingdatabinary());
    }
    if (from.has_itemduplremaintimes()) {
      set_itemduplremaintimes(from.itemduplremaintimes());
    }
    if (from.has_buybacktimes()) {
      set_buybacktimes(from.buybacktimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplBinary::CopyFrom(const DuplBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;

  for (int i = 0; i < dupldata_size(); i++) {
    if (!this->dupldata(i).IsInitialized()) return false;
  }
  return true;
}

void DuplBinary::Swap(DuplBinary* other) {
  if (other != this) {
    dupldata_.Swap(&other->dupldata_);
    realmdata_.Swap(&other->realmdata_);
    std::swap(expduplremaintimes_, other->expduplremaintimes_);
    std::swap(moneyduplremaintimes_, other->moneyduplremaintimes_);
    std::swap(gamblingdatabinary_, other->gamblingdatabinary_);
    std::swap(itemduplremaintimes_, other->itemduplremaintimes_);
    std::swap(buybacktimes_, other->buybacktimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplBinary_descriptor_;
  metadata.reflection = DuplBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplData::kDuplIDFieldNumber;
const int DuplData::kDuplStarFieldNumber;
const int DuplData::kRemainTimesFieldNumber;
const int DuplData::kHavePlayStoryFieldNumber;
const int DuplData::kResetRemainTimesFieldNumber;
#endif  // !_MSC_VER

DuplData::DuplData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplData::InitAsDefaultInstance() {
}

DuplData::DuplData(const DuplData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplData::SharedCtor() {
  _cached_size_ = 0;
  duplid_ = 0u;
  duplstar_ = 0u;
  remaintimes_ = 0u;
  haveplaystory_ = 0u;
  resetremaintimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplData::~DuplData() {
  SharedDtor();
}

void DuplData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplData_descriptor_;
}

const DuplData& DuplData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DuplData* DuplData::default_instance_ = NULL;

DuplData* DuplData::New() const {
  return new DuplData;
}

void DuplData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplid_ = 0u;
    duplstar_ = 0u;
    remaintimes_ = 0u;
    haveplaystory_ = 0u;
    resetremaintimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 duplID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplid_)));
          set_has_duplid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplStar;
        break;
      }

      // required uint32 duplStar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplstar_)));
          set_has_duplstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainTimes;
        break;
      }

      // required uint32 remainTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintimes_)));
          set_has_remaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_havePlayStory;
        break;
      }

      // required uint32 havePlayStory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havePlayStory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haveplaystory_)));
          set_has_haveplaystory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resetRemainTimes;
        break;
      }

      // required uint32 resetRemainTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetRemainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetremaintimes_)));
          set_has_resetremaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 duplID = 1;
  if (has_duplid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duplid(), output);
  }

  // required uint32 duplStar = 2;
  if (has_duplstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duplstar(), output);
  }

  // required uint32 remainTimes = 3;
  if (has_remaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remaintimes(), output);
  }

  // required uint32 havePlayStory = 4;
  if (has_haveplaystory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->haveplaystory(), output);
  }

  // required uint32 resetRemainTimes = 5;
  if (has_resetremaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resetremaintimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 duplID = 1;
  if (has_duplid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duplid(), target);
  }

  // required uint32 duplStar = 2;
  if (has_duplstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duplstar(), target);
  }

  // required uint32 remainTimes = 3;
  if (has_remaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remaintimes(), target);
  }

  // required uint32 havePlayStory = 4;
  if (has_haveplaystory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->haveplaystory(), target);
  }

  // required uint32 resetRemainTimes = 5;
  if (has_resetremaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resetremaintimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 duplID = 1;
    if (has_duplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplid());
    }

    // required uint32 duplStar = 2;
    if (has_duplstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplstar());
    }

    // required uint32 remainTimes = 3;
    if (has_remaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintimes());
    }

    // required uint32 havePlayStory = 4;
    if (has_haveplaystory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haveplaystory());
    }

    // required uint32 resetRemainTimes = 5;
    if (has_resetremaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetremaintimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplData::MergeFrom(const DuplData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplid()) {
      set_duplid(from.duplid());
    }
    if (from.has_duplstar()) {
      set_duplstar(from.duplstar());
    }
    if (from.has_remaintimes()) {
      set_remaintimes(from.remaintimes());
    }
    if (from.has_haveplaystory()) {
      set_haveplaystory(from.haveplaystory());
    }
    if (from.has_resetremaintimes()) {
      set_resetremaintimes(from.resetremaintimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplData::CopyFrom(const DuplData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DuplData::Swap(DuplData* other) {
  if (other != this) {
    std::swap(duplid_, other->duplid_);
    std::swap(duplstar_, other->duplstar_);
    std::swap(remaintimes_, other->remaintimes_);
    std::swap(haveplaystory_, other->haveplaystory_);
    std::swap(resetremaintimes_, other->resetremaintimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplData_descriptor_;
  metadata.reflection = DuplData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RealmData::kRealmIDFieldNumber;
const int RealmData::kDifficultyLevelFieldNumber;
const int RealmData::kBoxIDFieldNumber;
#endif  // !_MSC_VER

RealmData::RealmData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RealmData::InitAsDefaultInstance() {
}

RealmData::RealmData(const RealmData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RealmData::SharedCtor() {
  _cached_size_ = 0;
  realmid_ = 0u;
  difficultylevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealmData::~RealmData() {
  SharedDtor();
}

void RealmData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealmData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealmData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealmData_descriptor_;
}

const RealmData& RealmData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

RealmData* RealmData::default_instance_ = NULL;

RealmData* RealmData::New() const {
  return new RealmData;
}

void RealmData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    realmid_ = 0u;
    difficultylevel_ = 0u;
  }
  boxid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealmData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 realmID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realmid_)));
          set_has_realmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficultyLevel;
        break;
      }

      // optional uint32 difficultyLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficultyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficultylevel_)));
          set_has_difficultylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxID;
        break;
      }

      // repeated uint32 boxID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_boxid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_boxid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RealmData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 realmID = 1;
  if (has_realmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->realmid(), output);
  }

  // optional uint32 difficultyLevel = 2;
  if (has_difficultylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficultylevel(), output);
  }

  // repeated uint32 boxID = 3;
  for (int i = 0; i < this->boxid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->boxid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RealmData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 realmID = 1;
  if (has_realmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->realmid(), target);
  }

  // optional uint32 difficultyLevel = 2;
  if (has_difficultylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->difficultylevel(), target);
  }

  // repeated uint32 boxID = 3;
  for (int i = 0; i < this->boxid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->boxid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RealmData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 realmID = 1;
    if (has_realmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realmid());
    }

    // optional uint32 difficultyLevel = 2;
    if (has_difficultylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficultylevel());
    }

  }
  // repeated uint32 boxID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->boxid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->boxid(i));
    }
    total_size += 1 * this->boxid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealmData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealmData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealmData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealmData::MergeFrom(const RealmData& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxid_.MergeFrom(from.boxid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_realmid()) {
      set_realmid(from.realmid());
    }
    if (from.has_difficultylevel()) {
      set_difficultylevel(from.difficultylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealmData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealmData::CopyFrom(const RealmData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealmData::IsInitialized() const {

  return true;
}

void RealmData::Swap(RealmData* other) {
  if (other != this) {
    std::swap(realmid_, other->realmid_);
    std::swap(difficultylevel_, other->difficultylevel_);
    boxid_.Swap(&other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealmData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealmData_descriptor_;
  metadata.reflection = RealmData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamblingDataBinary::kGamblingDuplIDFieldNumber;
const int GamblingDataBinary::kGamblingDuplRemainTimesFieldNumber;
const int GamblingDataBinary::kCanAwardFieldNumber;
const int GamblingDataBinary::kGamblingDropItemFieldNumber;
const int GamblingDataBinary::kWillExpFieldNumber;
const int GamblingDataBinary::kWillMoneyFieldNumber;
const int GamblingDataBinary::kGamblingWillDropItemFieldNumber;
const int GamblingDataBinary::kBossIDFieldNumber;
const int GamblingDataBinary::kIsRewardFieldNumber;
#endif  // !_MSC_VER

GamblingDataBinary::GamblingDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamblingDataBinary::InitAsDefaultInstance() {
}

GamblingDataBinary::GamblingDataBinary(const GamblingDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamblingDataBinary::SharedCtor() {
  _cached_size_ = 0;
  gamblingduplid_ = 0u;
  gamblingduplremaintimes_ = 0u;
  canaward_ = false;
  willexp_ = 0u;
  willmoney_ = 0u;
  bossid_ = 0u;
  isreward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamblingDataBinary::~GamblingDataBinary() {
  SharedDtor();
}

void GamblingDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamblingDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamblingDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamblingDataBinary_descriptor_;
}

const GamblingDataBinary& GamblingDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

GamblingDataBinary* GamblingDataBinary::default_instance_ = NULL;

GamblingDataBinary* GamblingDataBinary::New() const {
  return new GamblingDataBinary;
}

void GamblingDataBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamblingduplid_ = 0u;
    gamblingduplremaintimes_ = 0u;
    canaward_ = false;
    willexp_ = 0u;
    willmoney_ = 0u;
    bossid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isreward_ = 0u;
  }
  gamblingdropitem_.Clear();
  gamblingwilldropitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamblingDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gamblingDuplID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamblingduplid_)));
          set_has_gamblingduplid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gamblingDuplRemainTimes;
        break;
      }

      // optional uint32 gamblingDuplRemainTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamblingDuplRemainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamblingduplremaintimes_)));
          set_has_gamblingduplremaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_canAward;
        break;
      }

      // optional bool canAward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canaward_)));
          set_has_canaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gamblingDropItem;
        break;
      }

      // repeated .protocol.user.GamblingDropItem gamblingDropItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamblingDropItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamblingdropitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gamblingDropItem;
        if (input->ExpectTag(40)) goto parse_willExp;
        break;
      }

      // optional uint32 willExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_willExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &willexp_)));
          set_has_willexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_willMoney;
        break;
      }

      // optional uint32 willMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_willMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &willmoney_)));
          set_has_willmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gamblingWillDropItem;
        break;
      }

      // repeated .protocol.user.GamblingWillDropItem gamblingWillDropItem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamblingWillDropItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamblingwilldropitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gamblingWillDropItem;
        if (input->ExpectTag(64)) goto parse_bossID;
        break;
      }

      // optional uint32 bossID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isReward;
        break;
      }

      // optional uint32 isReward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreward_)));
          set_has_isreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamblingDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gamblingDuplID = 1;
  if (has_gamblingduplid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gamblingduplid(), output);
  }

  // optional uint32 gamblingDuplRemainTimes = 2;
  if (has_gamblingduplremaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gamblingduplremaintimes(), output);
  }

  // optional bool canAward = 3;
  if (has_canaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->canaward(), output);
  }

  // repeated .protocol.user.GamblingDropItem gamblingDropItem = 4;
  for (int i = 0; i < this->gamblingdropitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gamblingdropitem(i), output);
  }

  // optional uint32 willExp = 5;
  if (has_willexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->willexp(), output);
  }

  // optional uint32 willMoney = 6;
  if (has_willmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->willmoney(), output);
  }

  // repeated .protocol.user.GamblingWillDropItem gamblingWillDropItem = 7;
  for (int i = 0; i < this->gamblingwilldropitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gamblingwilldropitem(i), output);
  }

  // optional uint32 bossID = 8;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bossid(), output);
  }

  // optional uint32 isReward = 9;
  if (has_isreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamblingDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gamblingDuplID = 1;
  if (has_gamblingduplid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gamblingduplid(), target);
  }

  // optional uint32 gamblingDuplRemainTimes = 2;
  if (has_gamblingduplremaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gamblingduplremaintimes(), target);
  }

  // optional bool canAward = 3;
  if (has_canaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->canaward(), target);
  }

  // repeated .protocol.user.GamblingDropItem gamblingDropItem = 4;
  for (int i = 0; i < this->gamblingdropitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gamblingdropitem(i), target);
  }

  // optional uint32 willExp = 5;
  if (has_willexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->willexp(), target);
  }

  // optional uint32 willMoney = 6;
  if (has_willmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->willmoney(), target);
  }

  // repeated .protocol.user.GamblingWillDropItem gamblingWillDropItem = 7;
  for (int i = 0; i < this->gamblingwilldropitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gamblingwilldropitem(i), target);
  }

  // optional uint32 bossID = 8;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bossid(), target);
  }

  // optional uint32 isReward = 9;
  if (has_isreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamblingDataBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gamblingDuplID = 1;
    if (has_gamblingduplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamblingduplid());
    }

    // optional uint32 gamblingDuplRemainTimes = 2;
    if (has_gamblingduplremaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamblingduplremaintimes());
    }

    // optional bool canAward = 3;
    if (has_canaward()) {
      total_size += 1 + 1;
    }

    // optional uint32 willExp = 5;
    if (has_willexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->willexp());
    }

    // optional uint32 willMoney = 6;
    if (has_willmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->willmoney());
    }

    // optional uint32 bossID = 8;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 isReward = 9;
    if (has_isreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isreward());
    }

  }
  // repeated .protocol.user.GamblingDropItem gamblingDropItem = 4;
  total_size += 1 * this->gamblingdropitem_size();
  for (int i = 0; i < this->gamblingdropitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamblingdropitem(i));
  }

  // repeated .protocol.user.GamblingWillDropItem gamblingWillDropItem = 7;
  total_size += 1 * this->gamblingwilldropitem_size();
  for (int i = 0; i < this->gamblingwilldropitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamblingwilldropitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamblingDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamblingDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamblingDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamblingDataBinary::MergeFrom(const GamblingDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamblingdropitem_.MergeFrom(from.gamblingdropitem_);
  gamblingwilldropitem_.MergeFrom(from.gamblingwilldropitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamblingduplid()) {
      set_gamblingduplid(from.gamblingduplid());
    }
    if (from.has_gamblingduplremaintimes()) {
      set_gamblingduplremaintimes(from.gamblingduplremaintimes());
    }
    if (from.has_canaward()) {
      set_canaward(from.canaward());
    }
    if (from.has_willexp()) {
      set_willexp(from.willexp());
    }
    if (from.has_willmoney()) {
      set_willmoney(from.willmoney());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isreward()) {
      set_isreward(from.isreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamblingDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamblingDataBinary::CopyFrom(const GamblingDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamblingDataBinary::IsInitialized() const {

  return true;
}

void GamblingDataBinary::Swap(GamblingDataBinary* other) {
  if (other != this) {
    std::swap(gamblingduplid_, other->gamblingduplid_);
    std::swap(gamblingduplremaintimes_, other->gamblingduplremaintimes_);
    std::swap(canaward_, other->canaward_);
    gamblingdropitem_.Swap(&other->gamblingdropitem_);
    std::swap(willexp_, other->willexp_);
    std::swap(willmoney_, other->willmoney_);
    gamblingwilldropitem_.Swap(&other->gamblingwilldropitem_);
    std::swap(bossid_, other->bossid_);
    std::swap(isreward_, other->isreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamblingDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamblingDataBinary_descriptor_;
  metadata.reflection = GamblingDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamblingDropItem::kItemBaseIDFieldNumber;
const int GamblingDropItem::kNumFieldNumber;
const int GamblingDropItem::kQualityFieldNumber;
const int GamblingDropItem::kIdentifyFieldNumber;
const int GamblingDropItem::kNeedBindFieldNumber;
#endif  // !_MSC_VER

GamblingDropItem::GamblingDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamblingDropItem::InitAsDefaultInstance() {
}

GamblingDropItem::GamblingDropItem(const GamblingDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamblingDropItem::SharedCtor() {
  _cached_size_ = 0;
  itembaseid_ = 0u;
  num_ = 0u;
  quality_ = 0u;
  identify_ = 0u;
  needbind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamblingDropItem::~GamblingDropItem() {
  SharedDtor();
}

void GamblingDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamblingDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamblingDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamblingDropItem_descriptor_;
}

const GamblingDropItem& GamblingDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

GamblingDropItem* GamblingDropItem::default_instance_ = NULL;

GamblingDropItem* GamblingDropItem::New() const {
  return new GamblingDropItem;
}

void GamblingDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itembaseid_ = 0u;
    num_ = 0u;
    quality_ = 0u;
    identify_ = 0u;
    needbind_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamblingDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemBaseID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itembaseid_)));
          set_has_itembaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_identify;
        break;
      }

      // optional uint32 identify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identify_)));
          set_has_identify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_needBind;
        break;
      }

      // optional uint32 needBind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needbind_)));
          set_has_needbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamblingDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itembaseid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // optional uint32 identify = 4;
  if (has_identify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->identify(), output);
  }

  // optional uint32 needBind = 5;
  if (has_needbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->needbind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamblingDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itembaseid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // optional uint32 identify = 4;
  if (has_identify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->identify(), target);
  }

  // optional uint32 needBind = 5;
  if (has_needbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->needbind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamblingDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemBaseID = 1;
    if (has_itembaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itembaseid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 identify = 4;
    if (has_identify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identify());
    }

    // optional uint32 needBind = 5;
    if (has_needbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needbind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamblingDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamblingDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamblingDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamblingDropItem::MergeFrom(const GamblingDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itembaseid()) {
      set_itembaseid(from.itembaseid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_identify()) {
      set_identify(from.identify());
    }
    if (from.has_needbind()) {
      set_needbind(from.needbind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamblingDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamblingDropItem::CopyFrom(const GamblingDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamblingDropItem::IsInitialized() const {

  return true;
}

void GamblingDropItem::Swap(GamblingDropItem* other) {
  if (other != this) {
    std::swap(itembaseid_, other->itembaseid_);
    std::swap(num_, other->num_);
    std::swap(quality_, other->quality_);
    std::swap(identify_, other->identify_);
    std::swap(needbind_, other->needbind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamblingDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamblingDropItem_descriptor_;
  metadata.reflection = GamblingDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamblingWillDropItem::kItemBaseIDFieldNumber;
const int GamblingWillDropItem::kNumFieldNumber;
const int GamblingWillDropItem::kQualityFieldNumber;
const int GamblingWillDropItem::kIdentifyFieldNumber;
const int GamblingWillDropItem::kNeedBindFieldNumber;
#endif  // !_MSC_VER

GamblingWillDropItem::GamblingWillDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamblingWillDropItem::InitAsDefaultInstance() {
}

GamblingWillDropItem::GamblingWillDropItem(const GamblingWillDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamblingWillDropItem::SharedCtor() {
  _cached_size_ = 0;
  itembaseid_ = 0u;
  num_ = 0u;
  quality_ = 0u;
  identify_ = 0u;
  needbind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamblingWillDropItem::~GamblingWillDropItem() {
  SharedDtor();
}

void GamblingWillDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamblingWillDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamblingWillDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamblingWillDropItem_descriptor_;
}

const GamblingWillDropItem& GamblingWillDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

GamblingWillDropItem* GamblingWillDropItem::default_instance_ = NULL;

GamblingWillDropItem* GamblingWillDropItem::New() const {
  return new GamblingWillDropItem;
}

void GamblingWillDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itembaseid_ = 0u;
    num_ = 0u;
    quality_ = 0u;
    identify_ = 0u;
    needbind_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamblingWillDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemBaseID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itembaseid_)));
          set_has_itembaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_identify;
        break;
      }

      // optional uint32 identify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identify_)));
          set_has_identify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_needBind;
        break;
      }

      // optional uint32 needBind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needbind_)));
          set_has_needbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamblingWillDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itembaseid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // optional uint32 identify = 4;
  if (has_identify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->identify(), output);
  }

  // optional uint32 needBind = 5;
  if (has_needbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->needbind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamblingWillDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itembaseid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // optional uint32 identify = 4;
  if (has_identify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->identify(), target);
  }

  // optional uint32 needBind = 5;
  if (has_needbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->needbind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamblingWillDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemBaseID = 1;
    if (has_itembaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itembaseid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 identify = 4;
    if (has_identify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identify());
    }

    // optional uint32 needBind = 5;
    if (has_needbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needbind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamblingWillDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamblingWillDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamblingWillDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamblingWillDropItem::MergeFrom(const GamblingWillDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itembaseid()) {
      set_itembaseid(from.itembaseid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_identify()) {
      set_identify(from.identify());
    }
    if (from.has_needbind()) {
      set_needbind(from.needbind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamblingWillDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamblingWillDropItem::CopyFrom(const GamblingWillDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamblingWillDropItem::IsInitialized() const {

  return true;
}

void GamblingWillDropItem::Swap(GamblingWillDropItem* other) {
  if (other != this) {
    std::swap(itembaseid_, other->itembaseid_);
    std::swap(num_, other->num_);
    std::swap(quality_, other->quality_);
    std::swap(identify_, other->identify_);
    std::swap(needbind_, other->needbind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamblingWillDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamblingWillDropItem_descriptor_;
  metadata.reflection = GamblingWillDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneData::kStoneIDFieldNumber;
const int StoneData::kStoneLevelFieldNumber;
#endif  // !_MSC_VER

StoneData::StoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneData::InitAsDefaultInstance() {
}

StoneData::StoneData(const StoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneData::SharedCtor() {
  _cached_size_ = 0;
  stoneid_ = 0u;
  stonelevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneData::~StoneData() {
  SharedDtor();
}

void StoneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneData_descriptor_;
}

const StoneData& StoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

StoneData* StoneData::default_instance_ = NULL;

StoneData* StoneData::New() const {
  return new StoneData;
}

void StoneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stoneid_ = 0u;
    stonelevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoneid_)));
          set_has_stoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stoneLevel;
        break;
      }

      // required uint32 stoneLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoneLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stonelevel_)));
          set_has_stonelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stoneID = 1;
  if (has_stoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stoneid(), output);
  }

  // required uint32 stoneLevel = 2;
  if (has_stonelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stonelevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stoneID = 1;
  if (has_stoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stoneid(), target);
  }

  // required uint32 stoneLevel = 2;
  if (has_stonelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stonelevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stoneID = 1;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoneid());
    }

    // required uint32 stoneLevel = 2;
    if (has_stonelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stonelevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneData::MergeFrom(const StoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stoneid()) {
      set_stoneid(from.stoneid());
    }
    if (from.has_stonelevel()) {
      set_stonelevel(from.stonelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneData::CopyFrom(const StoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StoneData::Swap(StoneData* other) {
  if (other != this) {
    std::swap(stoneid_, other->stoneid_);
    std::swap(stonelevel_, other->stonelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneData_descriptor_;
  metadata.reflection = StoneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipPosData::kEquipPosFieldNumber;
const int EquipPosData::kIntensifyLevelFieldNumber;
const int EquipPosData::kStoneDataFieldNumber;
#endif  // !_MSC_VER

EquipPosData::EquipPosData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipPosData::InitAsDefaultInstance() {
}

EquipPosData::EquipPosData(const EquipPosData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipPosData::SharedCtor() {
  _cached_size_ = 0;
  equippos_ = 0u;
  intensifylevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipPosData::~EquipPosData() {
  SharedDtor();
}

void EquipPosData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipPosData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipPosData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPosData_descriptor_;
}

const EquipPosData& EquipPosData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

EquipPosData* EquipPosData::default_instance_ = NULL;

EquipPosData* EquipPosData::New() const {
  return new EquipPosData;
}

void EquipPosData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equippos_ = 0u;
    intensifylevel_ = 0u;
  }
  stonedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipPosData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equippos_)));
          set_has_equippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intensifyLevel;
        break;
      }

      // required uint32 intensifyLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensifyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensifylevel_)));
          set_has_intensifylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stoneData;
        break;
      }

      // repeated .protocol.user.StoneData stoneData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stoneData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stonedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stoneData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipPosData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equipPos = 1;
  if (has_equippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equippos(), output);
  }

  // required uint32 intensifyLevel = 2;
  if (has_intensifylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intensifylevel(), output);
  }

  // repeated .protocol.user.StoneData stoneData = 3;
  for (int i = 0; i < this->stonedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stonedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipPosData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equipPos = 1;
  if (has_equippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equippos(), target);
  }

  // required uint32 intensifyLevel = 2;
  if (has_intensifylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intensifylevel(), target);
  }

  // repeated .protocol.user.StoneData stoneData = 3;
  for (int i = 0; i < this->stonedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stonedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipPosData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equipPos = 1;
    if (has_equippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equippos());
    }

    // required uint32 intensifyLevel = 2;
    if (has_intensifylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensifylevel());
    }

  }
  // repeated .protocol.user.StoneData stoneData = 3;
  total_size += 1 * this->stonedata_size();
  for (int i = 0; i < this->stonedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stonedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipPosData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipPosData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipPosData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipPosData::MergeFrom(const EquipPosData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stonedata_.MergeFrom(from.stonedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equippos()) {
      set_equippos(from.equippos());
    }
    if (from.has_intensifylevel()) {
      set_intensifylevel(from.intensifylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipPosData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipPosData::CopyFrom(const EquipPosData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipPosData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < stonedata_size(); i++) {
    if (!this->stonedata(i).IsInitialized()) return false;
  }
  return true;
}

void EquipPosData::Swap(EquipPosData* other) {
  if (other != this) {
    std::swap(equippos_, other->equippos_);
    std::swap(intensifylevel_, other->intensifylevel_);
    stonedata_.Swap(&other->stonedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipPosData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipPosData_descriptor_;
  metadata.reflection = EquipPosData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipPosBinary::kEquipPosDataFieldNumber;
#endif  // !_MSC_VER

EquipPosBinary::EquipPosBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipPosBinary::InitAsDefaultInstance() {
}

EquipPosBinary::EquipPosBinary(const EquipPosBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipPosBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipPosBinary::~EquipPosBinary() {
  SharedDtor();
}

void EquipPosBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipPosBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipPosBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPosBinary_descriptor_;
}

const EquipPosBinary& EquipPosBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

EquipPosBinary* EquipPosBinary::default_instance_ = NULL;

EquipPosBinary* EquipPosBinary::New() const {
  return new EquipPosBinary;
}

void EquipPosBinary::Clear() {
  equipposdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipPosBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.EquipPosData equipPosData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipPosData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipposdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipPosData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipPosBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.EquipPosData equipPosData = 1;
  for (int i = 0; i < this->equipposdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipposdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipPosBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.EquipPosData equipPosData = 1;
  for (int i = 0; i < this->equipposdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipposdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipPosBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.user.EquipPosData equipPosData = 1;
  total_size += 1 * this->equipposdata_size();
  for (int i = 0; i < this->equipposdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipposdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipPosBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipPosBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipPosBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipPosBinary::MergeFrom(const EquipPosBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipposdata_.MergeFrom(from.equipposdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipPosBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipPosBinary::CopyFrom(const EquipPosBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipPosBinary::IsInitialized() const {

  for (int i = 0; i < equipposdata_size(); i++) {
    if (!this->equipposdata(i).IsInitialized()) return false;
  }
  return true;
}

void EquipPosBinary::Swap(EquipPosBinary* other) {
  if (other != this) {
    equipposdata_.Swap(&other->equipposdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipPosBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipPosBinary_descriptor_;
  metadata.reflection = EquipPosBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrumpBinary::kTrumpDataFieldNumber;
const int TrumpBinary::kUseTrumpIDFieldNumber;
const int TrumpBinary::kUseTrumpLevelFieldNumber;
#endif  // !_MSC_VER

TrumpBinary::TrumpBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrumpBinary::InitAsDefaultInstance() {
}

TrumpBinary::TrumpBinary(const TrumpBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrumpBinary::SharedCtor() {
  _cached_size_ = 0;
  usetrumpid_ = 0u;
  usetrumplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrumpBinary::~TrumpBinary() {
  SharedDtor();
}

void TrumpBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrumpBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrumpBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrumpBinary_descriptor_;
}

const TrumpBinary& TrumpBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

TrumpBinary* TrumpBinary::default_instance_ = NULL;

TrumpBinary* TrumpBinary::New() const {
  return new TrumpBinary;
}

void TrumpBinary::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    usetrumpid_ = 0u;
    usetrumplevel_ = 0u;
  }
  trumpdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrumpBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.TrumpData trumpData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trumpData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trumpdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trumpData;
        if (input->ExpectTag(16)) goto parse_useTrumpID;
        break;
      }

      // required uint32 useTrumpID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTrumpID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetrumpid_)));
          set_has_usetrumpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useTrumpLevel;
        break;
      }

      // required uint32 useTrumpLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTrumpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetrumplevel_)));
          set_has_usetrumplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrumpBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.TrumpData trumpData = 1;
  for (int i = 0; i < this->trumpdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trumpdata(i), output);
  }

  // required uint32 useTrumpID = 2;
  if (has_usetrumpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usetrumpid(), output);
  }

  // required uint32 useTrumpLevel = 3;
  if (has_usetrumplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usetrumplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrumpBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.TrumpData trumpData = 1;
  for (int i = 0; i < this->trumpdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trumpdata(i), target);
  }

  // required uint32 useTrumpID = 2;
  if (has_usetrumpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usetrumpid(), target);
  }

  // required uint32 useTrumpLevel = 3;
  if (has_usetrumplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usetrumplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrumpBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 useTrumpID = 2;
    if (has_usetrumpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetrumpid());
    }

    // required uint32 useTrumpLevel = 3;
    if (has_usetrumplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetrumplevel());
    }

  }
  // repeated .protocol.user.TrumpData trumpData = 1;
  total_size += 1 * this->trumpdata_size();
  for (int i = 0; i < this->trumpdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trumpdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrumpBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrumpBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrumpBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrumpBinary::MergeFrom(const TrumpBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  trumpdata_.MergeFrom(from.trumpdata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_usetrumpid()) {
      set_usetrumpid(from.usetrumpid());
    }
    if (from.has_usetrumplevel()) {
      set_usetrumplevel(from.usetrumplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrumpBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrumpBinary::CopyFrom(const TrumpBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrumpBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < trumpdata_size(); i++) {
    if (!this->trumpdata(i).IsInitialized()) return false;
  }
  return true;
}

void TrumpBinary::Swap(TrumpBinary* other) {
  if (other != this) {
    trumpdata_.Swap(&other->trumpdata_);
    std::swap(usetrumpid_, other->usetrumpid_);
    std::swap(usetrumplevel_, other->usetrumplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrumpBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrumpBinary_descriptor_;
  metadata.reflection = TrumpBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrumpData::kTrumpIDFieldNumber;
const int TrumpData::kLevelFieldNumber;
const int TrumpData::kSkillDataFieldNumber;
const int TrumpData::kBlessingValueFieldNumber;
#endif  // !_MSC_VER

TrumpData::TrumpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrumpData::InitAsDefaultInstance() {
}

TrumpData::TrumpData(const TrumpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrumpData::SharedCtor() {
  _cached_size_ = 0;
  trumpid_ = 0u;
  level_ = 0u;
  blessingvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrumpData::~TrumpData() {
  SharedDtor();
}

void TrumpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrumpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrumpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrumpData_descriptor_;
}

const TrumpData& TrumpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

TrumpData* TrumpData::default_instance_ = NULL;

TrumpData* TrumpData::New() const {
  return new TrumpData;
}

void TrumpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trumpid_ = 0u;
    level_ = 0u;
    blessingvalue_ = 0u;
  }
  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrumpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 trumpID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trumpid_)));
          set_has_trumpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skillData;
        break;
      }

      // repeated .protocol.user.TrumpSkillData skillData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skillData;
        if (input->ExpectTag(32)) goto parse_blessingValue;
        break;
      }

      // required uint32 blessingValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessingValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blessingvalue_)));
          set_has_blessingvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrumpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 trumpID = 1;
  if (has_trumpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trumpid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // repeated .protocol.user.TrumpSkillData skillData = 3;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skilldata(i), output);
  }

  // required uint32 blessingValue = 4;
  if (has_blessingvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blessingvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrumpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 trumpID = 1;
  if (has_trumpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trumpid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // repeated .protocol.user.TrumpSkillData skillData = 3;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skilldata(i), target);
  }

  // required uint32 blessingValue = 4;
  if (has_blessingvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blessingvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrumpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 trumpID = 1;
    if (has_trumpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trumpid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 blessingValue = 4;
    if (has_blessingvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blessingvalue());
    }

  }
  // repeated .protocol.user.TrumpSkillData skillData = 3;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrumpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrumpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrumpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrumpData::MergeFrom(const TrumpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trumpid()) {
      set_trumpid(from.trumpid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_blessingvalue()) {
      set_blessingvalue(from.blessingvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrumpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrumpData::CopyFrom(const TrumpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrumpData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < skilldata_size(); i++) {
    if (!this->skilldata(i).IsInitialized()) return false;
  }
  return true;
}

void TrumpData::Swap(TrumpData* other) {
  if (other != this) {
    std::swap(trumpid_, other->trumpid_);
    std::swap(level_, other->level_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(blessingvalue_, other->blessingvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrumpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrumpData_descriptor_;
  metadata.reflection = TrumpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrumpSkillData::kSkillIDFieldNumber;
const int TrumpSkillData::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

TrumpSkillData::TrumpSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrumpSkillData::InitAsDefaultInstance() {
}

TrumpSkillData::TrumpSkillData(const TrumpSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrumpSkillData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrumpSkillData::~TrumpSkillData() {
  SharedDtor();
}

void TrumpSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrumpSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrumpSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrumpSkillData_descriptor_;
}

const TrumpSkillData& TrumpSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

TrumpSkillData* TrumpSkillData::default_instance_ = NULL;

TrumpSkillData* TrumpSkillData::New() const {
  return new TrumpSkillData;
}

void TrumpSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrumpSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLevel;
        break;
      }

      // required uint32 skillLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrumpSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 skillLevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrumpSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 skillLevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrumpSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 skillLevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrumpSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrumpSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrumpSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrumpSkillData::MergeFrom(const TrumpSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrumpSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrumpSkillData::CopyFrom(const TrumpSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrumpSkillData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TrumpSkillData::Swap(TrumpSkillData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrumpSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrumpSkillData_descriptor_;
  metadata.reflection = TrumpSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRewardBinary::kSaveDayStartInSecFieldNumber;
const int UserRewardBinary::kLoginSignRewardBinaryFieldNumber;
const int UserRewardBinary::kSummonRaffleBinaryFieldNumber;
const int UserRewardBinary::kMoneyDrawingBinaryFieldNumber;
const int UserRewardBinary::kBuyVitalityBinaryFieldNumber;
const int UserRewardBinary::kRechargeDataBinaryFieldNumber;
const int UserRewardBinary::kSignBinaryFieldNumber;
const int UserRewardBinary::kVipBoxIDFieldNumber;
#endif  // !_MSC_VER

UserRewardBinary::UserRewardBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRewardBinary::InitAsDefaultInstance() {
  loginsignrewardbinary_ = const_cast< ::protocol::user::LoginSignRewardBinary*>(&::protocol::user::LoginSignRewardBinary::default_instance());
  summonrafflebinary_ = const_cast< ::protocol::user::SummonRaffleBinary*>(&::protocol::user::SummonRaffleBinary::default_instance());
  moneydrawingbinary_ = const_cast< ::protocol::user::MoneyDrawingBinary*>(&::protocol::user::MoneyDrawingBinary::default_instance());
  buyvitalitybinary_ = const_cast< ::protocol::user::BuyVitalityBinary*>(&::protocol::user::BuyVitalityBinary::default_instance());
  signbinary_ = const_cast< ::protocol::user::SignBinary*>(&::protocol::user::SignBinary::default_instance());
}

UserRewardBinary::UserRewardBinary(const UserRewardBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRewardBinary::SharedCtor() {
  _cached_size_ = 0;
  savedaystartinsec_ = 0u;
  loginsignrewardbinary_ = NULL;
  summonrafflebinary_ = NULL;
  moneydrawingbinary_ = NULL;
  buyvitalitybinary_ = NULL;
  signbinary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRewardBinary::~UserRewardBinary() {
  SharedDtor();
}

void UserRewardBinary::SharedDtor() {
  if (this != default_instance_) {
    delete loginsignrewardbinary_;
    delete summonrafflebinary_;
    delete moneydrawingbinary_;
    delete buyvitalitybinary_;
    delete signbinary_;
  }
}

void UserRewardBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRewardBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRewardBinary_descriptor_;
}

const UserRewardBinary& UserRewardBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UserRewardBinary* UserRewardBinary::default_instance_ = NULL;

UserRewardBinary* UserRewardBinary::New() const {
  return new UserRewardBinary;
}

void UserRewardBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    savedaystartinsec_ = 0u;
    if (has_loginsignrewardbinary()) {
      if (loginsignrewardbinary_ != NULL) loginsignrewardbinary_->::protocol::user::LoginSignRewardBinary::Clear();
    }
    if (has_summonrafflebinary()) {
      if (summonrafflebinary_ != NULL) summonrafflebinary_->::protocol::user::SummonRaffleBinary::Clear();
    }
    if (has_moneydrawingbinary()) {
      if (moneydrawingbinary_ != NULL) moneydrawingbinary_->::protocol::user::MoneyDrawingBinary::Clear();
    }
    if (has_buyvitalitybinary()) {
      if (buyvitalitybinary_ != NULL) buyvitalitybinary_->::protocol::user::BuyVitalityBinary::Clear();
    }
    if (has_signbinary()) {
      if (signbinary_ != NULL) signbinary_->::protocol::user::SignBinary::Clear();
    }
  }
  rechargedatabinary_.Clear();
  vipboxid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRewardBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 saveDayStartInSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savedaystartinsec_)));
          set_has_savedaystartinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginSignRewardBinary;
        break;
      }

      // optional .protocol.user.LoginSignRewardBinary loginSignRewardBinary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginSignRewardBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginsignrewardbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_summonRaffleBinary;
        break;
      }

      // required .protocol.user.SummonRaffleBinary summonRaffleBinary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summonRaffleBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summonrafflebinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_moneyDrawingBinary;
        break;
      }

      // required .protocol.user.MoneyDrawingBinary moneyDrawingBinary = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneyDrawingBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moneydrawingbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_BuyVitalityBinary;
        break;
      }

      // required .protocol.user.BuyVitalityBinary BuyVitalityBinary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyVitalityBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyvitalitybinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RechargeDataBinary;
        break;
      }

      // repeated .protocol.user.RechargeDataBinary RechargeDataBinary = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RechargeDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rechargedatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RechargeDataBinary;
        if (input->ExpectTag(58)) goto parse_signBinary;
        break;
      }

      // optional .protocol.user.SignBinary signBinary = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vipBoxID;
        break;
      }

      // repeated uint32 vipBoxID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_vipboxid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vipboxid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vipBoxID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRewardBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 saveDayStartInSec = 1;
  if (has_savedaystartinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->savedaystartinsec(), output);
  }

  // optional .protocol.user.LoginSignRewardBinary loginSignRewardBinary = 2;
  if (has_loginsignrewardbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loginsignrewardbinary(), output);
  }

  // required .protocol.user.SummonRaffleBinary summonRaffleBinary = 3;
  if (has_summonrafflebinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->summonrafflebinary(), output);
  }

  // required .protocol.user.MoneyDrawingBinary moneyDrawingBinary = 4;
  if (has_moneydrawingbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->moneydrawingbinary(), output);
  }

  // required .protocol.user.BuyVitalityBinary BuyVitalityBinary = 5;
  if (has_buyvitalitybinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buyvitalitybinary(), output);
  }

  // repeated .protocol.user.RechargeDataBinary RechargeDataBinary = 6;
  for (int i = 0; i < this->rechargedatabinary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rechargedatabinary(i), output);
  }

  // optional .protocol.user.SignBinary signBinary = 7;
  if (has_signbinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->signbinary(), output);
  }

  // repeated uint32 vipBoxID = 8;
  for (int i = 0; i < this->vipboxid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->vipboxid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRewardBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 saveDayStartInSec = 1;
  if (has_savedaystartinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->savedaystartinsec(), target);
  }

  // optional .protocol.user.LoginSignRewardBinary loginSignRewardBinary = 2;
  if (has_loginsignrewardbinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loginsignrewardbinary(), target);
  }

  // required .protocol.user.SummonRaffleBinary summonRaffleBinary = 3;
  if (has_summonrafflebinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->summonrafflebinary(), target);
  }

  // required .protocol.user.MoneyDrawingBinary moneyDrawingBinary = 4;
  if (has_moneydrawingbinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->moneydrawingbinary(), target);
  }

  // required .protocol.user.BuyVitalityBinary BuyVitalityBinary = 5;
  if (has_buyvitalitybinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buyvitalitybinary(), target);
  }

  // repeated .protocol.user.RechargeDataBinary RechargeDataBinary = 6;
  for (int i = 0; i < this->rechargedatabinary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rechargedatabinary(i), target);
  }

  // optional .protocol.user.SignBinary signBinary = 7;
  if (has_signbinary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->signbinary(), target);
  }

  // repeated uint32 vipBoxID = 8;
  for (int i = 0; i < this->vipboxid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->vipboxid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRewardBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 saveDayStartInSec = 1;
    if (has_savedaystartinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savedaystartinsec());
    }

    // optional .protocol.user.LoginSignRewardBinary loginSignRewardBinary = 2;
    if (has_loginsignrewardbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginsignrewardbinary());
    }

    // required .protocol.user.SummonRaffleBinary summonRaffleBinary = 3;
    if (has_summonrafflebinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summonrafflebinary());
    }

    // required .protocol.user.MoneyDrawingBinary moneyDrawingBinary = 4;
    if (has_moneydrawingbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moneydrawingbinary());
    }

    // required .protocol.user.BuyVitalityBinary BuyVitalityBinary = 5;
    if (has_buyvitalitybinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyvitalitybinary());
    }

    // optional .protocol.user.SignBinary signBinary = 7;
    if (has_signbinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signbinary());
    }

  }
  // repeated .protocol.user.RechargeDataBinary RechargeDataBinary = 6;
  total_size += 1 * this->rechargedatabinary_size();
  for (int i = 0; i < this->rechargedatabinary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rechargedatabinary(i));
  }

  // repeated uint32 vipBoxID = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->vipboxid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vipboxid(i));
    }
    total_size += 1 * this->vipboxid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRewardBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRewardBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRewardBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRewardBinary::MergeFrom(const UserRewardBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  rechargedatabinary_.MergeFrom(from.rechargedatabinary_);
  vipboxid_.MergeFrom(from.vipboxid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_savedaystartinsec()) {
      set_savedaystartinsec(from.savedaystartinsec());
    }
    if (from.has_loginsignrewardbinary()) {
      mutable_loginsignrewardbinary()->::protocol::user::LoginSignRewardBinary::MergeFrom(from.loginsignrewardbinary());
    }
    if (from.has_summonrafflebinary()) {
      mutable_summonrafflebinary()->::protocol::user::SummonRaffleBinary::MergeFrom(from.summonrafflebinary());
    }
    if (from.has_moneydrawingbinary()) {
      mutable_moneydrawingbinary()->::protocol::user::MoneyDrawingBinary::MergeFrom(from.moneydrawingbinary());
    }
    if (from.has_buyvitalitybinary()) {
      mutable_buyvitalitybinary()->::protocol::user::BuyVitalityBinary::MergeFrom(from.buyvitalitybinary());
    }
    if (from.has_signbinary()) {
      mutable_signbinary()->::protocol::user::SignBinary::MergeFrom(from.signbinary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRewardBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRewardBinary::CopyFrom(const UserRewardBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRewardBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_loginsignrewardbinary()) {
    if (!this->loginsignrewardbinary().IsInitialized()) return false;
  }
  if (has_summonrafflebinary()) {
    if (!this->summonrafflebinary().IsInitialized()) return false;
  }
  if (has_moneydrawingbinary()) {
    if (!this->moneydrawingbinary().IsInitialized()) return false;
  }
  if (has_buyvitalitybinary()) {
    if (!this->buyvitalitybinary().IsInitialized()) return false;
  }
  return true;
}

void UserRewardBinary::Swap(UserRewardBinary* other) {
  if (other != this) {
    std::swap(savedaystartinsec_, other->savedaystartinsec_);
    std::swap(loginsignrewardbinary_, other->loginsignrewardbinary_);
    std::swap(summonrafflebinary_, other->summonrafflebinary_);
    std::swap(moneydrawingbinary_, other->moneydrawingbinary_);
    std::swap(buyvitalitybinary_, other->buyvitalitybinary_);
    rechargedatabinary_.Swap(&other->rechargedatabinary_);
    std::swap(signbinary_, other->signbinary_);
    vipboxid_.Swap(&other->vipboxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRewardBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRewardBinary_descriptor_;
  metadata.reflection = UserRewardBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSignRewardBinary::kLastSignDayStartInSecFieldNumber;
const int LoginSignRewardBinary::kContinueSignDayNumFieldNumber;
const int LoginSignRewardBinary::kIsHaveWeekRewardFieldNumber;
const int LoginSignRewardBinary::kLoginDayNumFieldNumber;
#endif  // !_MSC_VER

LoginSignRewardBinary::LoginSignRewardBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSignRewardBinary::InitAsDefaultInstance() {
}

LoginSignRewardBinary::LoginSignRewardBinary(const LoginSignRewardBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSignRewardBinary::SharedCtor() {
  _cached_size_ = 0;
  lastsigndaystartinsec_ = 0u;
  continuesigndaynum_ = 0u;
  ishaveweekreward_ = false;
  logindaynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSignRewardBinary::~LoginSignRewardBinary() {
  SharedDtor();
}

void LoginSignRewardBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginSignRewardBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSignRewardBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSignRewardBinary_descriptor_;
}

const LoginSignRewardBinary& LoginSignRewardBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

LoginSignRewardBinary* LoginSignRewardBinary::default_instance_ = NULL;

LoginSignRewardBinary* LoginSignRewardBinary::New() const {
  return new LoginSignRewardBinary;
}

void LoginSignRewardBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastsigndaystartinsec_ = 0u;
    continuesigndaynum_ = 0u;
    ishaveweekreward_ = false;
    logindaynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSignRewardBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lastSignDayStartInSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastsigndaystartinsec_)));
          set_has_lastsigndaystartinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_continueSignDayNum;
        break;
      }

      // required uint32 continueSignDayNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueSignDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continuesigndaynum_)));
          set_has_continuesigndaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isHaveWeekReward;
        break;
      }

      // optional bool isHaveWeekReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHaveWeekReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishaveweekreward_)));
          set_has_ishaveweekreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginDayNum;
        break;
      }

      // required uint32 loginDayNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logindaynum_)));
          set_has_logindaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSignRewardBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 lastSignDayStartInSec = 1;
  if (has_lastsigndaystartinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lastsigndaystartinsec(), output);
  }

  // required uint32 continueSignDayNum = 2;
  if (has_continuesigndaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->continuesigndaynum(), output);
  }

  // optional bool isHaveWeekReward = 3;
  if (has_ishaveweekreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ishaveweekreward(), output);
  }

  // required uint32 loginDayNum = 4;
  if (has_logindaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logindaynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSignRewardBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 lastSignDayStartInSec = 1;
  if (has_lastsigndaystartinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lastsigndaystartinsec(), target);
  }

  // required uint32 continueSignDayNum = 2;
  if (has_continuesigndaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->continuesigndaynum(), target);
  }

  // optional bool isHaveWeekReward = 3;
  if (has_ishaveweekreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ishaveweekreward(), target);
  }

  // required uint32 loginDayNum = 4;
  if (has_logindaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logindaynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSignRewardBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lastSignDayStartInSec = 1;
    if (has_lastsigndaystartinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastsigndaystartinsec());
    }

    // required uint32 continueSignDayNum = 2;
    if (has_continuesigndaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->continuesigndaynum());
    }

    // optional bool isHaveWeekReward = 3;
    if (has_ishaveweekreward()) {
      total_size += 1 + 1;
    }

    // required uint32 loginDayNum = 4;
    if (has_logindaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logindaynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSignRewardBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSignRewardBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSignRewardBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSignRewardBinary::MergeFrom(const LoginSignRewardBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastsigndaystartinsec()) {
      set_lastsigndaystartinsec(from.lastsigndaystartinsec());
    }
    if (from.has_continuesigndaynum()) {
      set_continuesigndaynum(from.continuesigndaynum());
    }
    if (from.has_ishaveweekreward()) {
      set_ishaveweekreward(from.ishaveweekreward());
    }
    if (from.has_logindaynum()) {
      set_logindaynum(from.logindaynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSignRewardBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSignRewardBinary::CopyFrom(const LoginSignRewardBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSignRewardBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void LoginSignRewardBinary::Swap(LoginSignRewardBinary* other) {
  if (other != this) {
    std::swap(lastsigndaystartinsec_, other->lastsigndaystartinsec_);
    std::swap(continuesigndaynum_, other->continuesigndaynum_);
    std::swap(ishaveweekreward_, other->ishaveweekreward_);
    std::swap(logindaynum_, other->logindaynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSignRewardBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSignRewardBinary_descriptor_;
  metadata.reflection = LoginSignRewardBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummonRaffleBinary::kIsHadRaffleNormalFirstFieldNumber;
const int SummonRaffleBinary::kIsHadRaffleEquipFirstFieldNumber;
const int SummonRaffleBinary::kLastRaffleNormalTimeFieldNumber;
const int SummonRaffleBinary::kNormalFreeRemainTimesFieldNumber;
const int SummonRaffleBinary::kEquipLastFreeRaffleTimeFieldNumber;
#endif  // !_MSC_VER

SummonRaffleBinary::SummonRaffleBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SummonRaffleBinary::InitAsDefaultInstance() {
}

SummonRaffleBinary::SummonRaffleBinary(const SummonRaffleBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SummonRaffleBinary::SharedCtor() {
  _cached_size_ = 0;
  ishadrafflenormalfirst_ = false;
  ishadraffleequipfirst_ = false;
  lastrafflenormaltime_ = GOOGLE_ULONGLONG(0);
  normalfreeremaintimes_ = 0u;
  equiplastfreeraffletime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummonRaffleBinary::~SummonRaffleBinary() {
  SharedDtor();
}

void SummonRaffleBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummonRaffleBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummonRaffleBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummonRaffleBinary_descriptor_;
}

const SummonRaffleBinary& SummonRaffleBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

SummonRaffleBinary* SummonRaffleBinary::default_instance_ = NULL;

SummonRaffleBinary* SummonRaffleBinary::New() const {
  return new SummonRaffleBinary;
}

void SummonRaffleBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishadrafflenormalfirst_ = false;
    ishadraffleequipfirst_ = false;
    lastrafflenormaltime_ = GOOGLE_ULONGLONG(0);
    normalfreeremaintimes_ = 0u;
    equiplastfreeraffletime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummonRaffleBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isHadRaffleNormalFirst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishadrafflenormalfirst_)));
          set_has_ishadrafflenormalfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isHadRaffleEquipFirst;
        break;
      }

      // required bool isHadRaffleEquipFirst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHadRaffleEquipFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishadraffleequipfirst_)));
          set_has_ishadraffleequipfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastRaffleNormalTime;
        break;
      }

      // required uint64 lastRaffleNormalTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRaffleNormalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrafflenormaltime_)));
          set_has_lastrafflenormaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_normalFreeRemainTimes;
        break;
      }

      // required uint32 normalFreeRemainTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalFreeRemainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalfreeremaintimes_)));
          set_has_normalfreeremaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equipLastFreeRaffleTime;
        break;
      }

      // required uint64 equipLastFreeRaffleTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipLastFreeRaffleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equiplastfreeraffletime_)));
          set_has_equiplastfreeraffletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SummonRaffleBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isHadRaffleNormalFirst = 1;
  if (has_ishadrafflenormalfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ishadrafflenormalfirst(), output);
  }

  // required bool isHadRaffleEquipFirst = 2;
  if (has_ishadraffleequipfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ishadraffleequipfirst(), output);
  }

  // required uint64 lastRaffleNormalTime = 3;
  if (has_lastrafflenormaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastrafflenormaltime(), output);
  }

  // required uint32 normalFreeRemainTimes = 4;
  if (has_normalfreeremaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->normalfreeremaintimes(), output);
  }

  // required uint64 equipLastFreeRaffleTime = 5;
  if (has_equiplastfreeraffletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->equiplastfreeraffletime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SummonRaffleBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isHadRaffleNormalFirst = 1;
  if (has_ishadrafflenormalfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ishadrafflenormalfirst(), target);
  }

  // required bool isHadRaffleEquipFirst = 2;
  if (has_ishadraffleequipfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ishadraffleequipfirst(), target);
  }

  // required uint64 lastRaffleNormalTime = 3;
  if (has_lastrafflenormaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastrafflenormaltime(), target);
  }

  // required uint32 normalFreeRemainTimes = 4;
  if (has_normalfreeremaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->normalfreeremaintimes(), target);
  }

  // required uint64 equipLastFreeRaffleTime = 5;
  if (has_equiplastfreeraffletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->equiplastfreeraffletime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SummonRaffleBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isHadRaffleNormalFirst = 1;
    if (has_ishadrafflenormalfirst()) {
      total_size += 1 + 1;
    }

    // required bool isHadRaffleEquipFirst = 2;
    if (has_ishadraffleequipfirst()) {
      total_size += 1 + 1;
    }

    // required uint64 lastRaffleNormalTime = 3;
    if (has_lastrafflenormaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrafflenormaltime());
    }

    // required uint32 normalFreeRemainTimes = 4;
    if (has_normalfreeremaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalfreeremaintimes());
    }

    // required uint64 equipLastFreeRaffleTime = 5;
    if (has_equiplastfreeraffletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equiplastfreeraffletime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummonRaffleBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummonRaffleBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummonRaffleBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummonRaffleBinary::MergeFrom(const SummonRaffleBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishadrafflenormalfirst()) {
      set_ishadrafflenormalfirst(from.ishadrafflenormalfirst());
    }
    if (from.has_ishadraffleequipfirst()) {
      set_ishadraffleequipfirst(from.ishadraffleequipfirst());
    }
    if (from.has_lastrafflenormaltime()) {
      set_lastrafflenormaltime(from.lastrafflenormaltime());
    }
    if (from.has_normalfreeremaintimes()) {
      set_normalfreeremaintimes(from.normalfreeremaintimes());
    }
    if (from.has_equiplastfreeraffletime()) {
      set_equiplastfreeraffletime(from.equiplastfreeraffletime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummonRaffleBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummonRaffleBinary::CopyFrom(const SummonRaffleBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonRaffleBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SummonRaffleBinary::Swap(SummonRaffleBinary* other) {
  if (other != this) {
    std::swap(ishadrafflenormalfirst_, other->ishadrafflenormalfirst_);
    std::swap(ishadraffleequipfirst_, other->ishadraffleequipfirst_);
    std::swap(lastrafflenormaltime_, other->lastrafflenormaltime_);
    std::swap(normalfreeremaintimes_, other->normalfreeremaintimes_);
    std::swap(equiplastfreeraffletime_, other->equiplastfreeraffletime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummonRaffleBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummonRaffleBinary_descriptor_;
  metadata.reflection = SummonRaffleBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyDrawingBinary::kMoneyDrawingTimeFieldNumber;
const int MoneyDrawingBinary::kMaxMoneyDrawingTimeFieldNumber;
const int MoneyDrawingBinary::kTotalMoneyDrawingTimeFieldNumber;
const int MoneyDrawingBinary::kMoneyDrawingboxIDFieldNumber;
#endif  // !_MSC_VER

MoneyDrawingBinary::MoneyDrawingBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyDrawingBinary::InitAsDefaultInstance() {
}

MoneyDrawingBinary::MoneyDrawingBinary(const MoneyDrawingBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyDrawingBinary::SharedCtor() {
  _cached_size_ = 0;
  moneydrawingtime_ = 0u;
  maxmoneydrawingtime_ = 0u;
  totalmoneydrawingtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyDrawingBinary::~MoneyDrawingBinary() {
  SharedDtor();
}

void MoneyDrawingBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyDrawingBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyDrawingBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyDrawingBinary_descriptor_;
}

const MoneyDrawingBinary& MoneyDrawingBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

MoneyDrawingBinary* MoneyDrawingBinary::default_instance_ = NULL;

MoneyDrawingBinary* MoneyDrawingBinary::New() const {
  return new MoneyDrawingBinary;
}

void MoneyDrawingBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moneydrawingtime_ = 0u;
    maxmoneydrawingtime_ = 0u;
    totalmoneydrawingtime_ = 0u;
  }
  moneydrawingboxid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyDrawingBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 moneyDrawingTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydrawingtime_)));
          set_has_moneydrawingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxMoneyDrawingTime;
        break;
      }

      // required uint32 maxMoneyDrawingTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMoneyDrawingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmoneydrawingtime_)));
          set_has_maxmoneydrawingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalMoneyDrawingTime;
        break;
      }

      // required uint32 totalMoneyDrawingTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalMoneyDrawingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalmoneydrawingtime_)));
          set_has_totalmoneydrawingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moneyDrawingboxID;
        break;
      }

      // repeated uint32 moneyDrawingboxID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyDrawingboxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_moneydrawingboxid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_moneydrawingboxid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moneyDrawingboxID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyDrawingBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 moneyDrawingTime = 1;
  if (has_moneydrawingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moneydrawingtime(), output);
  }

  // required uint32 maxMoneyDrawingTime = 2;
  if (has_maxmoneydrawingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxmoneydrawingtime(), output);
  }

  // required uint32 totalMoneyDrawingTime = 3;
  if (has_totalmoneydrawingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalmoneydrawingtime(), output);
  }

  // repeated uint32 moneyDrawingboxID = 4;
  for (int i = 0; i < this->moneydrawingboxid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->moneydrawingboxid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyDrawingBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 moneyDrawingTime = 1;
  if (has_moneydrawingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moneydrawingtime(), target);
  }

  // required uint32 maxMoneyDrawingTime = 2;
  if (has_maxmoneydrawingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxmoneydrawingtime(), target);
  }

  // required uint32 totalMoneyDrawingTime = 3;
  if (has_totalmoneydrawingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalmoneydrawingtime(), target);
  }

  // repeated uint32 moneyDrawingboxID = 4;
  for (int i = 0; i < this->moneydrawingboxid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->moneydrawingboxid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyDrawingBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 moneyDrawingTime = 1;
    if (has_moneydrawingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneydrawingtime());
    }

    // required uint32 maxMoneyDrawingTime = 2;
    if (has_maxmoneydrawingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmoneydrawingtime());
    }

    // required uint32 totalMoneyDrawingTime = 3;
    if (has_totalmoneydrawingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalmoneydrawingtime());
    }

  }
  // repeated uint32 moneyDrawingboxID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->moneydrawingboxid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->moneydrawingboxid(i));
    }
    total_size += 1 * this->moneydrawingboxid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyDrawingBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyDrawingBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyDrawingBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyDrawingBinary::MergeFrom(const MoneyDrawingBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneydrawingboxid_.MergeFrom(from.moneydrawingboxid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneydrawingtime()) {
      set_moneydrawingtime(from.moneydrawingtime());
    }
    if (from.has_maxmoneydrawingtime()) {
      set_maxmoneydrawingtime(from.maxmoneydrawingtime());
    }
    if (from.has_totalmoneydrawingtime()) {
      set_totalmoneydrawingtime(from.totalmoneydrawingtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyDrawingBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyDrawingBinary::CopyFrom(const MoneyDrawingBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyDrawingBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MoneyDrawingBinary::Swap(MoneyDrawingBinary* other) {
  if (other != this) {
    std::swap(moneydrawingtime_, other->moneydrawingtime_);
    std::swap(maxmoneydrawingtime_, other->maxmoneydrawingtime_);
    std::swap(totalmoneydrawingtime_, other->totalmoneydrawingtime_);
    moneydrawingboxid_.Swap(&other->moneydrawingboxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyDrawingBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyDrawingBinary_descriptor_;
  metadata.reflection = MoneyDrawingBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyVitalityBinary::kBuyVitalityTimesFieldNumber;
const int BuyVitalityBinary::kMaxBuyVitalityTimesFieldNumber;
#endif  // !_MSC_VER

BuyVitalityBinary::BuyVitalityBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyVitalityBinary::InitAsDefaultInstance() {
}

BuyVitalityBinary::BuyVitalityBinary(const BuyVitalityBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyVitalityBinary::SharedCtor() {
  _cached_size_ = 0;
  buyvitalitytimes_ = 0u;
  maxbuyvitalitytimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyVitalityBinary::~BuyVitalityBinary() {
  SharedDtor();
}

void BuyVitalityBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyVitalityBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyVitalityBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyVitalityBinary_descriptor_;
}

const BuyVitalityBinary& BuyVitalityBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

BuyVitalityBinary* BuyVitalityBinary::default_instance_ = NULL;

BuyVitalityBinary* BuyVitalityBinary::New() const {
  return new BuyVitalityBinary;
}

void BuyVitalityBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyvitalitytimes_ = 0u;
    maxbuyvitalitytimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyVitalityBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 buyVitalityTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyvitalitytimes_)));
          set_has_buyvitalitytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxBuyVitalityTimes;
        break;
      }

      // required uint32 maxBuyVitalityTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxBuyVitalityTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbuyvitalitytimes_)));
          set_has_maxbuyvitalitytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyVitalityBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 buyVitalityTimes = 1;
  if (has_buyvitalitytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buyvitalitytimes(), output);
  }

  // required uint32 maxBuyVitalityTimes = 2;
  if (has_maxbuyvitalitytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxbuyvitalitytimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyVitalityBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 buyVitalityTimes = 1;
  if (has_buyvitalitytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buyvitalitytimes(), target);
  }

  // required uint32 maxBuyVitalityTimes = 2;
  if (has_maxbuyvitalitytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxbuyvitalitytimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyVitalityBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 buyVitalityTimes = 1;
    if (has_buyvitalitytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyvitalitytimes());
    }

    // required uint32 maxBuyVitalityTimes = 2;
    if (has_maxbuyvitalitytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbuyvitalitytimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyVitalityBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyVitalityBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyVitalityBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyVitalityBinary::MergeFrom(const BuyVitalityBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyvitalitytimes()) {
      set_buyvitalitytimes(from.buyvitalitytimes());
    }
    if (from.has_maxbuyvitalitytimes()) {
      set_maxbuyvitalitytimes(from.maxbuyvitalitytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyVitalityBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyVitalityBinary::CopyFrom(const BuyVitalityBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyVitalityBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuyVitalityBinary::Swap(BuyVitalityBinary* other) {
  if (other != this) {
    std::swap(buyvitalitytimes_, other->buyvitalitytimes_);
    std::swap(maxbuyvitalitytimes_, other->maxbuyvitalitytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyVitalityBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyVitalityBinary_descriptor_;
  metadata.reflection = BuyVitalityBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeDataBinary::kRechargeIDFieldNumber;
const int RechargeDataBinary::kRechargeNumFieldNumber;
#endif  // !_MSC_VER

RechargeDataBinary::RechargeDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeDataBinary::InitAsDefaultInstance() {
}

RechargeDataBinary::RechargeDataBinary(const RechargeDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeDataBinary::SharedCtor() {
  _cached_size_ = 0;
  rechargeid_ = 0u;
  rechargenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeDataBinary::~RechargeDataBinary() {
  SharedDtor();
}

void RechargeDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeDataBinary_descriptor_;
}

const RechargeDataBinary& RechargeDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

RechargeDataBinary* RechargeDataBinary::default_instance_ = NULL;

RechargeDataBinary* RechargeDataBinary::New() const {
  return new RechargeDataBinary;
}

void RechargeDataBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rechargeid_ = 0u;
    rechargenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rechargeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargeid_)));
          set_has_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rechargeNum;
        break;
      }

      // optional uint32 rechargeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargenum_)));
          set_has_rechargenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rechargeID = 1;
  if (has_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rechargeid(), output);
  }

  // optional uint32 rechargeNum = 2;
  if (has_rechargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rechargenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rechargeID = 1;
  if (has_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rechargeid(), target);
  }

  // optional uint32 rechargeNum = 2;
  if (has_rechargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rechargenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeDataBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rechargeID = 1;
    if (has_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargeid());
    }

    // optional uint32 rechargeNum = 2;
    if (has_rechargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeDataBinary::MergeFrom(const RechargeDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rechargeid()) {
      set_rechargeid(from.rechargeid());
    }
    if (from.has_rechargenum()) {
      set_rechargenum(from.rechargenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeDataBinary::CopyFrom(const RechargeDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeDataBinary::IsInitialized() const {

  return true;
}

void RechargeDataBinary::Swap(RechargeDataBinary* other) {
  if (other != this) {
    std::swap(rechargeid_, other->rechargeid_);
    std::swap(rechargenum_, other->rechargenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeDataBinary_descriptor_;
  metadata.reflection = RechargeDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignBinary::kSignTimesFieldNumber;
const int SignBinary::kSignStateFieldNumber;
#endif  // !_MSC_VER

SignBinary::SignBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignBinary::InitAsDefaultInstance() {
}

SignBinary::SignBinary(const SignBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignBinary::SharedCtor() {
  _cached_size_ = 0;
  signtimes_ = 0u;
  signstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignBinary::~SignBinary() {
  SharedDtor();
}

void SignBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignBinary_descriptor_;
}

const SignBinary& SignBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

SignBinary* SignBinary::default_instance_ = NULL;

SignBinary* SignBinary::New() const {
  return new SignBinary;
}

void SignBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signtimes_ = 0u;
    signstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 signTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signtimes_)));
          set_has_signtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signState;
        break;
      }

      // optional uint32 signState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signstate_)));
          set_has_signstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 signTimes = 1;
  if (has_signtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signtimes(), output);
  }

  // optional uint32 signState = 2;
  if (has_signstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 signTimes = 1;
  if (has_signtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signtimes(), target);
  }

  // optional uint32 signState = 2;
  if (has_signstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->signstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 signTimes = 1;
    if (has_signtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signtimes());
    }

    // optional uint32 signState = 2;
    if (has_signstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignBinary::MergeFrom(const SignBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signtimes()) {
      set_signtimes(from.signtimes());
    }
    if (from.has_signstate()) {
      set_signstate(from.signstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignBinary::CopyFrom(const SignBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignBinary::IsInitialized() const {

  return true;
}

void SignBinary::Swap(SignBinary* other) {
  if (other != this) {
    std::swap(signtimes_, other->signtimes_);
    std::swap(signstate_, other->signstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignBinary_descriptor_;
  metadata.reflection = SignBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockFlag::kTypeFieldNumber;
const int FunctionUnlockFlag::kIdFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockFlag::FunctionUnlockFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockFlag::InitAsDefaultInstance() {
}

FunctionUnlockFlag::FunctionUnlockFlag(const FunctionUnlockFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockFlag::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockFlag::~FunctionUnlockFlag() {
  SharedDtor();
}

void FunctionUnlockFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockFlag_descriptor_;
}

const FunctionUnlockFlag& FunctionUnlockFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

FunctionUnlockFlag* FunctionUnlockFlag::default_instance_ = NULL;

FunctionUnlockFlag* FunctionUnlockFlag::New() const {
  return new FunctionUnlockFlag;
}

void FunctionUnlockFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockFlag::MergeFrom(const FunctionUnlockFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockFlag::CopyFrom(const FunctionUnlockFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FunctionUnlockFlag::Swap(FunctionUnlockFlag* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockFlag_descriptor_;
  metadata.reflection = FunctionUnlockFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockData::kFunctionVecFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockData::FunctionUnlockData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockData::InitAsDefaultInstance() {
}

FunctionUnlockData::FunctionUnlockData(const FunctionUnlockData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockData::~FunctionUnlockData() {
  SharedDtor();
}

void FunctionUnlockData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockData_descriptor_;
}

const FunctionUnlockData& FunctionUnlockData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

FunctionUnlockData* FunctionUnlockData::default_instance_ = NULL;

FunctionUnlockData* FunctionUnlockData::New() const {
  return new FunctionUnlockData;
}

void FunctionUnlockData::Clear() {
  functionvec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.FunctionUnlockFlag functionVec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functionvec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_functionVec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.FunctionUnlockFlag functionVec = 1;
  for (int i = 0; i < this->functionvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->functionvec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.FunctionUnlockFlag functionVec = 1;
  for (int i = 0; i < this->functionvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->functionvec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockData::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.user.FunctionUnlockFlag functionVec = 1;
  total_size += 1 * this->functionvec_size();
  for (int i = 0; i < this->functionvec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functionvec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockData::MergeFrom(const FunctionUnlockData& from) {
  GOOGLE_CHECK_NE(&from, this);
  functionvec_.MergeFrom(from.functionvec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockData::CopyFrom(const FunctionUnlockData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockData::IsInitialized() const {

  for (int i = 0; i < functionvec_size(); i++) {
    if (!this->functionvec(i).IsInitialized()) return false;
  }
  return true;
}

void FunctionUnlockData::Swap(FunctionUnlockData* other) {
  if (other != this) {
    functionvec_.Swap(&other->functionvec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockData_descriptor_;
  metadata.reflection = FunctionUnlockData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDataBinary::kIsUnlockFunctionVecFieldNumber;
const int UserDataBinary::kLoginDayVecFieldNumber;
const int UserDataBinary::kCompletedGuideStageFieldNumber;
const int UserDataBinary::kHasPassNewCharGuideFieldNumber;
#endif  // !_MSC_VER

UserDataBinary::UserDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDataBinary::InitAsDefaultInstance() {
}

UserDataBinary::UserDataBinary(const UserDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDataBinary::SharedCtor() {
  _cached_size_ = 0;
  isunlockfunctionvec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  completedguidestage_ = 0u;
  haspassnewcharguide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDataBinary::~UserDataBinary() {
  SharedDtor();
}

void UserDataBinary::SharedDtor() {
  if (isunlockfunctionvec_ != &::google::protobuf::internal::kEmptyString) {
    delete isunlockfunctionvec_;
  }
  if (this != default_instance_) {
  }
}

void UserDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDataBinary_descriptor_;
}

const UserDataBinary& UserDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UserDataBinary* UserDataBinary::default_instance_ = NULL;

UserDataBinary* UserDataBinary::New() const {
  return new UserDataBinary;
}

void UserDataBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_isunlockfunctionvec()) {
      if (isunlockfunctionvec_ != &::google::protobuf::internal::kEmptyString) {
        isunlockfunctionvec_->clear();
      }
    }
    completedguidestage_ = 0u;
    haspassnewcharguide_ = false;
  }
  logindayvec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes isUnlockFunctionVec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_isunlockfunctionvec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loginDayVec;
        break;
      }

      // repeated uint32 loginDayVec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginDayVec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_logindayvec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_logindayvec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loginDayVec;
        if (input->ExpectTag(24)) goto parse_completedGuideStage;
        break;
      }

      // required uint32 completedGuideStage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completedGuideStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completedguidestage_)));
          set_has_completedguidestage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasPassNewCharGuide;
        break;
      }

      // optional bool hasPassNewCharGuide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasPassNewCharGuide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspassnewcharguide_)));
          set_has_haspassnewcharguide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes isUnlockFunctionVec = 1;
  if (has_isunlockfunctionvec()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->isunlockfunctionvec(), output);
  }

  // repeated uint32 loginDayVec = 2;
  for (int i = 0; i < this->logindayvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->logindayvec(i), output);
  }

  // required uint32 completedGuideStage = 3;
  if (has_completedguidestage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completedguidestage(), output);
  }

  // optional bool hasPassNewCharGuide = 4;
  if (has_haspassnewcharguide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->haspassnewcharguide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes isUnlockFunctionVec = 1;
  if (has_isunlockfunctionvec()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->isunlockfunctionvec(), target);
  }

  // repeated uint32 loginDayVec = 2;
  for (int i = 0; i < this->logindayvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->logindayvec(i), target);
  }

  // required uint32 completedGuideStage = 3;
  if (has_completedguidestage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completedguidestage(), target);
  }

  // optional bool hasPassNewCharGuide = 4;
  if (has_haspassnewcharguide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->haspassnewcharguide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDataBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes isUnlockFunctionVec = 1;
    if (has_isunlockfunctionvec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->isunlockfunctionvec());
    }

    // required uint32 completedGuideStage = 3;
    if (has_completedguidestage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completedguidestage());
    }

    // optional bool hasPassNewCharGuide = 4;
    if (has_haspassnewcharguide()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 loginDayVec = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->logindayvec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->logindayvec(i));
    }
    total_size += 1 * this->logindayvec_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDataBinary::MergeFrom(const UserDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  logindayvec_.MergeFrom(from.logindayvec_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isunlockfunctionvec()) {
      set_isunlockfunctionvec(from.isunlockfunctionvec());
    }
    if (from.has_completedguidestage()) {
      set_completedguidestage(from.completedguidestage());
    }
    if (from.has_haspassnewcharguide()) {
      set_haspassnewcharguide(from.haspassnewcharguide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDataBinary::CopyFrom(const UserDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDataBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void UserDataBinary::Swap(UserDataBinary* other) {
  if (other != this) {
    std::swap(isunlockfunctionvec_, other->isunlockfunctionvec_);
    logindayvec_.Swap(&other->logindayvec_);
    std::swap(completedguidestage_, other->completedguidestage_);
    std::swap(haspassnewcharguide_, other->haspassnewcharguide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDataBinary_descriptor_;
  metadata.reflection = UserDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscoveryBinary::kNowSceneIDFieldNumber;
const int DiscoveryBinary::kPosXFieldNumber;
const int DiscoveryBinary::kPosYFieldNumber;
const int DiscoveryBinary::kThoughtLevelFieldNumber;
const int DiscoveryBinary::kThoughtExpFieldNumber;
const int DiscoveryBinary::kDiscoveryDataFieldNumber;
const int DiscoveryBinary::kGridDataFieldNumber;
const int DiscoveryBinary::kMonsterLevelFieldNumber;
const int DiscoveryBinary::kOfflineRewardDataFieldNumber;
#endif  // !_MSC_VER

DiscoveryBinary::DiscoveryBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscoveryBinary::InitAsDefaultInstance() {
}

DiscoveryBinary::DiscoveryBinary(const DiscoveryBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscoveryBinary::SharedCtor() {
  _cached_size_ = 0;
  nowsceneid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  thoughtlevel_ = 0u;
  thoughtexp_ = 0u;
  monsterlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveryBinary::~DiscoveryBinary() {
  SharedDtor();
}

void DiscoveryBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscoveryBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryBinary_descriptor_;
}

const DiscoveryBinary& DiscoveryBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DiscoveryBinary* DiscoveryBinary::default_instance_ = NULL;

DiscoveryBinary* DiscoveryBinary::New() const {
  return new DiscoveryBinary;
}

void DiscoveryBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nowsceneid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    thoughtlevel_ = 0u;
    thoughtexp_ = 0u;
    monsterlevel_ = 0u;
  }
  discoverydata_.Clear();
  griddata_.Clear();
  offlinerewarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveryBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nowSceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowsceneid_)));
          set_has_nowsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posX;
        break;
      }

      // required uint32 posX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posY;
        break;
      }

      // required uint32 posY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_thoughtLevel;
        break;
      }

      // required uint32 thoughtLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thoughtLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thoughtlevel_)));
          set_has_thoughtlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_thoughtExp;
        break;
      }

      // required uint32 thoughtExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thoughtExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thoughtexp_)));
          set_has_thoughtexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_discoveryData;
        break;
      }

      // repeated .protocol.user.DiscoveryData discoveryData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discoveryData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_discoverydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_discoveryData;
        if (input->ExpectTag(66)) goto parse_gridData;
        break;
      }

      // repeated .protocol.user.GridData gridData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gridData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_griddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_gridData;
        if (input->ExpectTag(72)) goto parse_monsterLevel;
        break;
      }

      // required uint32 monsterLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterlevel_)));
          set_has_monsterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_offlineRewardData;
        break;
      }

      // repeated .protocol.user.OfflineRewardData offlineRewardData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offlineRewardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offlinerewarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_offlineRewardData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscoveryBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nowSceneID = 1;
  if (has_nowsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nowsceneid(), output);
  }

  // required uint32 posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->posx(), output);
  }

  // required uint32 posY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->posy(), output);
  }

  // required uint32 thoughtLevel = 4;
  if (has_thoughtlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thoughtlevel(), output);
  }

  // required uint32 thoughtExp = 5;
  if (has_thoughtexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thoughtexp(), output);
  }

  // repeated .protocol.user.DiscoveryData discoveryData = 7;
  for (int i = 0; i < this->discoverydata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->discoverydata(i), output);
  }

  // repeated .protocol.user.GridData gridData = 8;
  for (int i = 0; i < this->griddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->griddata(i), output);
  }

  // required uint32 monsterLevel = 9;
  if (has_monsterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->monsterlevel(), output);
  }

  // repeated .protocol.user.OfflineRewardData offlineRewardData = 10;
  for (int i = 0; i < this->offlinerewarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->offlinerewarddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscoveryBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nowSceneID = 1;
  if (has_nowsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nowsceneid(), target);
  }

  // required uint32 posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->posx(), target);
  }

  // required uint32 posY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->posy(), target);
  }

  // required uint32 thoughtLevel = 4;
  if (has_thoughtlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thoughtlevel(), target);
  }

  // required uint32 thoughtExp = 5;
  if (has_thoughtexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thoughtexp(), target);
  }

  // repeated .protocol.user.DiscoveryData discoveryData = 7;
  for (int i = 0; i < this->discoverydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->discoverydata(i), target);
  }

  // repeated .protocol.user.GridData gridData = 8;
  for (int i = 0; i < this->griddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->griddata(i), target);
  }

  // required uint32 monsterLevel = 9;
  if (has_monsterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->monsterlevel(), target);
  }

  // repeated .protocol.user.OfflineRewardData offlineRewardData = 10;
  for (int i = 0; i < this->offlinerewarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->offlinerewarddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscoveryBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nowSceneID = 1;
    if (has_nowsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowsceneid());
    }

    // required uint32 posX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posx());
    }

    // required uint32 posY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posy());
    }

    // required uint32 thoughtLevel = 4;
    if (has_thoughtlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thoughtlevel());
    }

    // required uint32 thoughtExp = 5;
    if (has_thoughtexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thoughtexp());
    }

    // required uint32 monsterLevel = 9;
    if (has_monsterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterlevel());
    }

  }
  // repeated .protocol.user.DiscoveryData discoveryData = 7;
  total_size += 1 * this->discoverydata_size();
  for (int i = 0; i < this->discoverydata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->discoverydata(i));
  }

  // repeated .protocol.user.GridData gridData = 8;
  total_size += 1 * this->griddata_size();
  for (int i = 0; i < this->griddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->griddata(i));
  }

  // repeated .protocol.user.OfflineRewardData offlineRewardData = 10;
  total_size += 1 * this->offlinerewarddata_size();
  for (int i = 0; i < this->offlinerewarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offlinerewarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveryBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveryBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveryBinary::MergeFrom(const DiscoveryBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  discoverydata_.MergeFrom(from.discoverydata_);
  griddata_.MergeFrom(from.griddata_);
  offlinerewarddata_.MergeFrom(from.offlinerewarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nowsceneid()) {
      set_nowsceneid(from.nowsceneid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_thoughtlevel()) {
      set_thoughtlevel(from.thoughtlevel());
    }
    if (from.has_thoughtexp()) {
      set_thoughtexp(from.thoughtexp());
    }
    if (from.has_monsterlevel()) {
      set_monsterlevel(from.monsterlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveryBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryBinary::CopyFrom(const DiscoveryBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  for (int i = 0; i < discoverydata_size(); i++) {
    if (!this->discoverydata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < griddata_size(); i++) {
    if (!this->griddata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < offlinerewarddata_size(); i++) {
    if (!this->offlinerewarddata(i).IsInitialized()) return false;
  }
  return true;
}

void DiscoveryBinary::Swap(DiscoveryBinary* other) {
  if (other != this) {
    std::swap(nowsceneid_, other->nowsceneid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(thoughtlevel_, other->thoughtlevel_);
    std::swap(thoughtexp_, other->thoughtexp_);
    discoverydata_.Swap(&other->discoverydata_);
    griddata_.Swap(&other->griddata_);
    std::swap(monsterlevel_, other->monsterlevel_);
    offlinerewarddata_.Swap(&other->offlinerewarddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveryBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryBinary_descriptor_;
  metadata.reflection = DiscoveryBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineRewardData::kIndexFieldNumber;
const int OfflineRewardData::kSceneIDFieldNumber;
const int OfflineRewardData::kNeedTimeInSecFieldNumber;
const int OfflineRewardData::kStartTimeInSecFieldNumber;
const int OfflineRewardData::kIsUnlockFieldNumber;
#endif  // !_MSC_VER

OfflineRewardData::OfflineRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineRewardData::InitAsDefaultInstance() {
}

OfflineRewardData::OfflineRewardData(const OfflineRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineRewardData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  sceneid_ = 0u;
  needtimeinsec_ = 0u;
  starttimeinsec_ = 0u;
  isunlock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineRewardData::~OfflineRewardData() {
  SharedDtor();
}

void OfflineRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineRewardData_descriptor_;
}

const OfflineRewardData& OfflineRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

OfflineRewardData* OfflineRewardData::default_instance_ = NULL;

OfflineRewardData* OfflineRewardData::New() const {
  return new OfflineRewardData;
}

void OfflineRewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    sceneid_ = 0u;
    needtimeinsec_ = 0u;
    starttimeinsec_ = 0u;
    isunlock_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneID;
        break;
      }

      // required uint32 sceneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needTimeInSec;
        break;
      }

      // required uint32 needTimeInSec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needtimeinsec_)));
          set_has_needtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startTimeInSec;
        break;
      }

      // required uint32 startTimeInSec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttimeinsec_)));
          set_has_starttimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isUnlock;
        break;
      }

      // required uint32 isUnlock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isunlock_)));
          set_has_isunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 sceneID = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }

  // required uint32 needTimeInSec = 3;
  if (has_needtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->needtimeinsec(), output);
  }

  // required uint32 startTimeInSec = 4;
  if (has_starttimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starttimeinsec(), output);
  }

  // required uint32 isUnlock = 5;
  if (has_isunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isunlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 sceneID = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }

  // required uint32 needTimeInSec = 3;
  if (has_needtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->needtimeinsec(), target);
  }

  // required uint32 startTimeInSec = 4;
  if (has_starttimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starttimeinsec(), target);
  }

  // required uint32 isUnlock = 5;
  if (has_isunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isunlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 sceneID = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required uint32 needTimeInSec = 3;
    if (has_needtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needtimeinsec());
    }

    // required uint32 startTimeInSec = 4;
    if (has_starttimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttimeinsec());
    }

    // required uint32 isUnlock = 5;
    if (has_isunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isunlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineRewardData::MergeFrom(const OfflineRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_needtimeinsec()) {
      set_needtimeinsec(from.needtimeinsec());
    }
    if (from.has_starttimeinsec()) {
      set_starttimeinsec(from.starttimeinsec());
    }
    if (from.has_isunlock()) {
      set_isunlock(from.isunlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineRewardData::CopyFrom(const OfflineRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineRewardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void OfflineRewardData::Swap(OfflineRewardData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(needtimeinsec_, other->needtimeinsec_);
    std::swap(starttimeinsec_, other->starttimeinsec_);
    std::swap(isunlock_, other->isunlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineRewardData_descriptor_;
  metadata.reflection = OfflineRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscoveryData::kSceneIDFieldNumber;
const int DiscoveryData::kTimesFieldNumber;
#endif  // !_MSC_VER

DiscoveryData::DiscoveryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscoveryData::InitAsDefaultInstance() {
}

DiscoveryData::DiscoveryData(const DiscoveryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscoveryData::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveryData::~DiscoveryData() {
  SharedDtor();
}

void DiscoveryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscoveryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryData_descriptor_;
}

const DiscoveryData& DiscoveryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DiscoveryData* DiscoveryData::default_instance_ = NULL;

DiscoveryData* DiscoveryData::New() const {
  return new DiscoveryData;
}

void DiscoveryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscoveryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // required uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscoveryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }

  // required uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscoveryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveryData::MergeFrom(const DiscoveryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryData::CopyFrom(const DiscoveryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DiscoveryData::Swap(DiscoveryData* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryData_descriptor_;
  metadata.reflection = DiscoveryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridData::kObjIDFieldNumber;
const int GridData::kNumFieldNumber;
const int GridData::kIsBindFieldNumber;
const int GridData::kTimeInSecFieldNumber;
const int GridData::kTypeFieldNumber;
const int GridData::kIndexFieldNumber;
const int GridData::kIsOpenFieldNumber;
const int GridData::kOpenTimeInSecFieldNumber;
const int GridData::kAddSpeedNeedItemNumFieldNumber;
#endif  // !_MSC_VER

GridData::GridData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridData::InitAsDefaultInstance() {
}

GridData::GridData(const GridData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridData::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0u;
  num_ = 0u;
  isbind_ = 0u;
  timeinsec_ = 0u;
  type_ = 0u;
  index_ = 0u;
  isopen_ = false;
  opentimeinsec_ = false;
  addspeedneeditemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridData::~GridData() {
  SharedDtor();
}

void GridData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridData_descriptor_;
}

const GridData& GridData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

GridData* GridData::default_instance_ = NULL;

GridData* GridData::New() const {
  return new GridData;
}

void GridData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0u;
    num_ = 0u;
    isbind_ = 0u;
    timeinsec_ = 0u;
    type_ = 0u;
    index_ = 0u;
    isopen_ = false;
    opentimeinsec_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    addspeedneeditemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 objID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isBind;
        break;
      }

      // required uint32 isBind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isbind_)));
          set_has_isbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeInSec;
        break;
      }

      // required uint32 timeInSec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeinsec_)));
          set_has_timeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // required uint32 index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isOpen;
        break;
      }

      // required bool isOpen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_openTimeInSec;
        break;
      }

      // required bool openTimeInSec = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opentimeinsec_)));
          set_has_opentimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_addSpeedNeedItemNum;
        break;
      }

      // required uint32 addSpeedNeedItemNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addSpeedNeedItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addspeedneeditemnum_)));
          set_has_addspeedneeditemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->objid(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // required uint32 isBind = 3;
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isbind(), output);
  }

  // required uint32 timeInSec = 4;
  if (has_timeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeinsec(), output);
  }

  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // required uint32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->index(), output);
  }

  // required bool isOpen = 7;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isopen(), output);
  }

  // required bool openTimeInSec = 8;
  if (has_opentimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->opentimeinsec(), output);
  }

  // required uint32 addSpeedNeedItemNum = 9;
  if (has_addspeedneeditemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->addspeedneeditemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->objid(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // required uint32 isBind = 3;
  if (has_isbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isbind(), target);
  }

  // required uint32 timeInSec = 4;
  if (has_timeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeinsec(), target);
  }

  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // required uint32 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->index(), target);
  }

  // required bool isOpen = 7;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isopen(), target);
  }

  // required bool openTimeInSec = 8;
  if (has_opentimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->opentimeinsec(), target);
  }

  // required uint32 addSpeedNeedItemNum = 9;
  if (has_addspeedneeditemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->addspeedneeditemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objid());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 isBind = 3;
    if (has_isbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isbind());
    }

    // required uint32 timeInSec = 4;
    if (has_timeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeinsec());
    }

    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required bool isOpen = 7;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // required bool openTimeInSec = 8;
    if (has_opentimeinsec()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 addSpeedNeedItemNum = 9;
    if (has_addspeedneeditemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addspeedneeditemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridData::MergeFrom(const GridData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_isbind()) {
      set_isbind(from.isbind());
    }
    if (from.has_timeinsec()) {
      set_timeinsec(from.timeinsec());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_opentimeinsec()) {
      set_opentimeinsec(from.opentimeinsec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_addspeedneeditemnum()) {
      set_addspeedneeditemnum(from.addspeedneeditemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridData::CopyFrom(const GridData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void GridData::Swap(GridData* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(num_, other->num_);
    std::swap(isbind_, other->isbind_);
    std::swap(timeinsec_, other->timeinsec_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(isopen_, other->isopen_);
    std::swap(opentimeinsec_, other->opentimeinsec_);
    std::swap(addspeedneeditemnum_, other->addspeedneeditemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridData_descriptor_;
  metadata.reflection = GridData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRelationSaveData::kCharIDFieldNumber;
const int UserRelationSaveData::kClubDataFieldNumber;
const int UserRelationSaveData::kMessageFieldNumber;
#endif  // !_MSC_VER

UserRelationSaveData::UserRelationSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRelationSaveData::InitAsDefaultInstance() {
}

UserRelationSaveData::UserRelationSaveData(const UserRelationSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRelationSaveData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  clubdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRelationSaveData::~UserRelationSaveData() {
  SharedDtor();
}

void UserRelationSaveData::SharedDtor() {
  if (clubdata_ != &::google::protobuf::internal::kEmptyString) {
    delete clubdata_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void UserRelationSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRelationSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRelationSaveData_descriptor_;
}

const UserRelationSaveData& UserRelationSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

UserRelationSaveData* UserRelationSaveData::default_instance_ = NULL;

UserRelationSaveData* UserRelationSaveData::New() const {
  return new UserRelationSaveData;
}

void UserRelationSaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_clubdata()) {
      if (clubdata_ != &::google::protobuf::internal::kEmptyString) {
        clubdata_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRelationSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clubData;
        break;
      }

      // optional bytes clubData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clubdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRelationSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bytes clubData = 2;
  if (has_clubdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->clubdata(), output);
  }

  // optional bytes message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRelationSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bytes clubData = 2;
  if (has_clubdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clubdata(), target);
  }

  // optional bytes message = 3;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRelationSaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bytes clubData = 2;
    if (has_clubdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clubdata());
    }

    // optional bytes message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRelationSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRelationSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRelationSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRelationSaveData::MergeFrom(const UserRelationSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_clubdata()) {
      set_clubdata(from.clubdata());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRelationSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRelationSaveData::CopyFrom(const UserRelationSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRelationSaveData::IsInitialized() const {

  return true;
}

void UserRelationSaveData::Swap(UserRelationSaveData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(clubdata_, other->clubdata_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRelationSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRelationSaveData_descriptor_;
  metadata.reflection = UserRelationSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitJoinClubData::kClubIDFieldNumber;
const int WaitJoinClubData::kRequestTimeInSecFieldNumber;
#endif  // !_MSC_VER

WaitJoinClubData::WaitJoinClubData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaitJoinClubData::InitAsDefaultInstance() {
}

WaitJoinClubData::WaitJoinClubData(const WaitJoinClubData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaitJoinClubData::SharedCtor() {
  _cached_size_ = 0;
  clubid_ = 0u;
  requesttimeinsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitJoinClubData::~WaitJoinClubData() {
  SharedDtor();
}

void WaitJoinClubData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaitJoinClubData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitJoinClubData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitJoinClubData_descriptor_;
}

const WaitJoinClubData& WaitJoinClubData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

WaitJoinClubData* WaitJoinClubData::default_instance_ = NULL;

WaitJoinClubData* WaitJoinClubData::New() const {
  return new WaitJoinClubData;
}

void WaitJoinClubData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clubid_ = 0u;
    requesttimeinsec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitJoinClubData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clubID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clubid_)));
          set_has_clubid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requestTimeInSec;
        break;
      }

      // required uint32 requestTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requesttimeinsec_)));
          set_has_requesttimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaitJoinClubData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clubID = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clubid(), output);
  }

  // required uint32 requestTimeInSec = 2;
  if (has_requesttimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->requesttimeinsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaitJoinClubData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clubID = 1;
  if (has_clubid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clubid(), target);
  }

  // required uint32 requestTimeInSec = 2;
  if (has_requesttimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->requesttimeinsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaitJoinClubData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clubID = 1;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clubid());
    }

    // required uint32 requestTimeInSec = 2;
    if (has_requesttimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requesttimeinsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitJoinClubData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitJoinClubData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitJoinClubData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitJoinClubData::MergeFrom(const WaitJoinClubData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
    if (from.has_requesttimeinsec()) {
      set_requesttimeinsec(from.requesttimeinsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitJoinClubData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitJoinClubData::CopyFrom(const WaitJoinClubData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitJoinClubData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WaitJoinClubData::Swap(WaitJoinClubData* other) {
  if (other != this) {
    std::swap(clubid_, other->clubid_);
    std::swap(requesttimeinsec_, other->requesttimeinsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitJoinClubData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitJoinClubData_descriptor_;
  metadata.reflection = WaitJoinClubData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSaveData::kClubIDFieldNumber;
const int ClubSaveData::kLastLeaveClubTimeInSecFieldNumber;
const int ClubSaveData::kClubContributionLevelFieldNumber;
const int ClubSaveData::kClubContributionValueFieldNumber;
const int ClubSaveData::kWaitJoinClubListFieldNumber;
const int ClubSaveData::kSaveTimeInSecFieldNumber;
const int ClubSaveData::kClubTitleFieldNumber;
#endif  // !_MSC_VER

ClubSaveData::ClubSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClubSaveData::InitAsDefaultInstance() {
}

ClubSaveData::ClubSaveData(const ClubSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClubSaveData::SharedCtor() {
  _cached_size_ = 0;
  clubid_ = 0u;
  lastleaveclubtimeinsec_ = 0u;
  clubcontributionlevel_ = 0u;
  clubcontributionvalue_ = 0u;
  savetimeinsec_ = 0u;
  clubtitle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSaveData::~ClubSaveData() {
  SharedDtor();
}

void ClubSaveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSaveData_descriptor_;
}

const ClubSaveData& ClubSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

ClubSaveData* ClubSaveData::default_instance_ = NULL;

ClubSaveData* ClubSaveData::New() const {
  return new ClubSaveData;
}

void ClubSaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clubid_ = 0u;
    lastleaveclubtimeinsec_ = 0u;
    clubcontributionlevel_ = 0u;
    clubcontributionvalue_ = 0u;
    savetimeinsec_ = 0u;
    clubtitle_ = 0u;
  }
  waitjoinclublist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clubID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clubid_)));
          set_has_clubid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastLeaveClubTimeInSec;
        break;
      }

      // optional uint32 lastLeaveClubTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLeaveClubTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastleaveclubtimeinsec_)));
          set_has_lastleaveclubtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clubContributionLevel;
        break;
      }

      // optional uint32 clubContributionLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubContributionLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clubcontributionlevel_)));
          set_has_clubcontributionlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clubContributionValue;
        break;
      }

      // optional uint32 clubContributionValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubContributionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clubcontributionvalue_)));
          set_has_clubcontributionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_waitJoinClubList;
        break;
      }

      // repeated .protocol.user.WaitJoinClubData waitJoinClubList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waitJoinClubList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waitjoinclublist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_waitJoinClubList;
        if (input->ExpectTag(48)) goto parse_saveTimeInSec;
        break;
      }

      // optional uint32 saveTimeInSec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savetimeinsec_)));
          set_has_savetimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_clubTitle;
        break;
      }

      // optional uint32 clubTitle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clubtitle_)));
          set_has_clubtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClubSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 clubID = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clubid(), output);
  }

  // optional uint32 lastLeaveClubTimeInSec = 2;
  if (has_lastleaveclubtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastleaveclubtimeinsec(), output);
  }

  // optional uint32 clubContributionLevel = 3;
  if (has_clubcontributionlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clubcontributionlevel(), output);
  }

  // optional uint32 clubContributionValue = 4;
  if (has_clubcontributionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->clubcontributionvalue(), output);
  }

  // repeated .protocol.user.WaitJoinClubData waitJoinClubList = 5;
  for (int i = 0; i < this->waitjoinclublist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->waitjoinclublist(i), output);
  }

  // optional uint32 saveTimeInSec = 6;
  if (has_savetimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->savetimeinsec(), output);
  }

  // optional uint32 clubTitle = 7;
  if (has_clubtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->clubtitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClubSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 clubID = 1;
  if (has_clubid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clubid(), target);
  }

  // optional uint32 lastLeaveClubTimeInSec = 2;
  if (has_lastleaveclubtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastleaveclubtimeinsec(), target);
  }

  // optional uint32 clubContributionLevel = 3;
  if (has_clubcontributionlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clubcontributionlevel(), target);
  }

  // optional uint32 clubContributionValue = 4;
  if (has_clubcontributionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->clubcontributionvalue(), target);
  }

  // repeated .protocol.user.WaitJoinClubData waitJoinClubList = 5;
  for (int i = 0; i < this->waitjoinclublist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->waitjoinclublist(i), target);
  }

  // optional uint32 saveTimeInSec = 6;
  if (has_savetimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->savetimeinsec(), target);
  }

  // optional uint32 clubTitle = 7;
  if (has_clubtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->clubtitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClubSaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clubID = 1;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clubid());
    }

    // optional uint32 lastLeaveClubTimeInSec = 2;
    if (has_lastleaveclubtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastleaveclubtimeinsec());
    }

    // optional uint32 clubContributionLevel = 3;
    if (has_clubcontributionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clubcontributionlevel());
    }

    // optional uint32 clubContributionValue = 4;
    if (has_clubcontributionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clubcontributionvalue());
    }

    // optional uint32 saveTimeInSec = 6;
    if (has_savetimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savetimeinsec());
    }

    // optional uint32 clubTitle = 7;
    if (has_clubtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clubtitle());
    }

  }
  // repeated .protocol.user.WaitJoinClubData waitJoinClubList = 5;
  total_size += 1 * this->waitjoinclublist_size();
  for (int i = 0; i < this->waitjoinclublist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waitjoinclublist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSaveData::MergeFrom(const ClubSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  waitjoinclublist_.MergeFrom(from.waitjoinclublist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
    if (from.has_lastleaveclubtimeinsec()) {
      set_lastleaveclubtimeinsec(from.lastleaveclubtimeinsec());
    }
    if (from.has_clubcontributionlevel()) {
      set_clubcontributionlevel(from.clubcontributionlevel());
    }
    if (from.has_clubcontributionvalue()) {
      set_clubcontributionvalue(from.clubcontributionvalue());
    }
    if (from.has_savetimeinsec()) {
      set_savetimeinsec(from.savetimeinsec());
    }
    if (from.has_clubtitle()) {
      set_clubtitle(from.clubtitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSaveData::CopyFrom(const ClubSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSaveData::IsInitialized() const {

  for (int i = 0; i < waitjoinclublist_size(); i++) {
    if (!this->waitjoinclublist(i).IsInitialized()) return false;
  }
  return true;
}

void ClubSaveData::Swap(ClubSaveData* other) {
  if (other != this) {
    std::swap(clubid_, other->clubid_);
    std::swap(lastleaveclubtimeinsec_, other->lastleaveclubtimeinsec_);
    std::swap(clubcontributionlevel_, other->clubcontributionlevel_);
    std::swap(clubcontributionvalue_, other->clubcontributionvalue_);
    waitjoinclublist_.Swap(&other->waitjoinclublist_);
    std::swap(savetimeinsec_, other->savetimeinsec_);
    std::swap(clubtitle_, other->clubtitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSaveData_descriptor_;
  metadata.reflection = ClubSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipTypeData::kVipTypeFieldNumber;
const int VipTypeData::kEndTimeInSecFieldNumber;
#endif  // !_MSC_VER

VipTypeData::VipTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipTypeData::InitAsDefaultInstance() {
}

VipTypeData::VipTypeData(const VipTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipTypeData::SharedCtor() {
  _cached_size_ = 0;
  viptype_ = 0u;
  endtimeinsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipTypeData::~VipTypeData() {
  SharedDtor();
}

void VipTypeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipTypeData_descriptor_;
}

const VipTypeData& VipTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

VipTypeData* VipTypeData::default_instance_ = NULL;

VipTypeData* VipTypeData::New() const {
  return new VipTypeData;
}

void VipTypeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viptype_ = 0u;
    endtimeinsec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vipType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viptype_)));
          set_has_viptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTimeInSec;
        break;
      }

      // required uint32 endTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtimeinsec_)));
          set_has_endtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 vipType = 1;
  if (has_viptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viptype(), output);
  }

  // required uint32 endTimeInSec = 2;
  if (has_endtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtimeinsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 vipType = 1;
  if (has_viptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->viptype(), target);
  }

  // required uint32 endTimeInSec = 2;
  if (has_endtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtimeinsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipTypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 vipType = 1;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viptype());
    }

    // required uint32 endTimeInSec = 2;
    if (has_endtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtimeinsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipTypeData::MergeFrom(const VipTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viptype()) {
      set_viptype(from.viptype());
    }
    if (from.has_endtimeinsec()) {
      set_endtimeinsec(from.endtimeinsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipTypeData::CopyFrom(const VipTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipTypeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VipTypeData::Swap(VipTypeData* other) {
  if (other != this) {
    std::swap(viptype_, other->viptype_);
    std::swap(endtimeinsec_, other->endtimeinsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipTypeData_descriptor_;
  metadata.reflection = VipTypeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineOpenVipData::kRequestUserNameFieldNumber;
const int OfflineOpenVipData::kOpenTimeInSecFieldNumber;
const int OfflineOpenVipData::kEffectTimeInDayFieldNumber;
#endif  // !_MSC_VER

OfflineOpenVipData::OfflineOpenVipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineOpenVipData::InitAsDefaultInstance() {
}

OfflineOpenVipData::OfflineOpenVipData(const OfflineOpenVipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineOpenVipData::SharedCtor() {
  _cached_size_ = 0;
  requestusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opentimeinsec_ = 0u;
  effecttimeinday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineOpenVipData::~OfflineOpenVipData() {
  SharedDtor();
}

void OfflineOpenVipData::SharedDtor() {
  if (requestusername_ != &::google::protobuf::internal::kEmptyString) {
    delete requestusername_;
  }
  if (this != default_instance_) {
  }
}

void OfflineOpenVipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineOpenVipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineOpenVipData_descriptor_;
}

const OfflineOpenVipData& OfflineOpenVipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

OfflineOpenVipData* OfflineOpenVipData::default_instance_ = NULL;

OfflineOpenVipData* OfflineOpenVipData::New() const {
  return new OfflineOpenVipData;
}

void OfflineOpenVipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requestusername()) {
      if (requestusername_ != &::google::protobuf::internal::kEmptyString) {
        requestusername_->clear();
      }
    }
    opentimeinsec_ = 0u;
    effecttimeinday_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineOpenVipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requestUserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestusername().data(), this->requestusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_openTimeInSec;
        break;
      }

      // required uint32 openTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentimeinsec_)));
          set_has_opentimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effectTimeInDay;
        break;
      }

      // required uint32 effectTimeInDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectTimeInDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effecttimeinday_)));
          set_has_effecttimeinday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineOpenVipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string requestUserName = 1;
  if (has_requestusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestusername().data(), this->requestusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->requestusername(), output);
  }

  // required uint32 openTimeInSec = 2;
  if (has_opentimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opentimeinsec(), output);
  }

  // required uint32 effectTimeInDay = 3;
  if (has_effecttimeinday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effecttimeinday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineOpenVipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string requestUserName = 1;
  if (has_requestusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestusername().data(), this->requestusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requestusername(), target);
  }

  // required uint32 openTimeInSec = 2;
  if (has_opentimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opentimeinsec(), target);
  }

  // required uint32 effectTimeInDay = 3;
  if (has_effecttimeinday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effecttimeinday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineOpenVipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requestUserName = 1;
    if (has_requestusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestusername());
    }

    // required uint32 openTimeInSec = 2;
    if (has_opentimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opentimeinsec());
    }

    // required uint32 effectTimeInDay = 3;
    if (has_effecttimeinday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effecttimeinday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineOpenVipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineOpenVipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineOpenVipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineOpenVipData::MergeFrom(const OfflineOpenVipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestusername()) {
      set_requestusername(from.requestusername());
    }
    if (from.has_opentimeinsec()) {
      set_opentimeinsec(from.opentimeinsec());
    }
    if (from.has_effecttimeinday()) {
      set_effecttimeinday(from.effecttimeinday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineOpenVipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineOpenVipData::CopyFrom(const OfflineOpenVipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineOpenVipData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OfflineOpenVipData::Swap(OfflineOpenVipData* other) {
  if (other != this) {
    std::swap(requestusername_, other->requestusername_);
    std::swap(opentimeinsec_, other->opentimeinsec_);
    std::swap(effecttimeinday_, other->effecttimeinday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineOpenVipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineOpenVipData_descriptor_;
  metadata.reflection = OfflineOpenVipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipBinary::kVipLevelFieldNumber;
const int VipBinary::kVipGrowValueFieldNumber;
const int VipBinary::kOfflineOpenVipDataListFieldNumber;
const int VipBinary::kVipEndTimeInSecFieldNumber;
const int VipBinary::kVipTypeDataListFieldNumber;
const int VipBinary::kLastCheckOverdueTimeInSecFieldNumber;
const int VipBinary::kVipTypeFieldNumber;
#endif  // !_MSC_VER

VipBinary::VipBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipBinary::InitAsDefaultInstance() {
}

VipBinary::VipBinary(const VipBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipBinary::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = 0u;
  vipgrowvalue_ = 0u;
  vipendtimeinsec_ = 0u;
  lastcheckoverduetimeinsec_ = 0u;
  viptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipBinary::~VipBinary() {
  SharedDtor();
}

void VipBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipBinary_descriptor_;
}

const VipBinary& VipBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

VipBinary* VipBinary::default_instance_ = NULL;

VipBinary* VipBinary::New() const {
  return new VipBinary;
}

void VipBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viplevel_ = 0u;
    vipgrowvalue_ = 0u;
    vipendtimeinsec_ = 0u;
    lastcheckoverduetimeinsec_ = 0u;
    viptype_ = 0u;
  }
  offlineopenvipdatalist_.Clear();
  viptypedatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vipLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipGrowValue;
        break;
      }

      // optional uint32 vipGrowValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipGrowValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipgrowvalue_)));
          set_has_vipgrowvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offlineOpenVipDataList;
        break;
      }

      // repeated .protocol.user.OfflineOpenVipData offlineOpenVipDataList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offlineOpenVipDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offlineopenvipdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offlineOpenVipDataList;
        if (input->ExpectTag(32)) goto parse_vipEndTimeInSec;
        break;
      }

      // optional uint32 vipEndTimeInSec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipEndTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipendtimeinsec_)));
          set_has_vipendtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vipTypeDataList;
        break;
      }

      // repeated .protocol.user.VipTypeData vipTypeDataList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipTypeDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_viptypedatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vipTypeDataList;
        if (input->ExpectTag(48)) goto parse_lastCheckOverdueTimeInSec;
        break;
      }

      // optional uint32 lastCheckOverdueTimeInSec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastCheckOverdueTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastcheckoverduetimeinsec_)));
          set_has_lastcheckoverduetimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipType;
        break;
      }

      // optional uint32 vipType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viptype_)));
          set_has_viptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 vipLevel = 1;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viplevel(), output);
  }

  // optional uint32 vipGrowValue = 2;
  if (has_vipgrowvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vipgrowvalue(), output);
  }

  // repeated .protocol.user.OfflineOpenVipData offlineOpenVipDataList = 3;
  for (int i = 0; i < this->offlineopenvipdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offlineopenvipdatalist(i), output);
  }

  // optional uint32 vipEndTimeInSec = 4;
  if (has_vipendtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vipendtimeinsec(), output);
  }

  // repeated .protocol.user.VipTypeData vipTypeDataList = 5;
  for (int i = 0; i < this->viptypedatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->viptypedatalist(i), output);
  }

  // optional uint32 lastCheckOverdueTimeInSec = 6;
  if (has_lastcheckoverduetimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lastcheckoverduetimeinsec(), output);
  }

  // optional uint32 vipType = 7;
  if (has_viptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 vipLevel = 1;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->viplevel(), target);
  }

  // optional uint32 vipGrowValue = 2;
  if (has_vipgrowvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vipgrowvalue(), target);
  }

  // repeated .protocol.user.OfflineOpenVipData offlineOpenVipDataList = 3;
  for (int i = 0; i < this->offlineopenvipdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offlineopenvipdatalist(i), target);
  }

  // optional uint32 vipEndTimeInSec = 4;
  if (has_vipendtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vipendtimeinsec(), target);
  }

  // repeated .protocol.user.VipTypeData vipTypeDataList = 5;
  for (int i = 0; i < this->viptypedatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->viptypedatalist(i), target);
  }

  // optional uint32 lastCheckOverdueTimeInSec = 6;
  if (has_lastcheckoverduetimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lastcheckoverduetimeinsec(), target);
  }

  // optional uint32 vipType = 7;
  if (has_viptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vipLevel = 1;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 vipGrowValue = 2;
    if (has_vipgrowvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipgrowvalue());
    }

    // optional uint32 vipEndTimeInSec = 4;
    if (has_vipendtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipendtimeinsec());
    }

    // optional uint32 lastCheckOverdueTimeInSec = 6;
    if (has_lastcheckoverduetimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastcheckoverduetimeinsec());
    }

    // optional uint32 vipType = 7;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viptype());
    }

  }
  // repeated .protocol.user.OfflineOpenVipData offlineOpenVipDataList = 3;
  total_size += 1 * this->offlineopenvipdatalist_size();
  for (int i = 0; i < this->offlineopenvipdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offlineopenvipdatalist(i));
  }

  // repeated .protocol.user.VipTypeData vipTypeDataList = 5;
  total_size += 1 * this->viptypedatalist_size();
  for (int i = 0; i < this->viptypedatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->viptypedatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipBinary::MergeFrom(const VipBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  offlineopenvipdatalist_.MergeFrom(from.offlineopenvipdatalist_);
  viptypedatalist_.MergeFrom(from.viptypedatalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipgrowvalue()) {
      set_vipgrowvalue(from.vipgrowvalue());
    }
    if (from.has_vipendtimeinsec()) {
      set_vipendtimeinsec(from.vipendtimeinsec());
    }
    if (from.has_lastcheckoverduetimeinsec()) {
      set_lastcheckoverduetimeinsec(from.lastcheckoverduetimeinsec());
    }
    if (from.has_viptype()) {
      set_viptype(from.viptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipBinary::CopyFrom(const VipBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipBinary::IsInitialized() const {

  for (int i = 0; i < offlineopenvipdatalist_size(); i++) {
    if (!this->offlineopenvipdatalist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < viptypedatalist_size(); i++) {
    if (!this->viptypedatalist(i).IsInitialized()) return false;
  }
  return true;
}

void VipBinary::Swap(VipBinary* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipgrowvalue_, other->vipgrowvalue_);
    offlineopenvipdatalist_.Swap(&other->offlineopenvipdatalist_);
    std::swap(vipendtimeinsec_, other->vipendtimeinsec_);
    viptypedatalist_.Swap(&other->viptypedatalist_);
    std::swap(lastcheckoverduetimeinsec_, other->lastcheckoverduetimeinsec_);
    std::swap(viptype_, other->viptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipBinary_descriptor_;
  metadata.reflection = VipBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarDataBinary::kWinTimesFieldNumber;
const int WarDataBinary::kLoseTimesFieldNumber;
const int WarDataBinary::kPvpTimesFieldNumber;
const int WarDataBinary::kSaveTimeInSecFieldNumber;
const int WarDataBinary::kWeekWinTimesFieldNumber;
const int WarDataBinary::kWeekLoseTimesFieldNumber;
const int WarDataBinary::kWeekPvpTimesFieldNumber;
const int WarDataBinary::kWeekKillNumFieldNumber;
const int WarDataBinary::kWeekKilledNumFieldNumber;
const int WarDataBinary::kKillNumFieldNumber;
const int WarDataBinary::kKilledNumFieldNumber;
#endif  // !_MSC_VER

WarDataBinary::WarDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarDataBinary::InitAsDefaultInstance() {
}

WarDataBinary::WarDataBinary(const WarDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarDataBinary::SharedCtor() {
  _cached_size_ = 0;
  wintimes_ = 0u;
  losetimes_ = 0u;
  pvptimes_ = 0u;
  savetimeinsec_ = 0u;
  weekwintimes_ = 0u;
  weeklosetimes_ = 0u;
  weekpvptimes_ = 0u;
  weekkillnum_ = 0u;
  weekkillednum_ = 0u;
  killnum_ = 0u;
  killednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarDataBinary::~WarDataBinary() {
  SharedDtor();
}

void WarDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarDataBinary_descriptor_;
}

const WarDataBinary& WarDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

WarDataBinary* WarDataBinary::default_instance_ = NULL;

WarDataBinary* WarDataBinary::New() const {
  return new WarDataBinary;
}

void WarDataBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wintimes_ = 0u;
    losetimes_ = 0u;
    pvptimes_ = 0u;
    savetimeinsec_ = 0u;
    weekwintimes_ = 0u;
    weeklosetimes_ = 0u;
    weekpvptimes_ = 0u;
    weekkillnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weekkillednum_ = 0u;
    killnum_ = 0u;
    killednum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 winTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wintimes_)));
          set_has_wintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loseTimes;
        break;
      }

      // optional uint32 loseTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losetimes_)));
          set_has_losetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pvpTimes;
        break;
      }

      // optional uint32 pvpTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvptimes_)));
          set_has_pvptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_saveTimeInSec;
        break;
      }

      // optional uint32 saveTimeInSec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savetimeinsec_)));
          set_has_savetimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weekWinTimes;
        break;
      }

      // optional uint32 weekWinTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekWinTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekwintimes_)));
          set_has_weekwintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weekLoseTimes;
        break;
      }

      // optional uint32 weekLoseTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekLoseTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeklosetimes_)));
          set_has_weeklosetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weekPvpTimes;
        break;
      }

      // optional uint32 weekPvpTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekPvpTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekpvptimes_)));
          set_has_weekpvptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weekKillNum;
        break;
      }

      // optional uint32 weekKillNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekkillnum_)));
          set_has_weekkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_weekKilledNum;
        break;
      }

      // optional uint32 weekKilledNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekKilledNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekkillednum_)));
          set_has_weekkillednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_killedNum;
        break;
      }

      // optional uint32 killedNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killednum_)));
          set_has_killednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 winTimes = 1;
  if (has_wintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wintimes(), output);
  }

  // optional uint32 loseTimes = 2;
  if (has_losetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->losetimes(), output);
  }

  // optional uint32 pvpTimes = 3;
  if (has_pvptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pvptimes(), output);
  }

  // optional uint32 saveTimeInSec = 4;
  if (has_savetimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->savetimeinsec(), output);
  }

  // optional uint32 weekWinTimes = 5;
  if (has_weekwintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->weekwintimes(), output);
  }

  // optional uint32 weekLoseTimes = 6;
  if (has_weeklosetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->weeklosetimes(), output);
  }

  // optional uint32 weekPvpTimes = 7;
  if (has_weekpvptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->weekpvptimes(), output);
  }

  // optional uint32 weekKillNum = 8;
  if (has_weekkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->weekkillnum(), output);
  }

  // optional uint32 weekKilledNum = 9;
  if (has_weekkillednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->weekkillednum(), output);
  }

  // optional uint32 killNum = 10;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killnum(), output);
  }

  // optional uint32 killedNum = 11;
  if (has_killednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->killednum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 winTimes = 1;
  if (has_wintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wintimes(), target);
  }

  // optional uint32 loseTimes = 2;
  if (has_losetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->losetimes(), target);
  }

  // optional uint32 pvpTimes = 3;
  if (has_pvptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pvptimes(), target);
  }

  // optional uint32 saveTimeInSec = 4;
  if (has_savetimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->savetimeinsec(), target);
  }

  // optional uint32 weekWinTimes = 5;
  if (has_weekwintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->weekwintimes(), target);
  }

  // optional uint32 weekLoseTimes = 6;
  if (has_weeklosetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->weeklosetimes(), target);
  }

  // optional uint32 weekPvpTimes = 7;
  if (has_weekpvptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->weekpvptimes(), target);
  }

  // optional uint32 weekKillNum = 8;
  if (has_weekkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->weekkillnum(), target);
  }

  // optional uint32 weekKilledNum = 9;
  if (has_weekkillednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->weekkillednum(), target);
  }

  // optional uint32 killNum = 10;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killnum(), target);
  }

  // optional uint32 killedNum = 11;
  if (has_killednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->killednum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarDataBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 winTimes = 1;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wintimes());
    }

    // optional uint32 loseTimes = 2;
    if (has_losetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losetimes());
    }

    // optional uint32 pvpTimes = 3;
    if (has_pvptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvptimes());
    }

    // optional uint32 saveTimeInSec = 4;
    if (has_savetimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savetimeinsec());
    }

    // optional uint32 weekWinTimes = 5;
    if (has_weekwintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekwintimes());
    }

    // optional uint32 weekLoseTimes = 6;
    if (has_weeklosetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeklosetimes());
    }

    // optional uint32 weekPvpTimes = 7;
    if (has_weekpvptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekpvptimes());
    }

    // optional uint32 weekKillNum = 8;
    if (has_weekkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekkillnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 weekKilledNum = 9;
    if (has_weekkillednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekkillednum());
    }

    // optional uint32 killNum = 10;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 killedNum = 11;
    if (has_killednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killednum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarDataBinary::MergeFrom(const WarDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wintimes()) {
      set_wintimes(from.wintimes());
    }
    if (from.has_losetimes()) {
      set_losetimes(from.losetimes());
    }
    if (from.has_pvptimes()) {
      set_pvptimes(from.pvptimes());
    }
    if (from.has_savetimeinsec()) {
      set_savetimeinsec(from.savetimeinsec());
    }
    if (from.has_weekwintimes()) {
      set_weekwintimes(from.weekwintimes());
    }
    if (from.has_weeklosetimes()) {
      set_weeklosetimes(from.weeklosetimes());
    }
    if (from.has_weekpvptimes()) {
      set_weekpvptimes(from.weekpvptimes());
    }
    if (from.has_weekkillnum()) {
      set_weekkillnum(from.weekkillnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weekkillednum()) {
      set_weekkillednum(from.weekkillednum());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_killednum()) {
      set_killednum(from.killednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarDataBinary::CopyFrom(const WarDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarDataBinary::IsInitialized() const {

  return true;
}

void WarDataBinary::Swap(WarDataBinary* other) {
  if (other != this) {
    std::swap(wintimes_, other->wintimes_);
    std::swap(losetimes_, other->losetimes_);
    std::swap(pvptimes_, other->pvptimes_);
    std::swap(savetimeinsec_, other->savetimeinsec_);
    std::swap(weekwintimes_, other->weekwintimes_);
    std::swap(weeklosetimes_, other->weeklosetimes_);
    std::swap(weekpvptimes_, other->weekpvptimes_);
    std::swap(weekkillnum_, other->weekkillnum_);
    std::swap(weekkillednum_, other->weekkillednum_);
    std::swap(killnum_, other->killnum_);
    std::swap(killednum_, other->killednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarDataBinary_descriptor_;
  metadata.reflection = WarDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDataBinary::kAddMeUserIDListFieldNumber;
const int FriendDataBinary::kTodayGetVitalityTimesFieldNumber;
const int FriendDataBinary::kLastGetVitalityTimeInSecFieldNumber;
#endif  // !_MSC_VER

FriendDataBinary::FriendDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDataBinary::InitAsDefaultInstance() {
}

FriendDataBinary::FriendDataBinary(const FriendDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDataBinary::SharedCtor() {
  _cached_size_ = 0;
  todaygetvitalitytimes_ = 0u;
  lastgetvitalitytimeinsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDataBinary::~FriendDataBinary() {
  SharedDtor();
}

void FriendDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDataBinary_descriptor_;
}

const FriendDataBinary& FriendDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

FriendDataBinary* FriendDataBinary::default_instance_ = NULL;

FriendDataBinary* FriendDataBinary::New() const {
  return new FriendDataBinary;
}

void FriendDataBinary::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    todaygetvitalitytimes_ = 0u;
    lastgetvitalitytimeinsec_ = 0u;
  }
  addmeuseridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 addMeUserIDList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMeUserIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_addmeuseridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_addmeuseridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_addMeUserIDList;
        if (input->ExpectTag(16)) goto parse_todayGetVitalityTimes;
        break;
      }

      // required uint32 todayGetVitalityTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayGetVitalityTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaygetvitalitytimes_)));
          set_has_todaygetvitalitytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastGetVitalityTimeInSec;
        break;
      }

      // required uint32 lastGetVitalityTimeInSec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastGetVitalityTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastgetvitalitytimeinsec_)));
          set_has_lastgetvitalitytimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 addMeUserIDList = 1;
  for (int i = 0; i < this->addmeuseridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->addmeuseridlist(i), output);
  }

  // required uint32 todayGetVitalityTimes = 2;
  if (has_todaygetvitalitytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->todaygetvitalitytimes(), output);
  }

  // required uint32 lastGetVitalityTimeInSec = 3;
  if (has_lastgetvitalitytimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastgetvitalitytimeinsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 addMeUserIDList = 1;
  for (int i = 0; i < this->addmeuseridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->addmeuseridlist(i), target);
  }

  // required uint32 todayGetVitalityTimes = 2;
  if (has_todaygetvitalitytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->todaygetvitalitytimes(), target);
  }

  // required uint32 lastGetVitalityTimeInSec = 3;
  if (has_lastgetvitalitytimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lastgetvitalitytimeinsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDataBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 todayGetVitalityTimes = 2;
    if (has_todaygetvitalitytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaygetvitalitytimes());
    }

    // required uint32 lastGetVitalityTimeInSec = 3;
    if (has_lastgetvitalitytimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastgetvitalitytimeinsec());
    }

  }
  // repeated uint32 addMeUserIDList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->addmeuseridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->addmeuseridlist(i));
    }
    total_size += 1 * this->addmeuseridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDataBinary::MergeFrom(const FriendDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  addmeuseridlist_.MergeFrom(from.addmeuseridlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_todaygetvitalitytimes()) {
      set_todaygetvitalitytimes(from.todaygetvitalitytimes());
    }
    if (from.has_lastgetvitalitytimeinsec()) {
      set_lastgetvitalitytimeinsec(from.lastgetvitalitytimeinsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDataBinary::CopyFrom(const FriendDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDataBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void FriendDataBinary::Swap(FriendDataBinary* other) {
  if (other != this) {
    addmeuseridlist_.Swap(&other->addmeuseridlist_);
    std::swap(todaygetvitalitytimes_, other->todaygetvitalitytimes_);
    std::swap(lastgetvitalitytimeinsec_, other->lastgetvitalitytimeinsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDataBinary_descriptor_;
  metadata.reflection = FriendDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplDropBinary::kDuplIDFieldNumber;
const int DuplDropBinary::kDropExpFieldNumber;
const int DuplDropBinary::kDropMoneyFieldNumber;
const int DuplDropBinary::kItemDataFieldNumber;
const int DuplDropBinary::kEquipDataFieldNumber;
const int DuplDropBinary::kPetDataFieldNumber;
#endif  // !_MSC_VER

DuplDropBinary::DuplDropBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplDropBinary::InitAsDefaultInstance() {
}

DuplDropBinary::DuplDropBinary(const DuplDropBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplDropBinary::SharedCtor() {
  _cached_size_ = 0;
  duplid_ = 0u;
  dropexp_ = 0u;
  dropmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplDropBinary::~DuplDropBinary() {
  SharedDtor();
}

void DuplDropBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplDropBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplDropBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplDropBinary_descriptor_;
}

const DuplDropBinary& DuplDropBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DuplDropBinary* DuplDropBinary::default_instance_ = NULL;

DuplDropBinary* DuplDropBinary::New() const {
  return new DuplDropBinary;
}

void DuplDropBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplid_ = 0u;
    dropexp_ = 0u;
    dropmoney_ = 0u;
  }
  itemdata_.Clear();
  equipdata_.Clear();
  petdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplDropBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 duplID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplid_)));
          set_has_duplid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dropExp;
        break;
      }

      // required uint32 dropExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropexp_)));
          set_has_dropexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dropMoney;
        break;
      }

      // required uint32 dropMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropmoney_)));
          set_has_dropmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemData;
        break;
      }

      // repeated .protocol.user.DropItemData itemData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemData;
        if (input->ExpectTag(42)) goto parse_equipData;
        break;
      }

      // repeated .protocol.user.DropEquipData equipData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equipData;
        if (input->ExpectTag(50)) goto parse_petData;
        break;
      }

      // repeated .protocol.user.DropPetData petData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_petData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplDropBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 duplID = 1;
  if (has_duplid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duplid(), output);
  }

  // required uint32 dropExp = 2;
  if (has_dropexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dropexp(), output);
  }

  // required uint32 dropMoney = 3;
  if (has_dropmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dropmoney(), output);
  }

  // repeated .protocol.user.DropItemData itemData = 4;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemdata(i), output);
  }

  // repeated .protocol.user.DropEquipData equipData = 5;
  for (int i = 0; i < this->equipdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipdata(i), output);
  }

  // repeated .protocol.user.DropPetData petData = 6;
  for (int i = 0; i < this->petdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->petdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplDropBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 duplID = 1;
  if (has_duplid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duplid(), target);
  }

  // required uint32 dropExp = 2;
  if (has_dropexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dropexp(), target);
  }

  // required uint32 dropMoney = 3;
  if (has_dropmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dropmoney(), target);
  }

  // repeated .protocol.user.DropItemData itemData = 4;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemdata(i), target);
  }

  // repeated .protocol.user.DropEquipData equipData = 5;
  for (int i = 0; i < this->equipdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipdata(i), target);
  }

  // repeated .protocol.user.DropPetData petData = 6;
  for (int i = 0; i < this->petdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->petdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplDropBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 duplID = 1;
    if (has_duplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplid());
    }

    // required uint32 dropExp = 2;
    if (has_dropexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropexp());
    }

    // required uint32 dropMoney = 3;
    if (has_dropmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropmoney());
    }

  }
  // repeated .protocol.user.DropItemData itemData = 4;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  // repeated .protocol.user.DropEquipData equipData = 5;
  total_size += 1 * this->equipdata_size();
  for (int i = 0; i < this->equipdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipdata(i));
  }

  // repeated .protocol.user.DropPetData petData = 6;
  total_size += 1 * this->petdata_size();
  for (int i = 0; i < this->petdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplDropBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplDropBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplDropBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplDropBinary::MergeFrom(const DuplDropBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  equipdata_.MergeFrom(from.equipdata_);
  petdata_.MergeFrom(from.petdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplid()) {
      set_duplid(from.duplid());
    }
    if (from.has_dropexp()) {
      set_dropexp(from.dropexp());
    }
    if (from.has_dropmoney()) {
      set_dropmoney(from.dropmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplDropBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplDropBinary::CopyFrom(const DuplDropBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplDropBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < itemdata_size(); i++) {
    if (!this->itemdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equipdata_size(); i++) {
    if (!this->equipdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < petdata_size(); i++) {
    if (!this->petdata(i).IsInitialized()) return false;
  }
  return true;
}

void DuplDropBinary::Swap(DuplDropBinary* other) {
  if (other != this) {
    std::swap(duplid_, other->duplid_);
    std::swap(dropexp_, other->dropexp_);
    std::swap(dropmoney_, other->dropmoney_);
    itemdata_.Swap(&other->itemdata_);
    equipdata_.Swap(&other->equipdata_);
    petdata_.Swap(&other->petdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplDropBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplDropBinary_descriptor_;
  metadata.reflection = DuplDropBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropItemData::kItemBaseIDFieldNumber;
const int DropItemData::kBindTypeFieldNumber;
const int DropItemData::kNumFieldNumber;
#endif  // !_MSC_VER

DropItemData::DropItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropItemData::InitAsDefaultInstance() {
}

DropItemData::DropItemData(const DropItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropItemData::SharedCtor() {
  _cached_size_ = 0;
  itembaseid_ = 0u;
  bindtype_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropItemData::~DropItemData() {
  SharedDtor();
}

void DropItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropItemData_descriptor_;
}

const DropItemData& DropItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DropItemData* DropItemData::default_instance_ = NULL;

DropItemData* DropItemData::New() const {
  return new DropItemData;
}

void DropItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itembaseid_ = 0u;
    bindtype_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemBaseID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itembaseid_)));
          set_has_itembaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bindType;
        break;
      }

      // required uint32 bindType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itembaseid(), output);
  }

  // required uint32 bindType = 2;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bindtype(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itembaseid(), target);
  }

  // required uint32 bindType = 2;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bindtype(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemBaseID = 1;
    if (has_itembaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itembaseid());
    }

    // required uint32 bindType = 2;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindtype());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropItemData::MergeFrom(const DropItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itembaseid()) {
      set_itembaseid(from.itembaseid());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropItemData::CopyFrom(const DropItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DropItemData::Swap(DropItemData* other) {
  if (other != this) {
    std::swap(itembaseid_, other->itembaseid_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropItemData_descriptor_;
  metadata.reflection = DropItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropEquipData::kEquipBaseIDFieldNumber;
const int DropEquipData::kBindTypeFieldNumber;
const int DropEquipData::kNumFieldNumber;
const int DropEquipData::kQualityFieldNumber;
const int DropEquipData::kIdentifyFieldNumber;
#endif  // !_MSC_VER

DropEquipData::DropEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropEquipData::InitAsDefaultInstance() {
}

DropEquipData::DropEquipData(const DropEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropEquipData::SharedCtor() {
  _cached_size_ = 0;
  equipbaseid_ = 0u;
  bindtype_ = 0u;
  num_ = 0u;
  quality_ = 0u;
  identify_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropEquipData::~DropEquipData() {
  SharedDtor();
}

void DropEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropEquipData_descriptor_;
}

const DropEquipData& DropEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DropEquipData* DropEquipData::default_instance_ = NULL;

DropEquipData* DropEquipData::New() const {
  return new DropEquipData;
}

void DropEquipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipbaseid_ = 0u;
    bindtype_ = 0u;
    num_ = 0u;
    quality_ = 0u;
    identify_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equipBaseID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipbaseid_)));
          set_has_equipbaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bindType;
        break;
      }

      // required uint32 bindType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // required uint32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_identify;
        break;
      }

      // required uint32 identify = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identify_)));
          set_has_identify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equipBaseID = 1;
  if (has_equipbaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipbaseid(), output);
  }

  // required uint32 bindType = 2;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bindtype(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // required uint32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quality(), output);
  }

  // required uint32 identify = 5;
  if (has_identify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->identify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equipBaseID = 1;
  if (has_equipbaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equipbaseid(), target);
  }

  // required uint32 bindType = 2;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bindtype(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // required uint32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quality(), target);
  }

  // required uint32 identify = 5;
  if (has_identify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->identify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropEquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equipBaseID = 1;
    if (has_equipbaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipbaseid());
    }

    // required uint32 bindType = 2;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindtype());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 identify = 5;
    if (has_identify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropEquipData::MergeFrom(const DropEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipbaseid()) {
      set_equipbaseid(from.equipbaseid());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_identify()) {
      set_identify(from.identify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropEquipData::CopyFrom(const DropEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropEquipData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DropEquipData::Swap(DropEquipData* other) {
  if (other != this) {
    std::swap(equipbaseid_, other->equipbaseid_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(num_, other->num_);
    std::swap(quality_, other->quality_);
    std::swap(identify_, other->identify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropEquipData_descriptor_;
  metadata.reflection = DropEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropPetData::kPetIDFieldNumber;
const int DropPetData::kPetExpFieldNumber;
const int DropPetData::kPetUpLevelFieldNumber;
#endif  // !_MSC_VER

DropPetData::DropPetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropPetData::InitAsDefaultInstance() {
}

DropPetData::DropPetData(const DropPetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropPetData::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0u;
  petexp_ = 0u;
  petuplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropPetData::~DropPetData() {
  SharedDtor();
}

void DropPetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropPetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropPetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropPetData_descriptor_;
}

const DropPetData& DropPetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

DropPetData* DropPetData::default_instance_ = NULL;

DropPetData* DropPetData::New() const {
  return new DropPetData;
}

void DropPetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0u;
    petexp_ = 0u;
    petuplevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropPetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petExp;
        break;
      }

      // required uint32 petExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petexp_)));
          set_has_petexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_petUpLevel;
        break;
      }

      // required uint32 petUpLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petUpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petuplevel_)));
          set_has_petuplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropPetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 petID = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  // required uint32 petExp = 2;
  if (has_petexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petexp(), output);
  }

  // required uint32 petUpLevel = 3;
  if (has_petuplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petuplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropPetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 petID = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  // required uint32 petExp = 2;
  if (has_petexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petexp(), target);
  }

  // required uint32 petUpLevel = 3;
  if (has_petuplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petuplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropPetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petID = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // required uint32 petExp = 2;
    if (has_petexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petexp());
    }

    // required uint32 petUpLevel = 3;
    if (has_petuplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petuplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropPetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropPetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropPetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropPetData::MergeFrom(const DropPetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_petexp()) {
      set_petexp(from.petexp());
    }
    if (from.has_petuplevel()) {
      set_petuplevel(from.petuplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropPetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropPetData::CopyFrom(const DropPetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropPetData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DropPetData::Swap(DropPetData* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(petexp_, other->petexp_);
    std::swap(petuplevel_, other->petuplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropPetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropPetData_descriptor_;
  metadata.reflection = DropPetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskBinary::kMainTaskDataFieldNumber;
const int TaskBinary::kEquipTaskDataFieldNumber;
const int TaskBinary::kPetTaskDataFieldNumber;
const int TaskBinary::kTrumpTaskDataFieldNumber;
const int TaskBinary::kIntensifyTaskDataFieldNumber;
#endif  // !_MSC_VER

TaskBinary::TaskBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskBinary::InitAsDefaultInstance() {
}

TaskBinary::TaskBinary(const TaskBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskBinary::~TaskBinary() {
  SharedDtor();
}

void TaskBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskBinary_descriptor_;
}

const TaskBinary& TaskBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

TaskBinary* TaskBinary::default_instance_ = NULL;

TaskBinary* TaskBinary::New() const {
  return new TaskBinary;
}

void TaskBinary::Clear() {
  maintaskdata_.Clear();
  equiptaskdata_.Clear();
  pettaskdata_.Clear();
  trumptaskdata_.Clear();
  intensifytaskdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.user.MainTaskData mainTaskData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainTaskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maintaskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mainTaskData;
        if (input->ExpectTag(18)) goto parse_equipTaskData;
        break;
      }

      // repeated .protocol.user.EquipTaskData equipTaskData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipTaskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiptaskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipTaskData;
        if (input->ExpectTag(26)) goto parse_petTaskData;
        break;
      }

      // repeated .protocol.user.PetTaskData petTaskData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petTaskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pettaskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_petTaskData;
        if (input->ExpectTag(34)) goto parse_trumpTaskData;
        break;
      }

      // repeated .protocol.user.TrumpTaskData trumpTaskData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trumpTaskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trumptaskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trumpTaskData;
        if (input->ExpectTag(42)) goto parse_intensifyTaskData;
        break;
      }

      // repeated .protocol.user.IntensifyTaskData intensifyTaskData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intensifyTaskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intensifytaskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_intensifyTaskData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.user.MainTaskData mainTaskData = 1;
  for (int i = 0; i < this->maintaskdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maintaskdata(i), output);
  }

  // repeated .protocol.user.EquipTaskData equipTaskData = 2;
  for (int i = 0; i < this->equiptaskdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equiptaskdata(i), output);
  }

  // repeated .protocol.user.PetTaskData petTaskData = 3;
  for (int i = 0; i < this->pettaskdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pettaskdata(i), output);
  }

  // repeated .protocol.user.TrumpTaskData trumpTaskData = 4;
  for (int i = 0; i < this->trumptaskdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trumptaskdata(i), output);
  }

  // repeated .protocol.user.IntensifyTaskData intensifyTaskData = 5;
  for (int i = 0; i < this->intensifytaskdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->intensifytaskdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.user.MainTaskData mainTaskData = 1;
  for (int i = 0; i < this->maintaskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maintaskdata(i), target);
  }

  // repeated .protocol.user.EquipTaskData equipTaskData = 2;
  for (int i = 0; i < this->equiptaskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equiptaskdata(i), target);
  }

  // repeated .protocol.user.PetTaskData petTaskData = 3;
  for (int i = 0; i < this->pettaskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pettaskdata(i), target);
  }

  // repeated .protocol.user.TrumpTaskData trumpTaskData = 4;
  for (int i = 0; i < this->trumptaskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->trumptaskdata(i), target);
  }

  // repeated .protocol.user.IntensifyTaskData intensifyTaskData = 5;
  for (int i = 0; i < this->intensifytaskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->intensifytaskdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.user.MainTaskData mainTaskData = 1;
  total_size += 1 * this->maintaskdata_size();
  for (int i = 0; i < this->maintaskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maintaskdata(i));
  }

  // repeated .protocol.user.EquipTaskData equipTaskData = 2;
  total_size += 1 * this->equiptaskdata_size();
  for (int i = 0; i < this->equiptaskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiptaskdata(i));
  }

  // repeated .protocol.user.PetTaskData petTaskData = 3;
  total_size += 1 * this->pettaskdata_size();
  for (int i = 0; i < this->pettaskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pettaskdata(i));
  }

  // repeated .protocol.user.TrumpTaskData trumpTaskData = 4;
  total_size += 1 * this->trumptaskdata_size();
  for (int i = 0; i < this->trumptaskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trumptaskdata(i));
  }

  // repeated .protocol.user.IntensifyTaskData intensifyTaskData = 5;
  total_size += 1 * this->intensifytaskdata_size();
  for (int i = 0; i < this->intensifytaskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intensifytaskdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskBinary::MergeFrom(const TaskBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  maintaskdata_.MergeFrom(from.maintaskdata_);
  equiptaskdata_.MergeFrom(from.equiptaskdata_);
  pettaskdata_.MergeFrom(from.pettaskdata_);
  trumptaskdata_.MergeFrom(from.trumptaskdata_);
  intensifytaskdata_.MergeFrom(from.intensifytaskdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskBinary::CopyFrom(const TaskBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskBinary::IsInitialized() const {

  for (int i = 0; i < maintaskdata_size(); i++) {
    if (!this->maintaskdata(i).IsInitialized()) return false;
  }
  return true;
}

void TaskBinary::Swap(TaskBinary* other) {
  if (other != this) {
    maintaskdata_.Swap(&other->maintaskdata_);
    equiptaskdata_.Swap(&other->equiptaskdata_);
    pettaskdata_.Swap(&other->pettaskdata_);
    trumptaskdata_.Swap(&other->trumptaskdata_);
    intensifytaskdata_.Swap(&other->intensifytaskdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskBinary_descriptor_;
  metadata.reflection = TaskBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MainTaskData::kTaskIDFieldNumber;
const int MainTaskData::kTaskFinishNumFieldNumber;
const int MainTaskData::kIsFinishFieldNumber;
const int MainTaskData::kIsRewardFieldNumber;
#endif  // !_MSC_VER

MainTaskData::MainTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MainTaskData::InitAsDefaultInstance() {
}

MainTaskData::MainTaskData(const MainTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MainTaskData::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskfinishnum_ = 0u;
  isfinish_ = 0u;
  isreward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainTaskData::~MainTaskData() {
  SharedDtor();
}

void MainTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainTaskData_descriptor_;
}

const MainTaskData& MainTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

MainTaskData* MainTaskData::default_instance_ = NULL;

MainTaskData* MainTaskData::New() const {
  return new MainTaskData;
}

void MainTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskfinishnum_ = 0u;
    isfinish_ = 0u;
    isreward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskFinishNum;
        break;
      }

      // required uint32 taskFinishNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskFinishNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskfinishnum_)));
          set_has_taskfinishnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isFinish;
        break;
      }

      // required uint32 isFinish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinish_)));
          set_has_isfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isReward;
        break;
      }

      // required uint32 isReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreward_)));
          set_has_isreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MainTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required uint32 taskFinishNum = 2;
  if (has_taskfinishnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskfinishnum(), output);
  }

  // required uint32 isFinish = 3;
  if (has_isfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfinish(), output);
  }

  // required uint32 isReward = 4;
  if (has_isreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MainTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required uint32 taskFinishNum = 2;
  if (has_taskfinishnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskfinishnum(), target);
  }

  // required uint32 isFinish = 3;
  if (has_isfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isfinish(), target);
  }

  // required uint32 isReward = 4;
  if (has_isreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MainTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 taskFinishNum = 2;
    if (has_taskfinishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskfinishnum());
    }

    // required uint32 isFinish = 3;
    if (has_isfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinish());
    }

    // required uint32 isReward = 4;
    if (has_isreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainTaskData::MergeFrom(const MainTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_taskfinishnum()) {
      set_taskfinishnum(from.taskfinishnum());
    }
    if (from.has_isfinish()) {
      set_isfinish(from.isfinish());
    }
    if (from.has_isreward()) {
      set_isreward(from.isreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainTaskData::CopyFrom(const MainTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainTaskData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MainTaskData::Swap(MainTaskData* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskfinishnum_, other->taskfinishnum_);
    std::swap(isfinish_, other->isfinish_);
    std::swap(isreward_, other->isreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainTaskData_descriptor_;
  metadata.reflection = MainTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipTaskData::kEquipPosFieldNumber;
const int EquipTaskData::kEquipQualityFieldNumber;
#endif  // !_MSC_VER

EquipTaskData::EquipTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipTaskData::InitAsDefaultInstance() {
}

EquipTaskData::EquipTaskData(const EquipTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipTaskData::SharedCtor() {
  _cached_size_ = 0;
  equippos_ = 0u;
  equipquality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipTaskData::~EquipTaskData() {
  SharedDtor();
}

void EquipTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipTaskData_descriptor_;
}

const EquipTaskData& EquipTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

EquipTaskData* EquipTaskData::default_instance_ = NULL;

EquipTaskData* EquipTaskData::New() const {
  return new EquipTaskData;
}

void EquipTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equippos_ = 0u;
    equipquality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equipPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equippos_)));
          set_has_equippos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipQuality;
        break;
      }

      // optional uint32 equipQuality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipquality_)));
          set_has_equipquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equipPos = 1;
  if (has_equippos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equippos(), output);
  }

  // optional uint32 equipQuality = 2;
  if (has_equipquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipquality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equipPos = 1;
  if (has_equippos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equippos(), target);
  }

  // optional uint32 equipQuality = 2;
  if (has_equipquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equipquality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equipPos = 1;
    if (has_equippos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equippos());
    }

    // optional uint32 equipQuality = 2;
    if (has_equipquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipquality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipTaskData::MergeFrom(const EquipTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equippos()) {
      set_equippos(from.equippos());
    }
    if (from.has_equipquality()) {
      set_equipquality(from.equipquality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipTaskData::CopyFrom(const EquipTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipTaskData::IsInitialized() const {

  return true;
}

void EquipTaskData::Swap(EquipTaskData* other) {
  if (other != this) {
    std::swap(equippos_, other->equippos_);
    std::swap(equipquality_, other->equipquality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipTaskData_descriptor_;
  metadata.reflection = EquipTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetTaskData::kPetIDFieldNumber;
const int PetTaskData::kPetStarFieldNumber;
const int PetTaskData::kPetQualityFieldNumber;
#endif  // !_MSC_VER

PetTaskData::PetTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetTaskData::InitAsDefaultInstance() {
}

PetTaskData::PetTaskData(const PetTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetTaskData::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0u;
  petstar_ = 0u;
  petquality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetTaskData::~PetTaskData() {
  SharedDtor();
}

void PetTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetTaskData_descriptor_;
}

const PetTaskData& PetTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

PetTaskData* PetTaskData::default_instance_ = NULL;

PetTaskData* PetTaskData::New() const {
  return new PetTaskData;
}

void PetTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    petid_ = 0u;
    petstar_ = 0u;
    petquality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 petID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petStar;
        break;
      }

      // optional uint32 petStar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petstar_)));
          set_has_petstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_petQuality;
        break;
      }

      // optional uint32 petQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petquality_)));
          set_has_petquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 petID = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  // optional uint32 petStar = 2;
  if (has_petstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petstar(), output);
  }

  // optional uint32 petQuality = 3;
  if (has_petquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petquality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 petID = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  // optional uint32 petStar = 2;
  if (has_petstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petstar(), target);
  }

  // optional uint32 petQuality = 3;
  if (has_petquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petquality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 petID = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional uint32 petStar = 2;
    if (has_petstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petstar());
    }

    // optional uint32 petQuality = 3;
    if (has_petquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petquality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetTaskData::MergeFrom(const PetTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_petstar()) {
      set_petstar(from.petstar());
    }
    if (from.has_petquality()) {
      set_petquality(from.petquality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetTaskData::CopyFrom(const PetTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetTaskData::IsInitialized() const {

  return true;
}

void PetTaskData::Swap(PetTaskData* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(petstar_, other->petstar_);
    std::swap(petquality_, other->petquality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetTaskData_descriptor_;
  metadata.reflection = PetTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrumpTaskData::kTrumpIDFieldNumber;
const int TrumpTaskData::kTrumpLevelFieldNumber;
#endif  // !_MSC_VER

TrumpTaskData::TrumpTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrumpTaskData::InitAsDefaultInstance() {
}

TrumpTaskData::TrumpTaskData(const TrumpTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrumpTaskData::SharedCtor() {
  _cached_size_ = 0;
  trumpid_ = 0u;
  trumplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrumpTaskData::~TrumpTaskData() {
  SharedDtor();
}

void TrumpTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrumpTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrumpTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrumpTaskData_descriptor_;
}

const TrumpTaskData& TrumpTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

TrumpTaskData* TrumpTaskData::default_instance_ = NULL;

TrumpTaskData* TrumpTaskData::New() const {
  return new TrumpTaskData;
}

void TrumpTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trumpid_ = 0u;
    trumplevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrumpTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trumpID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trumpid_)));
          set_has_trumpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trumpLevel;
        break;
      }

      // optional uint32 trumpLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trumpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trumplevel_)));
          set_has_trumplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrumpTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trumpID = 1;
  if (has_trumpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trumpid(), output);
  }

  // optional uint32 trumpLevel = 2;
  if (has_trumplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trumplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrumpTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trumpID = 1;
  if (has_trumpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trumpid(), target);
  }

  // optional uint32 trumpLevel = 2;
  if (has_trumplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trumplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrumpTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trumpID = 1;
    if (has_trumpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trumpid());
    }

    // optional uint32 trumpLevel = 2;
    if (has_trumplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trumplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrumpTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrumpTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrumpTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrumpTaskData::MergeFrom(const TrumpTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trumpid()) {
      set_trumpid(from.trumpid());
    }
    if (from.has_trumplevel()) {
      set_trumplevel(from.trumplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrumpTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrumpTaskData::CopyFrom(const TrumpTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrumpTaskData::IsInitialized() const {

  return true;
}

void TrumpTaskData::Swap(TrumpTaskData* other) {
  if (other != this) {
    std::swap(trumpid_, other->trumpid_);
    std::swap(trumplevel_, other->trumplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrumpTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrumpTaskData_descriptor_;
  metadata.reflection = TrumpTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntensifyTaskData::kIntensifyPosFieldNumber;
const int IntensifyTaskData::kIntensifyLevelFieldNumber;
#endif  // !_MSC_VER

IntensifyTaskData::IntensifyTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntensifyTaskData::InitAsDefaultInstance() {
}

IntensifyTaskData::IntensifyTaskData(const IntensifyTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntensifyTaskData::SharedCtor() {
  _cached_size_ = 0;
  intensifypos_ = 0u;
  intensifylevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntensifyTaskData::~IntensifyTaskData() {
  SharedDtor();
}

void IntensifyTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntensifyTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntensifyTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntensifyTaskData_descriptor_;
}

const IntensifyTaskData& IntensifyTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

IntensifyTaskData* IntensifyTaskData::default_instance_ = NULL;

IntensifyTaskData* IntensifyTaskData::New() const {
  return new IntensifyTaskData;
}

void IntensifyTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    intensifypos_ = 0u;
    intensifylevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntensifyTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 intensifyPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensifypos_)));
          set_has_intensifypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intensifyLevel;
        break;
      }

      // optional uint32 intensifyLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensifyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensifylevel_)));
          set_has_intensifylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntensifyTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 intensifyPos = 1;
  if (has_intensifypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->intensifypos(), output);
  }

  // optional uint32 intensifyLevel = 2;
  if (has_intensifylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intensifylevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntensifyTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 intensifyPos = 1;
  if (has_intensifypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->intensifypos(), target);
  }

  // optional uint32 intensifyLevel = 2;
  if (has_intensifylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intensifylevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntensifyTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 intensifyPos = 1;
    if (has_intensifypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensifypos());
    }

    // optional uint32 intensifyLevel = 2;
    if (has_intensifylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intensifylevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntensifyTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntensifyTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntensifyTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntensifyTaskData::MergeFrom(const IntensifyTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intensifypos()) {
      set_intensifypos(from.intensifypos());
    }
    if (from.has_intensifylevel()) {
      set_intensifylevel(from.intensifylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntensifyTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntensifyTaskData::CopyFrom(const IntensifyTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntensifyTaskData::IsInitialized() const {

  return true;
}

void IntensifyTaskData::Swap(IntensifyTaskData* other) {
  if (other != this) {
    std::swap(intensifypos_, other->intensifypos_);
    std::swap(intensifylevel_, other->intensifylevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntensifyTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntensifyTaskData_descriptor_;
  metadata.reflection = IntensifyTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingBinary::kWingLevelFieldNumber;
const int WingBinary::kWingStateFieldNumber;
const int WingBinary::kUseWingIDFieldNumber;
const int WingBinary::kBlessingValueFieldNumber;
const int WingBinary::kUpStarItemIDFieldNumber;
const int WingBinary::kAttackFieldNumber;
const int WingBinary::kDefenceFieldNumber;
const int WingBinary::kMaxBloodFieldNumber;
const int WingBinary::kHitValueFieldNumber;
const int WingBinary::kAvoidValueFieldNumber;
const int WingBinary::kCritValueFieldNumber;
const int WingBinary::kCritDefenceValueFieldNumber;
#endif  // !_MSC_VER

WingBinary::WingBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingBinary::InitAsDefaultInstance() {
}

WingBinary::WingBinary(const WingBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingBinary::SharedCtor() {
  _cached_size_ = 0;
  winglevel_ = 0u;
  wingstate_ = 0u;
  usewingid_ = 0u;
  blessingvalue_ = 0u;
  upstaritemid_ = 0u;
  attack_ = 0u;
  defence_ = 0u;
  maxblood_ = 0u;
  hitvalue_ = 0u;
  avoidvalue_ = 0u;
  critvalue_ = 0u;
  critdefencevalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingBinary::~WingBinary() {
  SharedDtor();
}

void WingBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingBinary_descriptor_;
}

const WingBinary& WingBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

WingBinary* WingBinary::default_instance_ = NULL;

WingBinary* WingBinary::New() const {
  return new WingBinary;
}

void WingBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winglevel_ = 0u;
    wingstate_ = 0u;
    usewingid_ = 0u;
    blessingvalue_ = 0u;
    upstaritemid_ = 0u;
    attack_ = 0u;
    defence_ = 0u;
    maxblood_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hitvalue_ = 0u;
    avoidvalue_ = 0u;
    critvalue_ = 0u;
    critdefencevalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wingLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winglevel_)));
          set_has_winglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wingState;
        break;
      }

      // optional uint32 wingState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingstate_)));
          set_has_wingstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useWingID;
        break;
      }

      // optional uint32 useWingID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useWingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usewingid_)));
          set_has_usewingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blessingValue;
        break;
      }

      // optional uint32 blessingValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessingValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blessingvalue_)));
          set_has_blessingvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upStarItemID;
        break;
      }

      // optional uint32 upStarItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upStarItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upstaritemid_)));
          set_has_upstaritemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attack;
        break;
      }

      // optional uint32 attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defence;
        break;
      }

      // optional uint32 defence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxBlood;
        break;
      }

      // optional uint32 maxBlood = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxblood_)));
          set_has_maxblood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hitValue;
        break;
      }

      // optional uint32 hitValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitvalue_)));
          set_has_hitvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_avoidValue;
        break;
      }

      // optional uint32 avoidValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidvalue_)));
          set_has_avoidvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_critValue;
        break;
      }

      // optional uint32 critValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critvalue_)));
          set_has_critvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critDefenceValue;
        break;
      }

      // optional uint32 critDefenceValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critDefenceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critdefencevalue_)));
          set_has_critdefencevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wingLevel = 1;
  if (has_winglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winglevel(), output);
  }

  // optional uint32 wingState = 2;
  if (has_wingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wingstate(), output);
  }

  // optional uint32 useWingID = 3;
  if (has_usewingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usewingid(), output);
  }

  // optional uint32 blessingValue = 4;
  if (has_blessingvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blessingvalue(), output);
  }

  // optional uint32 upStarItemID = 5;
  if (has_upstaritemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->upstaritemid(), output);
  }

  // optional uint32 attack = 6;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attack(), output);
  }

  // optional uint32 defence = 7;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defence(), output);
  }

  // optional uint32 maxBlood = 8;
  if (has_maxblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxblood(), output);
  }

  // optional uint32 hitValue = 9;
  if (has_hitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hitvalue(), output);
  }

  // optional uint32 avoidValue = 10;
  if (has_avoidvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->avoidvalue(), output);
  }

  // optional uint32 critValue = 11;
  if (has_critvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->critvalue(), output);
  }

  // optional uint32 critDefenceValue = 12;
  if (has_critdefencevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->critdefencevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wingLevel = 1;
  if (has_winglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winglevel(), target);
  }

  // optional uint32 wingState = 2;
  if (has_wingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wingstate(), target);
  }

  // optional uint32 useWingID = 3;
  if (has_usewingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usewingid(), target);
  }

  // optional uint32 blessingValue = 4;
  if (has_blessingvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->blessingvalue(), target);
  }

  // optional uint32 upStarItemID = 5;
  if (has_upstaritemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->upstaritemid(), target);
  }

  // optional uint32 attack = 6;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attack(), target);
  }

  // optional uint32 defence = 7;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defence(), target);
  }

  // optional uint32 maxBlood = 8;
  if (has_maxblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxblood(), target);
  }

  // optional uint32 hitValue = 9;
  if (has_hitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hitvalue(), target);
  }

  // optional uint32 avoidValue = 10;
  if (has_avoidvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->avoidvalue(), target);
  }

  // optional uint32 critValue = 11;
  if (has_critvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->critvalue(), target);
  }

  // optional uint32 critDefenceValue = 12;
  if (has_critdefencevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->critdefencevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wingLevel = 1;
    if (has_winglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winglevel());
    }

    // optional uint32 wingState = 2;
    if (has_wingstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingstate());
    }

    // optional uint32 useWingID = 3;
    if (has_usewingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usewingid());
    }

    // optional uint32 blessingValue = 4;
    if (has_blessingvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blessingvalue());
    }

    // optional uint32 upStarItemID = 5;
    if (has_upstaritemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upstaritemid());
    }

    // optional uint32 attack = 6;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

    // optional uint32 defence = 7;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defence());
    }

    // optional uint32 maxBlood = 8;
    if (has_maxblood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxblood());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hitValue = 9;
    if (has_hitvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitvalue());
    }

    // optional uint32 avoidValue = 10;
    if (has_avoidvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avoidvalue());
    }

    // optional uint32 critValue = 11;
    if (has_critvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critvalue());
    }

    // optional uint32 critDefenceValue = 12;
    if (has_critdefencevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critdefencevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingBinary::MergeFrom(const WingBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winglevel()) {
      set_winglevel(from.winglevel());
    }
    if (from.has_wingstate()) {
      set_wingstate(from.wingstate());
    }
    if (from.has_usewingid()) {
      set_usewingid(from.usewingid());
    }
    if (from.has_blessingvalue()) {
      set_blessingvalue(from.blessingvalue());
    }
    if (from.has_upstaritemid()) {
      set_upstaritemid(from.upstaritemid());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_maxblood()) {
      set_maxblood(from.maxblood());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hitvalue()) {
      set_hitvalue(from.hitvalue());
    }
    if (from.has_avoidvalue()) {
      set_avoidvalue(from.avoidvalue());
    }
    if (from.has_critvalue()) {
      set_critvalue(from.critvalue());
    }
    if (from.has_critdefencevalue()) {
      set_critdefencevalue(from.critdefencevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingBinary::CopyFrom(const WingBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingBinary::IsInitialized() const {

  return true;
}

void WingBinary::Swap(WingBinary* other) {
  if (other != this) {
    std::swap(winglevel_, other->winglevel_);
    std::swap(wingstate_, other->wingstate_);
    std::swap(usewingid_, other->usewingid_);
    std::swap(blessingvalue_, other->blessingvalue_);
    std::swap(upstaritemid_, other->upstaritemid_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(maxblood_, other->maxblood_);
    std::swap(hitvalue_, other->hitvalue_);
    std::swap(avoidvalue_, other->avoidvalue_);
    std::swap(critvalue_, other->critvalue_);
    std::swap(critdefencevalue_, other->critdefencevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingBinary_descriptor_;
  metadata.reflection = WingBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VipDataBinary::VipDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipDataBinary::InitAsDefaultInstance() {
}

VipDataBinary::VipDataBinary(const VipDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipDataBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipDataBinary::~VipDataBinary() {
  SharedDtor();
}

void VipDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipDataBinary_descriptor_;
}

const VipDataBinary& VipDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

VipDataBinary* VipDataBinary::default_instance_ = NULL;

VipDataBinary* VipDataBinary::New() const {
  return new VipDataBinary;
}

void VipDataBinary::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VipDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipDataBinary::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipDataBinary::MergeFrom(const VipDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipDataBinary::CopyFrom(const VipDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipDataBinary::IsInitialized() const {

  return true;
}

void VipDataBinary::Swap(VipDataBinary* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipDataBinary_descriptor_;
  metadata.reflection = VipDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchDataBinary::kSaveTimeInSecFieldNumber;
const int MatchDataBinary::kCommonEloValueFieldNumber;
const int MatchDataBinary::kCommonEloGroupFieldNumber;
const int MatchDataBinary::kCommonMatchWinTimesFieldNumber;
const int MatchDataBinary::kCommonMatchLoseTimesFieldNumber;
const int MatchDataBinary::kCommonMatchRunOffTimesFieldNumber;
#endif  // !_MSC_VER

MatchDataBinary::MatchDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchDataBinary::InitAsDefaultInstance() {
}

MatchDataBinary::MatchDataBinary(const MatchDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchDataBinary::SharedCtor() {
  _cached_size_ = 0;
  savetimeinsec_ = 0u;
  commonelovalue_ = 0u;
  commonelogroup_ = 0u;
  commonmatchwintimes_ = 0u;
  commonmatchlosetimes_ = 0u;
  commonmatchrunofftimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchDataBinary::~MatchDataBinary() {
  SharedDtor();
}

void MatchDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchDataBinary_descriptor_;
}

const MatchDataBinary& MatchDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  return *default_instance_;
}

MatchDataBinary* MatchDataBinary::default_instance_ = NULL;

MatchDataBinary* MatchDataBinary::New() const {
  return new MatchDataBinary;
}

void MatchDataBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    savetimeinsec_ = 0u;
    commonelovalue_ = 0u;
    commonelogroup_ = 0u;
    commonmatchwintimes_ = 0u;
    commonmatchlosetimes_ = 0u;
    commonmatchrunofftimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveTimeInSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savetimeinsec_)));
          set_has_savetimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_commonEloValue;
        break;
      }

      // optional uint32 commonEloValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonEloValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commonelovalue_)));
          set_has_commonelovalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commonEloGroup;
        break;
      }

      // optional uint32 commonEloGroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonEloGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commonelogroup_)));
          set_has_commonelogroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_commonMatchWinTimes;
        break;
      }

      // optional uint32 commonMatchWinTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonMatchWinTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commonmatchwintimes_)));
          set_has_commonmatchwintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_commonMatchLoseTimes;
        break;
      }

      // optional uint32 commonMatchLoseTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonMatchLoseTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commonmatchlosetimes_)));
          set_has_commonmatchlosetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_commonMatchRunOffTimes;
        break;
      }

      // optional uint32 commonMatchRunOffTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonMatchRunOffTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commonmatchrunofftimes_)));
          set_has_commonmatchrunofftimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveTimeInSec = 1;
  if (has_savetimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->savetimeinsec(), output);
  }

  // optional uint32 commonEloValue = 2;
  if (has_commonelovalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->commonelovalue(), output);
  }

  // optional uint32 commonEloGroup = 3;
  if (has_commonelogroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->commonelogroup(), output);
  }

  // optional uint32 commonMatchWinTimes = 4;
  if (has_commonmatchwintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->commonmatchwintimes(), output);
  }

  // optional uint32 commonMatchLoseTimes = 5;
  if (has_commonmatchlosetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->commonmatchlosetimes(), output);
  }

  // optional uint32 commonMatchRunOffTimes = 6;
  if (has_commonmatchrunofftimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->commonmatchrunofftimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveTimeInSec = 1;
  if (has_savetimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->savetimeinsec(), target);
  }

  // optional uint32 commonEloValue = 2;
  if (has_commonelovalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->commonelovalue(), target);
  }

  // optional uint32 commonEloGroup = 3;
  if (has_commonelogroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->commonelogroup(), target);
  }

  // optional uint32 commonMatchWinTimes = 4;
  if (has_commonmatchwintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->commonmatchwintimes(), target);
  }

  // optional uint32 commonMatchLoseTimes = 5;
  if (has_commonmatchlosetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->commonmatchlosetimes(), target);
  }

  // optional uint32 commonMatchRunOffTimes = 6;
  if (has_commonmatchrunofftimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->commonmatchrunofftimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchDataBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveTimeInSec = 1;
    if (has_savetimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savetimeinsec());
    }

    // optional uint32 commonEloValue = 2;
    if (has_commonelovalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commonelovalue());
    }

    // optional uint32 commonEloGroup = 3;
    if (has_commonelogroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commonelogroup());
    }

    // optional uint32 commonMatchWinTimes = 4;
    if (has_commonmatchwintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commonmatchwintimes());
    }

    // optional uint32 commonMatchLoseTimes = 5;
    if (has_commonmatchlosetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commonmatchlosetimes());
    }

    // optional uint32 commonMatchRunOffTimes = 6;
    if (has_commonmatchrunofftimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commonmatchrunofftimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchDataBinary::MergeFrom(const MatchDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_savetimeinsec()) {
      set_savetimeinsec(from.savetimeinsec());
    }
    if (from.has_commonelovalue()) {
      set_commonelovalue(from.commonelovalue());
    }
    if (from.has_commonelogroup()) {
      set_commonelogroup(from.commonelogroup());
    }
    if (from.has_commonmatchwintimes()) {
      set_commonmatchwintimes(from.commonmatchwintimes());
    }
    if (from.has_commonmatchlosetimes()) {
      set_commonmatchlosetimes(from.commonmatchlosetimes());
    }
    if (from.has_commonmatchrunofftimes()) {
      set_commonmatchrunofftimes(from.commonmatchrunofftimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchDataBinary::CopyFrom(const MatchDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchDataBinary::IsInitialized() const {

  return true;
}

void MatchDataBinary::Swap(MatchDataBinary* other) {
  if (other != this) {
    std::swap(savetimeinsec_, other->savetimeinsec_);
    std::swap(commonelovalue_, other->commonelovalue_);
    std::swap(commonelogroup_, other->commonelogroup_);
    std::swap(commonmatchwintimes_, other->commonmatchwintimes_);
    std::swap(commonmatchlosetimes_, other->commonmatchlosetimes_);
    std::swap(commonmatchrunofftimes_, other->commonmatchrunofftimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchDataBinary_descriptor_;
  metadata.reflection = MatchDataBinary_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
