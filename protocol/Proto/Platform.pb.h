// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/Platform.proto

#ifndef PROTOBUF_protocol_2fProto_2fPlatform_2eproto__INCLUDED
#define PROTOBUF_protocol_2fProto_2fPlatform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace platform {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
void protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto();
void protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto();

class QQGameLoginData;
class LoginSessionData;
class LoginFailData;
class LoginSuccData;
class ZoneState;

// ===================================================================

class QQGameLoginData : public ::google::protobuf::Message {
 public:
  QQGameLoginData();
  virtual ~QQGameLoginData();

  QQGameLoginData(const QQGameLoginData& from);

  inline QQGameLoginData& operator=(const QQGameLoginData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QQGameLoginData& default_instance();

  void Swap(QQGameLoginData* other);

  // implements Message ----------------------------------------------

  QQGameLoginData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QQGameLoginData& from);
  void MergeFrom(const QQGameLoginData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string openID = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIDFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string openKey = 2;
  inline bool has_openkey() const;
  inline void clear_openkey();
  static const int kOpenKeyFieldNumber = 2;
  inline const ::std::string& openkey() const;
  inline void set_openkey(const ::std::string& value);
  inline void set_openkey(const char* value);
  inline void set_openkey(const char* value, size_t size);
  inline ::std::string* mutable_openkey();
  inline ::std::string* release_openkey();
  inline void set_allocated_openkey(::std::string* openkey);

  // optional string pfKey = 3;
  inline bool has_pfkey() const;
  inline void clear_pfkey();
  static const int kPfKeyFieldNumber = 3;
  inline const ::std::string& pfkey() const;
  inline void set_pfkey(const ::std::string& value);
  inline void set_pfkey(const char* value);
  inline void set_pfkey(const char* value, size_t size);
  inline ::std::string* mutable_pfkey();
  inline ::std::string* release_pfkey();
  inline void set_allocated_pfkey(::std::string* pfkey);

  // optional bool isBlueVip = 4;
  inline bool has_isbluevip() const;
  inline void clear_isbluevip();
  static const int kIsBlueVipFieldNumber = 4;
  inline bool isbluevip() const;
  inline void set_isbluevip(bool value);

  // optional bool isBlueYearVip = 5;
  inline bool has_isblueyearvip() const;
  inline void clear_isblueyearvip();
  static const int kIsBlueYearVipFieldNumber = 5;
  inline bool isblueyearvip() const;
  inline void set_isblueyearvip(bool value);

  // optional uint32 blueVipLevel = 6;
  inline bool has_blueviplevel() const;
  inline void clear_blueviplevel();
  static const int kBlueVipLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 blueviplevel() const;
  inline void set_blueviplevel(::google::protobuf::uint32 value);

  // optional string nickName = 7;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 7;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string gender = 8;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 8;
  inline const ::std::string& gender() const;
  inline void set_gender(const ::std::string& value);
  inline void set_gender(const char* value);
  inline void set_gender(const char* value, size_t size);
  inline ::std::string* mutable_gender();
  inline ::std::string* release_gender();
  inline void set_allocated_gender(::std::string* gender);

  // optional bool isHighBlueVip = 9;
  inline bool has_ishighbluevip() const;
  inline void clear_ishighbluevip();
  static const int kIsHighBlueVipFieldNumber = 9;
  inline bool ishighbluevip() const;
  inline void set_ishighbluevip(bool value);

  // @@protoc_insertion_point(class_scope:protocol.platform.QQGameLoginData)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_pfkey();
  inline void clear_has_pfkey();
  inline void set_has_isbluevip();
  inline void clear_has_isbluevip();
  inline void set_has_isblueyearvip();
  inline void clear_has_isblueyearvip();
  inline void set_has_blueviplevel();
  inline void clear_has_blueviplevel();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_ishighbluevip();
  inline void clear_has_ishighbluevip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* openkey_;
  ::std::string* pfkey_;
  ::google::protobuf::uint32 blueviplevel_;
  bool isbluevip_;
  bool isblueyearvip_;
  bool ishighbluevip_;
  ::std::string* nickname_;
  ::std::string* gender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto();

  void InitAsDefaultInstance();
  static QQGameLoginData* default_instance_;
};
// -------------------------------------------------------------------

class LoginSessionData : public ::google::protobuf::Message {
 public:
  LoginSessionData();
  virtual ~LoginSessionData();

  LoginSessionData(const LoginSessionData& from);

  inline LoginSessionData& operator=(const LoginSessionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSessionData& default_instance();

  void Swap(LoginSessionData* other);

  // implements Message ----------------------------------------------

  LoginSessionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginSessionData& from);
  void MergeFrom(const LoginSessionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clientID = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // required string accountName = 2;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 2;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // required bool isAdult = 3;
  inline bool has_isadult() const;
  inline void clear_isadult();
  static const int kIsAdultFieldNumber = 3;
  inline bool isadult() const;
  inline void set_isadult(bool value);

  // required uint32 channelID = 4;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIDFieldNumber = 4;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // required uint32 netType = 5;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNetTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // required uint32 platformType = 6;
  inline bool has_platformtype() const;
  inline void clear_platformtype();
  static const int kPlatformTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 platformtype() const;
  inline void set_platformtype(::google::protobuf::uint32 value);

  // optional .protocol.platform.QQGameLoginData qqGameLoginData = 7;
  inline bool has_qqgamelogindata() const;
  inline void clear_qqgamelogindata();
  static const int kQqGameLoginDataFieldNumber = 7;
  inline const ::protocol::platform::QQGameLoginData& qqgamelogindata() const;
  inline ::protocol::platform::QQGameLoginData* mutable_qqgamelogindata();
  inline ::protocol::platform::QQGameLoginData* release_qqgamelogindata();
  inline void set_allocated_qqgamelogindata(::protocol::platform::QQGameLoginData* qqgamelogindata);

  // @@protoc_insertion_point(class_scope:protocol.platform.LoginSessionData)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_isadult();
  inline void clear_has_isadult();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_nettype();
  inline void clear_has_nettype();
  inline void set_has_platformtype();
  inline void clear_has_platformtype();
  inline void set_has_qqgamelogindata();
  inline void clear_has_qqgamelogindata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::uint32 clientid_;
  bool isadult_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 nettype_;
  ::protocol::platform::QQGameLoginData* qqgamelogindata_;
  ::google::protobuf::uint32 platformtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto();

  void InitAsDefaultInstance();
  static LoginSessionData* default_instance_;
};
// -------------------------------------------------------------------

class LoginFailData : public ::google::protobuf::Message {
 public:
  LoginFailData();
  virtual ~LoginFailData();

  LoginFailData(const LoginFailData& from);

  inline LoginFailData& operator=(const LoginFailData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginFailData& default_instance();

  void Swap(LoginFailData* other);

  // implements Message ----------------------------------------------

  LoginFailData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginFailData& from);
  void MergeFrom(const LoginFailData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clientID = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // required uint32 errorCode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.platform.LoginFailData)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 clientid_;
  ::google::protobuf::uint32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto();

  void InitAsDefaultInstance();
  static LoginFailData* default_instance_;
};
// -------------------------------------------------------------------

class LoginSuccData : public ::google::protobuf::Message {
 public:
  LoginSuccData();
  virtual ~LoginSuccData();

  LoginSuccData(const LoginSuccData& from);

  inline LoginSuccData& operator=(const LoginSuccData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSuccData& default_instance();

  void Swap(LoginSuccData* other);

  // implements Message ----------------------------------------------

  LoginSuccData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginSuccData& from);
  void MergeFrom(const LoginSuccData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clientID = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // required string accountName = 2;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 2;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // required string gatewayIP = 3;
  inline bool has_gatewayip() const;
  inline void clear_gatewayip();
  static const int kGatewayIPFieldNumber = 3;
  inline const ::std::string& gatewayip() const;
  inline void set_gatewayip(const ::std::string& value);
  inline void set_gatewayip(const char* value);
  inline void set_gatewayip(const char* value, size_t size);
  inline ::std::string* mutable_gatewayip();
  inline ::std::string* release_gatewayip();
  inline void set_allocated_gatewayip(::std::string* gatewayip);

  // required uint32 gatewayPort = 4;
  inline bool has_gatewayport() const;
  inline void clear_gatewayport();
  static const int kGatewayPortFieldNumber = 4;
  inline ::google::protobuf::uint32 gatewayport() const;
  inline void set_gatewayport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.platform.LoginSuccData)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_gatewayip();
  inline void clear_has_gatewayip();
  inline void set_has_gatewayport();
  inline void clear_has_gatewayport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::uint32 clientid_;
  ::google::protobuf::uint32 gatewayport_;
  ::std::string* gatewayip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto();

  void InitAsDefaultInstance();
  static LoginSuccData* default_instance_;
};
// -------------------------------------------------------------------

class ZoneState : public ::google::protobuf::Message {
 public:
  ZoneState();
  virtual ~ZoneState();

  ZoneState(const ZoneState& from);

  inline ZoneState& operator=(const ZoneState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneState& default_instance();

  void Swap(ZoneState* other);

  // implements Message ----------------------------------------------

  ZoneState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneState& from);
  void MergeFrom(const ZoneState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 onlineNum = 1;
  inline bool has_onlinenum() const;
  inline void clear_onlinenum();
  static const int kOnlineNumFieldNumber = 1;
  inline ::google::protobuf::uint32 onlinenum() const;
  inline void set_onlinenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.platform.ZoneState)
 private:
  inline void set_has_onlinenum();
  inline void clear_has_onlinenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 onlinenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto();

  void InitAsDefaultInstance();
  static ZoneState* default_instance_;
};
// ===================================================================


// ===================================================================

// QQGameLoginData

// optional string openID = 1;
inline bool QQGameLoginData::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QQGameLoginData::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QQGameLoginData::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QQGameLoginData::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& QQGameLoginData::openid() const {
  return *openid_;
}
inline void QQGameLoginData::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void QQGameLoginData::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void QQGameLoginData::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQGameLoginData::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* QQGameLoginData::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QQGameLoginData::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string openKey = 2;
inline bool QQGameLoginData::has_openkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QQGameLoginData::set_has_openkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QQGameLoginData::clear_has_openkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QQGameLoginData::clear_openkey() {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    openkey_->clear();
  }
  clear_has_openkey();
}
inline const ::std::string& QQGameLoginData::openkey() const {
  return *openkey_;
}
inline void QQGameLoginData::set_openkey(const ::std::string& value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void QQGameLoginData::set_openkey(const char* value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void QQGameLoginData::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQGameLoginData::mutable_openkey() {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  return openkey_;
}
inline ::std::string* QQGameLoginData::release_openkey() {
  clear_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openkey_;
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QQGameLoginData::set_allocated_openkey(::std::string* openkey) {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (openkey) {
    set_has_openkey();
    openkey_ = openkey;
  } else {
    clear_has_openkey();
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pfKey = 3;
inline bool QQGameLoginData::has_pfkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QQGameLoginData::set_has_pfkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QQGameLoginData::clear_has_pfkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QQGameLoginData::clear_pfkey() {
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    pfkey_->clear();
  }
  clear_has_pfkey();
}
inline const ::std::string& QQGameLoginData::pfkey() const {
  return *pfkey_;
}
inline void QQGameLoginData::set_pfkey(const ::std::string& value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void QQGameLoginData::set_pfkey(const char* value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void QQGameLoginData::set_pfkey(const char* value, size_t size) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQGameLoginData::mutable_pfkey() {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  return pfkey_;
}
inline ::std::string* QQGameLoginData::release_pfkey() {
  clear_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pfkey_;
    pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QQGameLoginData::set_allocated_pfkey(::std::string* pfkey) {
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pfkey_;
  }
  if (pfkey) {
    set_has_pfkey();
    pfkey_ = pfkey;
  } else {
    clear_has_pfkey();
    pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isBlueVip = 4;
inline bool QQGameLoginData::has_isbluevip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QQGameLoginData::set_has_isbluevip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QQGameLoginData::clear_has_isbluevip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QQGameLoginData::clear_isbluevip() {
  isbluevip_ = false;
  clear_has_isbluevip();
}
inline bool QQGameLoginData::isbluevip() const {
  return isbluevip_;
}
inline void QQGameLoginData::set_isbluevip(bool value) {
  set_has_isbluevip();
  isbluevip_ = value;
}

// optional bool isBlueYearVip = 5;
inline bool QQGameLoginData::has_isblueyearvip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QQGameLoginData::set_has_isblueyearvip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QQGameLoginData::clear_has_isblueyearvip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QQGameLoginData::clear_isblueyearvip() {
  isblueyearvip_ = false;
  clear_has_isblueyearvip();
}
inline bool QQGameLoginData::isblueyearvip() const {
  return isblueyearvip_;
}
inline void QQGameLoginData::set_isblueyearvip(bool value) {
  set_has_isblueyearvip();
  isblueyearvip_ = value;
}

// optional uint32 blueVipLevel = 6;
inline bool QQGameLoginData::has_blueviplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QQGameLoginData::set_has_blueviplevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QQGameLoginData::clear_has_blueviplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QQGameLoginData::clear_blueviplevel() {
  blueviplevel_ = 0u;
  clear_has_blueviplevel();
}
inline ::google::protobuf::uint32 QQGameLoginData::blueviplevel() const {
  return blueviplevel_;
}
inline void QQGameLoginData::set_blueviplevel(::google::protobuf::uint32 value) {
  set_has_blueviplevel();
  blueviplevel_ = value;
}

// optional string nickName = 7;
inline bool QQGameLoginData::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QQGameLoginData::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QQGameLoginData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QQGameLoginData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& QQGameLoginData::nickname() const {
  return *nickname_;
}
inline void QQGameLoginData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void QQGameLoginData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void QQGameLoginData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQGameLoginData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* QQGameLoginData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QQGameLoginData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gender = 8;
inline bool QQGameLoginData::has_gender() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QQGameLoginData::set_has_gender() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QQGameLoginData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QQGameLoginData::clear_gender() {
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    gender_->clear();
  }
  clear_has_gender();
}
inline const ::std::string& QQGameLoginData::gender() const {
  return *gender_;
}
inline void QQGameLoginData::set_gender(const ::std::string& value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
}
inline void QQGameLoginData::set_gender(const char* value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
}
inline void QQGameLoginData::set_gender(const char* value, size_t size) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQGameLoginData::mutable_gender() {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  return gender_;
}
inline ::std::string* QQGameLoginData::release_gender() {
  clear_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gender_;
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QQGameLoginData::set_allocated_gender(::std::string* gender) {
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    delete gender_;
  }
  if (gender) {
    set_has_gender();
    gender_ = gender;
  } else {
    clear_has_gender();
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isHighBlueVip = 9;
inline bool QQGameLoginData::has_ishighbluevip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QQGameLoginData::set_has_ishighbluevip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QQGameLoginData::clear_has_ishighbluevip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QQGameLoginData::clear_ishighbluevip() {
  ishighbluevip_ = false;
  clear_has_ishighbluevip();
}
inline bool QQGameLoginData::ishighbluevip() const {
  return ishighbluevip_;
}
inline void QQGameLoginData::set_ishighbluevip(bool value) {
  set_has_ishighbluevip();
  ishighbluevip_ = value;
}

// -------------------------------------------------------------------

// LoginSessionData

// required uint32 clientID = 1;
inline bool LoginSessionData::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSessionData::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSessionData::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSessionData::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 LoginSessionData::clientid() const {
  return clientid_;
}
inline void LoginSessionData::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string accountName = 2;
inline bool LoginSessionData::has_accountname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSessionData::set_has_accountname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSessionData::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSessionData::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& LoginSessionData::accountname() const {
  return *accountname_;
}
inline void LoginSessionData::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void LoginSessionData::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void LoginSessionData::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSessionData::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* LoginSessionData::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSessionData::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool isAdult = 3;
inline bool LoginSessionData::has_isadult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginSessionData::set_has_isadult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginSessionData::clear_has_isadult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginSessionData::clear_isadult() {
  isadult_ = false;
  clear_has_isadult();
}
inline bool LoginSessionData::isadult() const {
  return isadult_;
}
inline void LoginSessionData::set_isadult(bool value) {
  set_has_isadult();
  isadult_ = value;
}

// required uint32 channelID = 4;
inline bool LoginSessionData::has_channelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginSessionData::set_has_channelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginSessionData::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginSessionData::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 LoginSessionData::channelid() const {
  return channelid_;
}
inline void LoginSessionData::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
}

// required uint32 netType = 5;
inline bool LoginSessionData::has_nettype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginSessionData::set_has_nettype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginSessionData::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginSessionData::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 LoginSessionData::nettype() const {
  return nettype_;
}
inline void LoginSessionData::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
}

// required uint32 platformType = 6;
inline bool LoginSessionData::has_platformtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginSessionData::set_has_platformtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginSessionData::clear_has_platformtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginSessionData::clear_platformtype() {
  platformtype_ = 0u;
  clear_has_platformtype();
}
inline ::google::protobuf::uint32 LoginSessionData::platformtype() const {
  return platformtype_;
}
inline void LoginSessionData::set_platformtype(::google::protobuf::uint32 value) {
  set_has_platformtype();
  platformtype_ = value;
}

// optional .protocol.platform.QQGameLoginData qqGameLoginData = 7;
inline bool LoginSessionData::has_qqgamelogindata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginSessionData::set_has_qqgamelogindata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginSessionData::clear_has_qqgamelogindata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginSessionData::clear_qqgamelogindata() {
  if (qqgamelogindata_ != NULL) qqgamelogindata_->::protocol::platform::QQGameLoginData::Clear();
  clear_has_qqgamelogindata();
}
inline const ::protocol::platform::QQGameLoginData& LoginSessionData::qqgamelogindata() const {
  return qqgamelogindata_ != NULL ? *qqgamelogindata_ : *default_instance_->qqgamelogindata_;
}
inline ::protocol::platform::QQGameLoginData* LoginSessionData::mutable_qqgamelogindata() {
  set_has_qqgamelogindata();
  if (qqgamelogindata_ == NULL) qqgamelogindata_ = new ::protocol::platform::QQGameLoginData;
  return qqgamelogindata_;
}
inline ::protocol::platform::QQGameLoginData* LoginSessionData::release_qqgamelogindata() {
  clear_has_qqgamelogindata();
  ::protocol::platform::QQGameLoginData* temp = qqgamelogindata_;
  qqgamelogindata_ = NULL;
  return temp;
}
inline void LoginSessionData::set_allocated_qqgamelogindata(::protocol::platform::QQGameLoginData* qqgamelogindata) {
  delete qqgamelogindata_;
  qqgamelogindata_ = qqgamelogindata;
  if (qqgamelogindata) {
    set_has_qqgamelogindata();
  } else {
    clear_has_qqgamelogindata();
  }
}

// -------------------------------------------------------------------

// LoginFailData

// required uint32 clientID = 1;
inline bool LoginFailData::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginFailData::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginFailData::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginFailData::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 LoginFailData::clientid() const {
  return clientid_;
}
inline void LoginFailData::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
}

// required uint32 errorCode = 2;
inline bool LoginFailData::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginFailData::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginFailData::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginFailData::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 LoginFailData::errorcode() const {
  return errorcode_;
}
inline void LoginFailData::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// LoginSuccData

// required uint32 clientID = 1;
inline bool LoginSuccData::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSuccData::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSuccData::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSuccData::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 LoginSuccData::clientid() const {
  return clientid_;
}
inline void LoginSuccData::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string accountName = 2;
inline bool LoginSuccData::has_accountname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSuccData::set_has_accountname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSuccData::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSuccData::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& LoginSuccData::accountname() const {
  return *accountname_;
}
inline void LoginSuccData::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void LoginSuccData::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void LoginSuccData::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSuccData::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* LoginSuccData::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSuccData::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string gatewayIP = 3;
inline bool LoginSuccData::has_gatewayip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginSuccData::set_has_gatewayip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginSuccData::clear_has_gatewayip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginSuccData::clear_gatewayip() {
  if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
    gatewayip_->clear();
  }
  clear_has_gatewayip();
}
inline const ::std::string& LoginSuccData::gatewayip() const {
  return *gatewayip_;
}
inline void LoginSuccData::set_gatewayip(const ::std::string& value) {
  set_has_gatewayip();
  if (gatewayip_ == &::google::protobuf::internal::kEmptyString) {
    gatewayip_ = new ::std::string;
  }
  gatewayip_->assign(value);
}
inline void LoginSuccData::set_gatewayip(const char* value) {
  set_has_gatewayip();
  if (gatewayip_ == &::google::protobuf::internal::kEmptyString) {
    gatewayip_ = new ::std::string;
  }
  gatewayip_->assign(value);
}
inline void LoginSuccData::set_gatewayip(const char* value, size_t size) {
  set_has_gatewayip();
  if (gatewayip_ == &::google::protobuf::internal::kEmptyString) {
    gatewayip_ = new ::std::string;
  }
  gatewayip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginSuccData::mutable_gatewayip() {
  set_has_gatewayip();
  if (gatewayip_ == &::google::protobuf::internal::kEmptyString) {
    gatewayip_ = new ::std::string;
  }
  return gatewayip_;
}
inline ::std::string* LoginSuccData::release_gatewayip() {
  clear_has_gatewayip();
  if (gatewayip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gatewayip_;
    gatewayip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginSuccData::set_allocated_gatewayip(::std::string* gatewayip) {
  if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
    delete gatewayip_;
  }
  if (gatewayip) {
    set_has_gatewayip();
    gatewayip_ = gatewayip;
  } else {
    clear_has_gatewayip();
    gatewayip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 gatewayPort = 4;
inline bool LoginSuccData::has_gatewayport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginSuccData::set_has_gatewayport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginSuccData::clear_has_gatewayport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginSuccData::clear_gatewayport() {
  gatewayport_ = 0u;
  clear_has_gatewayport();
}
inline ::google::protobuf::uint32 LoginSuccData::gatewayport() const {
  return gatewayport_;
}
inline void LoginSuccData::set_gatewayport(::google::protobuf::uint32 value) {
  set_has_gatewayport();
  gatewayport_ = value;
}

// -------------------------------------------------------------------

// ZoneState

// required uint32 onlineNum = 1;
inline bool ZoneState::has_onlinenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneState::set_has_onlinenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneState::clear_has_onlinenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneState::clear_onlinenum() {
  onlinenum_ = 0u;
  clear_has_onlinenum();
}
inline ::google::protobuf::uint32 ZoneState::onlinenum() const {
  return onlinenum_;
}
inline void ZoneState::set_onlinenum(::google::protobuf::uint32 value) {
  set_has_onlinenum();
  onlinenum_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace platform
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fProto_2fPlatform_2eproto__INCLUDED
