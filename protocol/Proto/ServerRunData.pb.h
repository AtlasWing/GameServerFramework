// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/ServerRunData.proto

#ifndef PROTOBUF_protocol_2fProto_2fServerRunData_2eproto__INCLUDED
#define PROTOBUF_protocol_2fProto_2fServerRunData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace ServerRun {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fProto_2fServerRunData_2eproto();
void protobuf_AssignDesc_protocol_2fProto_2fServerRunData_2eproto();
void protobuf_ShutdownFile_protocol_2fProto_2fServerRunData_2eproto();

class ParamData;
class ScheduleParamData;

// ===================================================================

class ParamData : public ::google::protobuf::Message {
 public:
  ParamData();
  virtual ~ParamData();

  ParamData(const ParamData& from);

  inline ParamData& operator=(const ParamData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamData& default_instance();

  void Swap(ParamData* other);

  // implements Message ----------------------------------------------

  ParamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamData& from);
  void MergeFrom(const ParamData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string paramName = 1;
  inline bool has_paramname() const;
  inline void clear_paramname();
  static const int kParamNameFieldNumber = 1;
  inline const ::std::string& paramname() const;
  inline void set_paramname(const ::std::string& value);
  inline void set_paramname(const char* value);
  inline void set_paramname(const char* value, size_t size);
  inline ::std::string* mutable_paramname();
  inline ::std::string* release_paramname();
  inline void set_allocated_paramname(::std::string* paramname);

  // required string paramValue = 2;
  inline bool has_paramvalue() const;
  inline void clear_paramvalue();
  static const int kParamValueFieldNumber = 2;
  inline const ::std::string& paramvalue() const;
  inline void set_paramvalue(const ::std::string& value);
  inline void set_paramvalue(const char* value);
  inline void set_paramvalue(const char* value, size_t size);
  inline ::std::string* mutable_paramvalue();
  inline ::std::string* release_paramvalue();
  inline void set_allocated_paramvalue(::std::string* paramvalue);

  // @@protoc_insertion_point(class_scope:protocol.ServerRun.ParamData)
 private:
  inline void set_has_paramname();
  inline void clear_has_paramname();
  inline void set_has_paramvalue();
  inline void clear_has_paramvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* paramname_;
  ::std::string* paramvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fServerRunData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fServerRunData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fServerRunData_2eproto();

  void InitAsDefaultInstance();
  static ParamData* default_instance_;
};
// -------------------------------------------------------------------

class ScheduleParamData : public ::google::protobuf::Message {
 public:
  ScheduleParamData();
  virtual ~ScheduleParamData();

  ScheduleParamData(const ScheduleParamData& from);

  inline ScheduleParamData& operator=(const ScheduleParamData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleParamData& default_instance();

  void Swap(ScheduleParamData* other);

  // implements Message ----------------------------------------------

  ScheduleParamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScheduleParamData& from);
  void MergeFrom(const ScheduleParamData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.ServerRun.ParamData paramList = 1;
  inline int paramlist_size() const;
  inline void clear_paramlist();
  static const int kParamListFieldNumber = 1;
  inline const ::protocol::ServerRun::ParamData& paramlist(int index) const;
  inline ::protocol::ServerRun::ParamData* mutable_paramlist(int index);
  inline ::protocol::ServerRun::ParamData* add_paramlist();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::ServerRun::ParamData >&
      paramlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::ServerRun::ParamData >*
      mutable_paramlist();

  // optional uint64 configID = 2;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 2;
  inline ::google::protobuf::uint64 configid() const;
  inline void set_configid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.ServerRun.ScheduleParamData)
 private:
  inline void set_has_configid();
  inline void clear_has_configid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::ServerRun::ParamData > paramlist_;
  ::google::protobuf::uint64 configid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fServerRunData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fServerRunData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fServerRunData_2eproto();

  void InitAsDefaultInstance();
  static ScheduleParamData* default_instance_;
};
// ===================================================================


// ===================================================================

// ParamData

// required string paramName = 1;
inline bool ParamData::has_paramname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamData::set_has_paramname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamData::clear_has_paramname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamData::clear_paramname() {
  if (paramname_ != &::google::protobuf::internal::kEmptyString) {
    paramname_->clear();
  }
  clear_has_paramname();
}
inline const ::std::string& ParamData::paramname() const {
  return *paramname_;
}
inline void ParamData::set_paramname(const ::std::string& value) {
  set_has_paramname();
  if (paramname_ == &::google::protobuf::internal::kEmptyString) {
    paramname_ = new ::std::string;
  }
  paramname_->assign(value);
}
inline void ParamData::set_paramname(const char* value) {
  set_has_paramname();
  if (paramname_ == &::google::protobuf::internal::kEmptyString) {
    paramname_ = new ::std::string;
  }
  paramname_->assign(value);
}
inline void ParamData::set_paramname(const char* value, size_t size) {
  set_has_paramname();
  if (paramname_ == &::google::protobuf::internal::kEmptyString) {
    paramname_ = new ::std::string;
  }
  paramname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParamData::mutable_paramname() {
  set_has_paramname();
  if (paramname_ == &::google::protobuf::internal::kEmptyString) {
    paramname_ = new ::std::string;
  }
  return paramname_;
}
inline ::std::string* ParamData::release_paramname() {
  clear_has_paramname();
  if (paramname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paramname_;
    paramname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParamData::set_allocated_paramname(::std::string* paramname) {
  if (paramname_ != &::google::protobuf::internal::kEmptyString) {
    delete paramname_;
  }
  if (paramname) {
    set_has_paramname();
    paramname_ = paramname;
  } else {
    clear_has_paramname();
    paramname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string paramValue = 2;
inline bool ParamData::has_paramvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamData::set_has_paramvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamData::clear_has_paramvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamData::clear_paramvalue() {
  if (paramvalue_ != &::google::protobuf::internal::kEmptyString) {
    paramvalue_->clear();
  }
  clear_has_paramvalue();
}
inline const ::std::string& ParamData::paramvalue() const {
  return *paramvalue_;
}
inline void ParamData::set_paramvalue(const ::std::string& value) {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  paramvalue_->assign(value);
}
inline void ParamData::set_paramvalue(const char* value) {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  paramvalue_->assign(value);
}
inline void ParamData::set_paramvalue(const char* value, size_t size) {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  paramvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParamData::mutable_paramvalue() {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  return paramvalue_;
}
inline ::std::string* ParamData::release_paramvalue() {
  clear_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paramvalue_;
    paramvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParamData::set_allocated_paramvalue(::std::string* paramvalue) {
  if (paramvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete paramvalue_;
  }
  if (paramvalue) {
    set_has_paramvalue();
    paramvalue_ = paramvalue;
  } else {
    clear_has_paramvalue();
    paramvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ScheduleParamData

// repeated .protocol.ServerRun.ParamData paramList = 1;
inline int ScheduleParamData::paramlist_size() const {
  return paramlist_.size();
}
inline void ScheduleParamData::clear_paramlist() {
  paramlist_.Clear();
}
inline const ::protocol::ServerRun::ParamData& ScheduleParamData::paramlist(int index) const {
  return paramlist_.Get(index);
}
inline ::protocol::ServerRun::ParamData* ScheduleParamData::mutable_paramlist(int index) {
  return paramlist_.Mutable(index);
}
inline ::protocol::ServerRun::ParamData* ScheduleParamData::add_paramlist() {
  return paramlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::ServerRun::ParamData >&
ScheduleParamData::paramlist() const {
  return paramlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::ServerRun::ParamData >*
ScheduleParamData::mutable_paramlist() {
  return &paramlist_;
}

// optional uint64 configID = 2;
inline bool ScheduleParamData::has_configid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScheduleParamData::set_has_configid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScheduleParamData::clear_has_configid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScheduleParamData::clear_configid() {
  configid_ = GOOGLE_ULONGLONG(0);
  clear_has_configid();
}
inline ::google::protobuf::uint64 ScheduleParamData::configid() const {
  return configid_;
}
inline void ScheduleParamData::set_configid(::google::protobuf::uint64 value) {
  set_has_configid();
  configid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerRun
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fProto_2fServerRunData_2eproto__INCLUDED
