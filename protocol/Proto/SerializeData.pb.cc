// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/SerializeData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/Proto/SerializeData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace serialize {

namespace {

const ::google::protobuf::Descriptor* MonsterChallengeSequenceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterChallengeSequenceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterChallengeSequenceAllBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterChallengeSequenceAllBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankMatchBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankMatchBinary_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fProto_2fSerializeData_2eproto() {
  protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/Proto/SerializeData.proto");
  GOOGLE_CHECK(file != NULL);
  MonsterChallengeSequenceData_descriptor_ = file->message_type(0);
  static const int MonsterChallengeSequenceData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceData, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceData, scoresum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceData, userlist_),
  };
  MonsterChallengeSequenceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterChallengeSequenceData_descriptor_,
      MonsterChallengeSequenceData::default_instance_,
      MonsterChallengeSequenceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterChallengeSequenceData));
  MonsterChallengeSequenceAllBinary_descriptor_ = file->message_type(1);
  static const int MonsterChallengeSequenceAllBinary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceAllBinary, sequencedatalist_),
  };
  MonsterChallengeSequenceAllBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterChallengeSequenceAllBinary_descriptor_,
      MonsterChallengeSequenceAllBinary::default_instance_,
      MonsterChallengeSequenceAllBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceAllBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterChallengeSequenceAllBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterChallengeSequenceAllBinary));
  RankMatchBinary_descriptor_ = file->message_type(2);
  static const int RankMatchBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankMatchBinary, seasonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankMatchBinary, starttimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankMatchBinary, endtimeinsec_),
  };
  RankMatchBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankMatchBinary_descriptor_,
      RankMatchBinary::default_instance_,
      RankMatchBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankMatchBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankMatchBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankMatchBinary));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fProto_2fSerializeData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterChallengeSequenceData_descriptor_, &MonsterChallengeSequenceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterChallengeSequenceAllBinary_descriptor_, &MonsterChallengeSequenceAllBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankMatchBinary_descriptor_, &RankMatchBinary::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fProto_2fSerializeData_2eproto() {
  delete MonsterChallengeSequenceData::default_instance_;
  delete MonsterChallengeSequenceData_reflection_;
  delete MonsterChallengeSequenceAllBinary::default_instance_;
  delete MonsterChallengeSequenceAllBinary_reflection_;
  delete RankMatchBinary::default_instance_;
  delete RankMatchBinary_reflection_;
}

void protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"protocol/Proto/SerializeData.proto\022\022pr"
    "otocol.serialize\"P\n\034MonsterChallengeSequ"
    "enceData\022\014\n\004mode\030\001 \002(\r\022\020\n\010scoreSum\030\002 \002(\r"
    "\022\020\n\010userList\030\003 \003(\r\"o\n!MonsterChallengeSe"
    "quenceAllBinary\022J\n\020sequenceDataList\030\001 \003("
    "\01320.protocol.serialize.MonsterChallengeS"
    "equenceData\"Q\n\017RankMatchBinary\022\020\n\010season"
    "ID\030\001 \001(\r\022\026\n\016startTimeInSec\030\002 \001(\r\022\024\n\014endT"
    "imeInSec\030\003 \001(\r", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/Proto/SerializeData.proto", &protobuf_RegisterTypes);
  MonsterChallengeSequenceData::default_instance_ = new MonsterChallengeSequenceData();
  MonsterChallengeSequenceAllBinary::default_instance_ = new MonsterChallengeSequenceAllBinary();
  RankMatchBinary::default_instance_ = new RankMatchBinary();
  MonsterChallengeSequenceData::default_instance_->InitAsDefaultInstance();
  MonsterChallengeSequenceAllBinary::default_instance_->InitAsDefaultInstance();
  RankMatchBinary::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fProto_2fSerializeData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fProto_2fSerializeData_2eproto {
  StaticDescriptorInitializer_protocol_2fProto_2fSerializeData_2eproto() {
    protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  }
} static_descriptor_initializer_protocol_2fProto_2fSerializeData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MonsterChallengeSequenceData::kModeFieldNumber;
const int MonsterChallengeSequenceData::kScoreSumFieldNumber;
const int MonsterChallengeSequenceData::kUserListFieldNumber;
#endif  // !_MSC_VER

MonsterChallengeSequenceData::MonsterChallengeSequenceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterChallengeSequenceData::InitAsDefaultInstance() {
}

MonsterChallengeSequenceData::MonsterChallengeSequenceData(const MonsterChallengeSequenceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterChallengeSequenceData::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0u;
  scoresum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterChallengeSequenceData::~MonsterChallengeSequenceData() {
  SharedDtor();
}

void MonsterChallengeSequenceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterChallengeSequenceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterChallengeSequenceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterChallengeSequenceData_descriptor_;
}

const MonsterChallengeSequenceData& MonsterChallengeSequenceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  return *default_instance_;
}

MonsterChallengeSequenceData* MonsterChallengeSequenceData::default_instance_ = NULL;

MonsterChallengeSequenceData* MonsterChallengeSequenceData::New() const {
  return new MonsterChallengeSequenceData;
}

void MonsterChallengeSequenceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0u;
    scoresum_ = 0u;
  }
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterChallengeSequenceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scoreSum;
        break;
      }

      // required uint32 scoreSum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoreSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoresum_)));
          set_has_scoresum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userList;
        break;
      }

      // repeated uint32 userList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_userlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_userlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterChallengeSequenceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  // required uint32 scoreSum = 2;
  if (has_scoresum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scoresum(), output);
  }

  // repeated uint32 userList = 3;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterChallengeSequenceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  // required uint32 scoreSum = 2;
  if (has_scoresum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scoresum(), target);
  }

  // repeated uint32 userList = 3;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterChallengeSequenceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // required uint32 scoreSum = 2;
    if (has_scoresum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoresum());
    }

  }
  // repeated uint32 userList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->userlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->userlist(i));
    }
    total_size += 1 * this->userlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterChallengeSequenceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterChallengeSequenceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterChallengeSequenceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterChallengeSequenceData::MergeFrom(const MonsterChallengeSequenceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_scoresum()) {
      set_scoresum(from.scoresum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterChallengeSequenceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterChallengeSequenceData::CopyFrom(const MonsterChallengeSequenceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterChallengeSequenceData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MonsterChallengeSequenceData::Swap(MonsterChallengeSequenceData* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(scoresum_, other->scoresum_);
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterChallengeSequenceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterChallengeSequenceData_descriptor_;
  metadata.reflection = MonsterChallengeSequenceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterChallengeSequenceAllBinary::kSequenceDataListFieldNumber;
#endif  // !_MSC_VER

MonsterChallengeSequenceAllBinary::MonsterChallengeSequenceAllBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterChallengeSequenceAllBinary::InitAsDefaultInstance() {
}

MonsterChallengeSequenceAllBinary::MonsterChallengeSequenceAllBinary(const MonsterChallengeSequenceAllBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterChallengeSequenceAllBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterChallengeSequenceAllBinary::~MonsterChallengeSequenceAllBinary() {
  SharedDtor();
}

void MonsterChallengeSequenceAllBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterChallengeSequenceAllBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterChallengeSequenceAllBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterChallengeSequenceAllBinary_descriptor_;
}

const MonsterChallengeSequenceAllBinary& MonsterChallengeSequenceAllBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  return *default_instance_;
}

MonsterChallengeSequenceAllBinary* MonsterChallengeSequenceAllBinary::default_instance_ = NULL;

MonsterChallengeSequenceAllBinary* MonsterChallengeSequenceAllBinary::New() const {
  return new MonsterChallengeSequenceAllBinary;
}

void MonsterChallengeSequenceAllBinary::Clear() {
  sequencedatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterChallengeSequenceAllBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.serialize.MonsterChallengeSequenceData sequenceDataList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sequenceDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequencedatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sequenceDataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterChallengeSequenceAllBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.serialize.MonsterChallengeSequenceData sequenceDataList = 1;
  for (int i = 0; i < this->sequencedatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sequencedatalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterChallengeSequenceAllBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.serialize.MonsterChallengeSequenceData sequenceDataList = 1;
  for (int i = 0; i < this->sequencedatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sequencedatalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterChallengeSequenceAllBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.serialize.MonsterChallengeSequenceData sequenceDataList = 1;
  total_size += 1 * this->sequencedatalist_size();
  for (int i = 0; i < this->sequencedatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sequencedatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterChallengeSequenceAllBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterChallengeSequenceAllBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterChallengeSequenceAllBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterChallengeSequenceAllBinary::MergeFrom(const MonsterChallengeSequenceAllBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  sequencedatalist_.MergeFrom(from.sequencedatalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterChallengeSequenceAllBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterChallengeSequenceAllBinary::CopyFrom(const MonsterChallengeSequenceAllBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterChallengeSequenceAllBinary::IsInitialized() const {

  for (int i = 0; i < sequencedatalist_size(); i++) {
    if (!this->sequencedatalist(i).IsInitialized()) return false;
  }
  return true;
}

void MonsterChallengeSequenceAllBinary::Swap(MonsterChallengeSequenceAllBinary* other) {
  if (other != this) {
    sequencedatalist_.Swap(&other->sequencedatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterChallengeSequenceAllBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterChallengeSequenceAllBinary_descriptor_;
  metadata.reflection = MonsterChallengeSequenceAllBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankMatchBinary::kSeasonIDFieldNumber;
const int RankMatchBinary::kStartTimeInSecFieldNumber;
const int RankMatchBinary::kEndTimeInSecFieldNumber;
#endif  // !_MSC_VER

RankMatchBinary::RankMatchBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankMatchBinary::InitAsDefaultInstance() {
}

RankMatchBinary::RankMatchBinary(const RankMatchBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankMatchBinary::SharedCtor() {
  _cached_size_ = 0;
  seasonid_ = 0u;
  starttimeinsec_ = 0u;
  endtimeinsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankMatchBinary::~RankMatchBinary() {
  SharedDtor();
}

void RankMatchBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankMatchBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankMatchBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankMatchBinary_descriptor_;
}

const RankMatchBinary& RankMatchBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  return *default_instance_;
}

RankMatchBinary* RankMatchBinary::default_instance_ = NULL;

RankMatchBinary* RankMatchBinary::New() const {
  return new RankMatchBinary;
}

void RankMatchBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seasonid_ = 0u;
    starttimeinsec_ = 0u;
    endtimeinsec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankMatchBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seasonID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonid_)));
          set_has_seasonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startTimeInSec;
        break;
      }

      // optional uint32 startTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttimeinsec_)));
          set_has_starttimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTimeInSec;
        break;
      }

      // optional uint32 endTimeInSec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtimeinsec_)));
          set_has_endtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankMatchBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seasonID = 1;
  if (has_seasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seasonid(), output);
  }

  // optional uint32 startTimeInSec = 2;
  if (has_starttimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttimeinsec(), output);
  }

  // optional uint32 endTimeInSec = 3;
  if (has_endtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtimeinsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankMatchBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seasonID = 1;
  if (has_seasonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seasonid(), target);
  }

  // optional uint32 startTimeInSec = 2;
  if (has_starttimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttimeinsec(), target);
  }

  // optional uint32 endTimeInSec = 3;
  if (has_endtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtimeinsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankMatchBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seasonID = 1;
    if (has_seasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonid());
    }

    // optional uint32 startTimeInSec = 2;
    if (has_starttimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttimeinsec());
    }

    // optional uint32 endTimeInSec = 3;
    if (has_endtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtimeinsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankMatchBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankMatchBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankMatchBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankMatchBinary::MergeFrom(const RankMatchBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasonid()) {
      set_seasonid(from.seasonid());
    }
    if (from.has_starttimeinsec()) {
      set_starttimeinsec(from.starttimeinsec());
    }
    if (from.has_endtimeinsec()) {
      set_endtimeinsec(from.endtimeinsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankMatchBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankMatchBinary::CopyFrom(const RankMatchBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankMatchBinary::IsInitialized() const {

  return true;
}

void RankMatchBinary::Swap(RankMatchBinary* other) {
  if (other != this) {
    std::swap(seasonid_, other->seasonid_);
    std::swap(starttimeinsec_, other->starttimeinsec_);
    std::swap(endtimeinsec_, other->endtimeinsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankMatchBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankMatchBinary_descriptor_;
  metadata.reflection = RankMatchBinary_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
