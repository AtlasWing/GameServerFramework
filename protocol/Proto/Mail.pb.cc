// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/Mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/Proto/Mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace mail {

namespace {

const ::google::protobuf::Descriptor* MailTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailTitleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailTitleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyDataBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyDataBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyAndItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyAndItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendSysMailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSysMailData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eSendMailGroupType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fProto_2fMail_2eproto() {
  protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/Proto/Mail.proto");
  GOOGLE_CHECK(file != NULL);
  MailTitle_descriptor_ = file->message_type(0);
  static const int MailTitle_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, createtimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, destid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, mailstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, fromusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, destusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, haveattachment_),
  };
  MailTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailTitle_descriptor_,
      MailTitle::default_instance_,
      MailTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailTitle));
  MailTitleList_descriptor_ = file->message_type(1);
  static const int MailTitleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitleList, mail_),
  };
  MailTitleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailTitleList_descriptor_,
      MailTitleList::default_instance_,
      MailTitleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailTitleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailTitleList));
  AllItemData_descriptor_ = file->message_type(2);
  static const int AllItemData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllItemData, itemdata_),
  };
  AllItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllItemData_descriptor_,
      AllItemData::default_instance_,
      AllItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllItemData));
  MailDetail_descriptor_ = file->message_type(3);
  static const int MailDetail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetail, maintext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetail, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetail, allitemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetail, moneytype_),
  };
  MailDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailDetail_descriptor_,
      MailDetail::default_instance_,
      MailDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailDetail));
  MailItem_descriptor_ = file->message_type(4);
  static const int MailItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, itembaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, needbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, identify_),
  };
  MailItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailItem_descriptor_,
      MailItem::default_instance_,
      MailItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailItem));
  MoneyData_descriptor_ = file->message_type(5);
  static const int MoneyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyData, moneytype_),
  };
  MoneyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyData_descriptor_,
      MoneyData::default_instance_,
      MoneyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyData));
  MoneyDataBinary_descriptor_ = file->message_type(6);
  static const int MoneyDataBinary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDataBinary, moneydata_),
  };
  MoneyDataBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyDataBinary_descriptor_,
      MoneyDataBinary::default_instance_,
      MoneyDataBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDataBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyDataBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyDataBinary));
  MoneyAndItemData_descriptor_ = file->message_type(7);
  static const int MoneyAndItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAndItemData, moneydatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAndItemData, itemdata_),
  };
  MoneyAndItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyAndItemData_descriptor_,
      MoneyAndItemData::default_instance_,
      MoneyAndItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAndItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAndItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyAndItemData));
  CreateMailData_descriptor_ = file->message_type(8);
  static const int CreateMailData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, maintext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, moneydatabinary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, itemlist_),
  };
  CreateMailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMailData_descriptor_,
      CreateMailData::default_instance_,
      CreateMailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMailData));
  SendSysMailData_descriptor_ = file->message_type(9);
  static const int SendSysMailData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, destuseridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, destusernamelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, srcplatformtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, srcconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, createmaildata_),
  };
  SendSysMailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSysMailData_descriptor_,
      SendSysMailData::default_instance_,
      SendSysMailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSysMailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSysMailData));
  eSendMailGroupType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fProto_2fMail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailTitle_descriptor_, &MailTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailTitleList_descriptor_, &MailTitleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllItemData_descriptor_, &AllItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailDetail_descriptor_, &MailDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailItem_descriptor_, &MailItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyData_descriptor_, &MoneyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyDataBinary_descriptor_, &MoneyDataBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyAndItemData_descriptor_, &MoneyAndItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMailData_descriptor_, &CreateMailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSysMailData_descriptor_, &SendSysMailData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fProto_2fMail_2eproto() {
  delete MailTitle::default_instance_;
  delete MailTitle_reflection_;
  delete MailTitleList::default_instance_;
  delete MailTitleList_reflection_;
  delete AllItemData::default_instance_;
  delete AllItemData_reflection_;
  delete MailDetail::default_instance_;
  delete MailDetail_reflection_;
  delete MailItem::default_instance_;
  delete MailItem_reflection_;
  delete MoneyData::default_instance_;
  delete MoneyData_reflection_;
  delete MoneyDataBinary::default_instance_;
  delete MoneyDataBinary_reflection_;
  delete MoneyAndItemData::default_instance_;
  delete MoneyAndItemData_reflection_;
  delete CreateMailData::default_instance_;
  delete CreateMailData_reflection_;
  delete SendSysMailData::default_instance_;
  delete SendSysMailData_reflection_;
}

void protobuf_AddDesc_protocol_2fProto_2fMail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031protocol/Proto/Mail.proto\022\rprotocol.ma"
    "il\"\314\001\n\tMailTitle\022\027\n\017createTimeInSec\030\001 \002("
    "\r\022\020\n\010mailType\030\002 \002(\r\022\016\n\006mailID\030\003 \002(\r\022\016\n\006f"
    "romID\030\004 \001(\r\022\016\n\006destID\030\005 \001(\r\022\021\n\tmailState"
    "\030\006 \002(\r\022\r\n\005title\030\007 \002(\t\022\024\n\014fromUserName\030\010 "
    "\001(\t\022\024\n\014destUserName\030\t \001(\t\022\026\n\016haveAttachm"
    "ent\030\n \001(\010\"7\n\rMailTitleList\022&\n\004mail\030\001 \003(\013"
    "2\030.protocol.mail.MailTitle\"\037\n\013AllItemDat"
    "a\022\020\n\010itemData\030\004 \003(\014\"e\n\nMailDetail\022\016\n\006mai"
    "lID\030\001 \002(\r\022\020\n\010mainText\030\002 \002(\t\022\r\n\005money\030\003 \001"
    "(\r\022\023\n\013allItemData\030\004 \002(\014\022\021\n\tmoneyType\030\005 \001"
    "(\r\"`\n\010MailItem\022\022\n\nitemBaseID\030\001 \002(\r\022\013\n\003nu"
    "m\030\002 \002(\r\022\020\n\010needBind\030\003 \002(\010\022\017\n\007quality\030\004 \002"
    "(\r\022\020\n\010identify\030\005 \002(\r\"-\n\tMoneyData\022\r\n\005mon"
    "ey\030\001 \002(\r\022\021\n\tmoneyType\030\002 \002(\r\">\n\017MoneyData"
    "Binary\022+\n\tmoneyData\030\001 \003(\0132\030.protocol.mai"
    "l.MoneyData\"=\n\020MoneyAndItemData\022\027\n\017money"
    "DataBinary\030\001 \001(\014\022\020\n\010itemData\030\002 \001(\014\"\251\001\n\016C"
    "reateMailData\022\020\n\010mailType\030\001 \002(\r\022\016\n\006fromI"
    "D\030\002 \001(\r\022\r\n\005title\030\003 \001(\t\022\020\n\010mainText\030\004 \001(\t"
    "\022\027\n\017moneyDataBinary\030\005 \001(\014\022\020\n\010itemData\030\006 "
    "\001(\014\022)\n\010itemList\030\007 \003(\0132\027.protocol.mail.Ma"
    "ilItem\"\334\001\n\017SendSysMailData\0224\n\tgroupType\030"
    "\001 \001(\0162!.protocol.mail.eSendMailGroupType"
    "\022\026\n\016destUserIDList\030\002 \003(\r\022\030\n\020destUserName"
    "List\030\003 \003(\t\022\027\n\017srcPlatformType\030\004 \001(\r\022\021\n\ts"
    "rcConnID\030\005 \001(\r\0225\n\016createMailData\030\006 \002(\0132\035"
    ".protocol.mail.CreateMailData*\261\001\n\022eSendM"
    "ailGroupType\022\033\n\027eSendMailGroupType_None\020"
    "\000\022\037\n\033eSendMailGroupType_UserList\020\000\022\036\n\032eS"
    "endMailGroupType_AllUser\020\001\022!\n\035eSendMailG"
    "roupType_OnlineUser\020\002\022\032\n\026eSendMailGroupT"
    "ype_Max\020\003", 1289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/Proto/Mail.proto", &protobuf_RegisterTypes);
  MailTitle::default_instance_ = new MailTitle();
  MailTitleList::default_instance_ = new MailTitleList();
  AllItemData::default_instance_ = new AllItemData();
  MailDetail::default_instance_ = new MailDetail();
  MailItem::default_instance_ = new MailItem();
  MoneyData::default_instance_ = new MoneyData();
  MoneyDataBinary::default_instance_ = new MoneyDataBinary();
  MoneyAndItemData::default_instance_ = new MoneyAndItemData();
  CreateMailData::default_instance_ = new CreateMailData();
  SendSysMailData::default_instance_ = new SendSysMailData();
  MailTitle::default_instance_->InitAsDefaultInstance();
  MailTitleList::default_instance_->InitAsDefaultInstance();
  AllItemData::default_instance_->InitAsDefaultInstance();
  MailDetail::default_instance_->InitAsDefaultInstance();
  MailItem::default_instance_->InitAsDefaultInstance();
  MoneyData::default_instance_->InitAsDefaultInstance();
  MoneyDataBinary::default_instance_->InitAsDefaultInstance();
  MoneyAndItemData::default_instance_->InitAsDefaultInstance();
  CreateMailData::default_instance_->InitAsDefaultInstance();
  SendSysMailData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fProto_2fMail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fProto_2fMail_2eproto {
  StaticDescriptorInitializer_protocol_2fProto_2fMail_2eproto() {
    protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  }
} static_descriptor_initializer_protocol_2fProto_2fMail_2eproto_;
const ::google::protobuf::EnumDescriptor* eSendMailGroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eSendMailGroupType_descriptor_;
}
bool eSendMailGroupType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MailTitle::kCreateTimeInSecFieldNumber;
const int MailTitle::kMailTypeFieldNumber;
const int MailTitle::kMailIDFieldNumber;
const int MailTitle::kFromIDFieldNumber;
const int MailTitle::kDestIDFieldNumber;
const int MailTitle::kMailStateFieldNumber;
const int MailTitle::kTitleFieldNumber;
const int MailTitle::kFromUserNameFieldNumber;
const int MailTitle::kDestUserNameFieldNumber;
const int MailTitle::kHaveAttachmentFieldNumber;
#endif  // !_MSC_VER

MailTitle::MailTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailTitle::InitAsDefaultInstance() {
}

MailTitle::MailTitle(const MailTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailTitle::SharedCtor() {
  _cached_size_ = 0;
  createtimeinsec_ = 0u;
  mailtype_ = 0u;
  mailid_ = 0u;
  fromid_ = 0u;
  destid_ = 0u;
  mailstate_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haveattachment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailTitle::~MailTitle() {
  SharedDtor();
}

void MailTitle::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (fromusername_ != &::google::protobuf::internal::kEmptyString) {
    delete fromusername_;
  }
  if (destusername_ != &::google::protobuf::internal::kEmptyString) {
    delete destusername_;
  }
  if (this != default_instance_) {
  }
}

void MailTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailTitle_descriptor_;
}

const MailTitle& MailTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

MailTitle* MailTitle::default_instance_ = NULL;

MailTitle* MailTitle::New() const {
  return new MailTitle;
}

void MailTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    createtimeinsec_ = 0u;
    mailtype_ = 0u;
    mailid_ = 0u;
    fromid_ = 0u;
    destid_ = 0u;
    mailstate_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_fromusername()) {
      if (fromusername_ != &::google::protobuf::internal::kEmptyString) {
        fromusername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_destusername()) {
      if (destusername_ != &::google::protobuf::internal::kEmptyString) {
        destusername_->clear();
      }
    }
    haveattachment_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 createTimeInSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtimeinsec_)));
          set_has_createtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailType;
        break;
      }

      // required uint32 mailType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailID;
        break;
      }

      // required uint32 mailID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fromID;
        break;
      }

      // optional uint32 fromID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_destID;
        break;
      }

      // optional uint32 destID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destid_)));
          set_has_destid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mailState;
        break;
      }

      // required uint32 mailState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailstate_)));
          set_has_mailstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_title;
        break;
      }

      // required string title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fromUserName;
        break;
      }

      // optional string fromUserName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromusername().data(), this->fromusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_destUserName;
        break;
      }

      // optional string destUserName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destusername().data(), this->destusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_haveAttachment;
        break;
      }

      // optional bool haveAttachment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haveAttachment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haveattachment_)));
          set_has_haveattachment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 createTimeInSec = 1;
  if (has_createtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->createtimeinsec(), output);
  }

  // required uint32 mailType = 2;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mailtype(), output);
  }

  // required uint32 mailID = 3;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailid(), output);
  }

  // optional uint32 fromID = 4;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fromid(), output);
  }

  // optional uint32 destID = 5;
  if (has_destid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->destid(), output);
  }

  // required uint32 mailState = 6;
  if (has_mailstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mailstate(), output);
  }

  // required string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->title(), output);
  }

  // optional string fromUserName = 8;
  if (has_fromusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->fromusername(), output);
  }

  // optional string destUserName = 9;
  if (has_destusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destusername().data(), this->destusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->destusername(), output);
  }

  // optional bool haveAttachment = 10;
  if (has_haveattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->haveattachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 createTimeInSec = 1;
  if (has_createtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->createtimeinsec(), target);
  }

  // required uint32 mailType = 2;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mailtype(), target);
  }

  // required uint32 mailID = 3;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailid(), target);
  }

  // optional uint32 fromID = 4;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fromid(), target);
  }

  // optional uint32 destID = 5;
  if (has_destid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->destid(), target);
  }

  // required uint32 mailState = 6;
  if (has_mailstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mailstate(), target);
  }

  // required string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->title(), target);
  }

  // optional string fromUserName = 8;
  if (has_fromusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromusername().data(), this->fromusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fromusername(), target);
  }

  // optional string destUserName = 9;
  if (has_destusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destusername().data(), this->destusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->destusername(), target);
  }

  // optional bool haveAttachment = 10;
  if (has_haveattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->haveattachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 createTimeInSec = 1;
    if (has_createtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtimeinsec());
    }

    // required uint32 mailType = 2;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required uint32 mailID = 3;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // optional uint32 fromID = 4;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // optional uint32 destID = 5;
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destid());
    }

    // required uint32 mailState = 6;
    if (has_mailstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailstate());
    }

    // required string title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string fromUserName = 8;
    if (has_fromusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromusername());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string destUserName = 9;
    if (has_destusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destusername());
    }

    // optional bool haveAttachment = 10;
    if (has_haveattachment()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailTitle::MergeFrom(const MailTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createtimeinsec()) {
      set_createtimeinsec(from.createtimeinsec());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_destid()) {
      set_destid(from.destid());
    }
    if (from.has_mailstate()) {
      set_mailstate(from.mailstate());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_fromusername()) {
      set_fromusername(from.fromusername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_destusername()) {
      set_destusername(from.destusername());
    }
    if (from.has_haveattachment()) {
      set_haveattachment(from.haveattachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailTitle::CopyFrom(const MailTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;

  return true;
}

void MailTitle::Swap(MailTitle* other) {
  if (other != this) {
    std::swap(createtimeinsec_, other->createtimeinsec_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(mailid_, other->mailid_);
    std::swap(fromid_, other->fromid_);
    std::swap(destid_, other->destid_);
    std::swap(mailstate_, other->mailstate_);
    std::swap(title_, other->title_);
    std::swap(fromusername_, other->fromusername_);
    std::swap(destusername_, other->destusername_);
    std::swap(haveattachment_, other->haveattachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailTitle_descriptor_;
  metadata.reflection = MailTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailTitleList::kMailFieldNumber;
#endif  // !_MSC_VER

MailTitleList::MailTitleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailTitleList::InitAsDefaultInstance() {
}

MailTitleList::MailTitleList(const MailTitleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailTitleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailTitleList::~MailTitleList() {
  SharedDtor();
}

void MailTitleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailTitleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailTitleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailTitleList_descriptor_;
}

const MailTitleList& MailTitleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

MailTitleList* MailTitleList::default_instance_ = NULL;

MailTitleList* MailTitleList::New() const {
  return new MailTitleList;
}

void MailTitleList::Clear() {
  mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailTitleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.mail.MailTitle mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailTitleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.mail.MailTitle mail = 1;
  for (int i = 0; i < this->mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailTitleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.mail.MailTitle mail = 1;
  for (int i = 0; i < this->mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailTitleList::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.mail.MailTitle mail = 1;
  total_size += 1 * this->mail_size();
  for (int i = 0; i < this->mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailTitleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailTitleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailTitleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailTitleList::MergeFrom(const MailTitleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_.MergeFrom(from.mail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailTitleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailTitleList::CopyFrom(const MailTitleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailTitleList::IsInitialized() const {

  for (int i = 0; i < mail_size(); i++) {
    if (!this->mail(i).IsInitialized()) return false;
  }
  return true;
}

void MailTitleList::Swap(MailTitleList* other) {
  if (other != this) {
    mail_.Swap(&other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailTitleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailTitleList_descriptor_;
  metadata.reflection = MailTitleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllItemData::kItemDataFieldNumber;
#endif  // !_MSC_VER

AllItemData::AllItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllItemData::InitAsDefaultInstance() {
}

AllItemData::AllItemData(const AllItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllItemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllItemData::~AllItemData() {
  SharedDtor();
}

void AllItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllItemData_descriptor_;
}

const AllItemData& AllItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

AllItemData* AllItemData::default_instance_ = NULL;

AllItemData* AllItemData::New() const {
  return new AllItemData;
}

void AllItemData::Clear() {
  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes itemData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes itemData = 4;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->itemdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes itemData = 4;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->itemdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllItemData::ByteSize() const {
  int total_size = 0;

  // repeated bytes itemData = 4;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllItemData::MergeFrom(const AllItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllItemData::CopyFrom(const AllItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllItemData::IsInitialized() const {

  return true;
}

void AllItemData::Swap(AllItemData* other) {
  if (other != this) {
    itemdata_.Swap(&other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllItemData_descriptor_;
  metadata.reflection = AllItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailDetail::kMailIDFieldNumber;
const int MailDetail::kMainTextFieldNumber;
const int MailDetail::kMoneyFieldNumber;
const int MailDetail::kAllItemDataFieldNumber;
const int MailDetail::kMoneyTypeFieldNumber;
#endif  // !_MSC_VER

MailDetail::MailDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailDetail::InitAsDefaultInstance() {
}

MailDetail::MailDetail(const MailDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailDetail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  maintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  allitemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moneytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailDetail::~MailDetail() {
  SharedDtor();
}

void MailDetail::SharedDtor() {
  if (maintext_ != &::google::protobuf::internal::kEmptyString) {
    delete maintext_;
  }
  if (allitemdata_ != &::google::protobuf::internal::kEmptyString) {
    delete allitemdata_;
  }
  if (this != default_instance_) {
  }
}

void MailDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailDetail_descriptor_;
}

const MailDetail& MailDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

MailDetail* MailDetail::default_instance_ = NULL;

MailDetail* MailDetail::New() const {
  return new MailDetail;
}

void MailDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (has_maintext()) {
      if (maintext_ != &::google::protobuf::internal::kEmptyString) {
        maintext_->clear();
      }
    }
    money_ = 0u;
    if (has_allitemdata()) {
      if (allitemdata_ != &::google::protobuf::internal::kEmptyString) {
        allitemdata_->clear();
      }
    }
    moneytype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mainText;
        break;
      }

      // required string mainText = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maintext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maintext().data(), this->maintext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional uint32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_allItemData;
        break;
      }

      // required bytes allItemData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allItemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_allitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_moneyType;
        break;
      }

      // optional uint32 moneyType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // required string mainText = 2;
  if (has_maintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maintext().data(), this->maintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->maintext(), output);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money(), output);
  }

  // required bytes allItemData = 4;
  if (has_allitemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->allitemdata(), output);
  }

  // optional uint32 moneyType = 5;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->moneytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // required string mainText = 2;
  if (has_maintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maintext().data(), this->maintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->maintext(), target);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money(), target);
  }

  // required bytes allItemData = 4;
  if (has_allitemdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->allitemdata(), target);
  }

  // optional uint32 moneyType = 5;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->moneytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // required string mainText = 2;
    if (has_maintext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maintext());
    }

    // optional uint32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required bytes allItemData = 4;
    if (has_allitemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->allitemdata());
    }

    // optional uint32 moneyType = 5;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailDetail::MergeFrom(const MailDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_maintext()) {
      set_maintext(from.maintext());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_allitemdata()) {
      set_allitemdata(from.allitemdata());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailDetail::CopyFrom(const MailDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void MailDetail::Swap(MailDetail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(maintext_, other->maintext_);
    std::swap(money_, other->money_);
    std::swap(allitemdata_, other->allitemdata_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailDetail_descriptor_;
  metadata.reflection = MailDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailItem::kItemBaseIDFieldNumber;
const int MailItem::kNumFieldNumber;
const int MailItem::kNeedBindFieldNumber;
const int MailItem::kQualityFieldNumber;
const int MailItem::kIdentifyFieldNumber;
#endif  // !_MSC_VER

MailItem::MailItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailItem::InitAsDefaultInstance() {
}

MailItem::MailItem(const MailItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailItem::SharedCtor() {
  _cached_size_ = 0;
  itembaseid_ = 0u;
  num_ = 0u;
  needbind_ = false;
  quality_ = 0u;
  identify_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailItem::~MailItem() {
  SharedDtor();
}

void MailItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailItem_descriptor_;
}

const MailItem& MailItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

MailItem* MailItem::default_instance_ = NULL;

MailItem* MailItem::New() const {
  return new MailItem;
}

void MailItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itembaseid_ = 0u;
    num_ = 0u;
    needbind_ = false;
    quality_ = 0u;
    identify_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemBaseID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itembaseid_)));
          set_has_itembaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needBind;
        break;
      }

      // required bool needBind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needbind_)));
          set_has_needbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // required uint32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_identify;
        break;
      }

      // required uint32 identify = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identify_)));
          set_has_identify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itembaseid(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // required bool needBind = 3;
  if (has_needbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needbind(), output);
  }

  // required uint32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quality(), output);
  }

  // required uint32 identify = 5;
  if (has_identify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->identify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemBaseID = 1;
  if (has_itembaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itembaseid(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // required bool needBind = 3;
  if (has_needbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needbind(), target);
  }

  // required uint32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quality(), target);
  }

  // required uint32 identify = 5;
  if (has_identify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->identify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemBaseID = 1;
    if (has_itembaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itembaseid());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required bool needBind = 3;
    if (has_needbind()) {
      total_size += 1 + 1;
    }

    // required uint32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 identify = 5;
    if (has_identify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailItem::MergeFrom(const MailItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itembaseid()) {
      set_itembaseid(from.itembaseid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_needbind()) {
      set_needbind(from.needbind());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_identify()) {
      set_identify(from.identify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItem::CopyFrom(const MailItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MailItem::Swap(MailItem* other) {
  if (other != this) {
    std::swap(itembaseid_, other->itembaseid_);
    std::swap(num_, other->num_);
    std::swap(needbind_, other->needbind_);
    std::swap(quality_, other->quality_);
    std::swap(identify_, other->identify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailItem_descriptor_;
  metadata.reflection = MailItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyData::kMoneyFieldNumber;
const int MoneyData::kMoneyTypeFieldNumber;
#endif  // !_MSC_VER

MoneyData::MoneyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyData::InitAsDefaultInstance() {
}

MoneyData::MoneyData(const MoneyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyData::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  moneytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyData::~MoneyData() {
  SharedDtor();
}

void MoneyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyData_descriptor_;
}

const MoneyData& MoneyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

MoneyData* MoneyData::default_instance_ = NULL;

MoneyData* MoneyData::New() const {
  return new MoneyData;
}

void MoneyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0u;
    moneytype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneyType;
        break;
      }

      // required uint32 moneyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->money(), output);
  }

  // required uint32 moneyType = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moneytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->money(), target);
  }

  // required uint32 moneyType = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moneytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint32 moneyType = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyData::MergeFrom(const MoneyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyData::CopyFrom(const MoneyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MoneyData::Swap(MoneyData* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyData_descriptor_;
  metadata.reflection = MoneyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyDataBinary::kMoneyDataFieldNumber;
#endif  // !_MSC_VER

MoneyDataBinary::MoneyDataBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyDataBinary::InitAsDefaultInstance() {
}

MoneyDataBinary::MoneyDataBinary(const MoneyDataBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyDataBinary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyDataBinary::~MoneyDataBinary() {
  SharedDtor();
}

void MoneyDataBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyDataBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyDataBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyDataBinary_descriptor_;
}

const MoneyDataBinary& MoneyDataBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

MoneyDataBinary* MoneyDataBinary::default_instance_ = NULL;

MoneyDataBinary* MoneyDataBinary::New() const {
  return new MoneyDataBinary;
}

void MoneyDataBinary::Clear() {
  moneydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyDataBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.mail.MoneyData moneyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_moneyData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyDataBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.mail.MoneyData moneyData = 1;
  for (int i = 0; i < this->moneydata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moneydata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyDataBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.mail.MoneyData moneyData = 1;
  for (int i = 0; i < this->moneydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moneydata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyDataBinary::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.mail.MoneyData moneyData = 1;
  total_size += 1 * this->moneydata_size();
  for (int i = 0; i < this->moneydata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneydata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyDataBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyDataBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyDataBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyDataBinary::MergeFrom(const MoneyDataBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneydata_.MergeFrom(from.moneydata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyDataBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyDataBinary::CopyFrom(const MoneyDataBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyDataBinary::IsInitialized() const {

  for (int i = 0; i < moneydata_size(); i++) {
    if (!this->moneydata(i).IsInitialized()) return false;
  }
  return true;
}

void MoneyDataBinary::Swap(MoneyDataBinary* other) {
  if (other != this) {
    moneydata_.Swap(&other->moneydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyDataBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyDataBinary_descriptor_;
  metadata.reflection = MoneyDataBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyAndItemData::kMoneyDataBinaryFieldNumber;
const int MoneyAndItemData::kItemDataFieldNumber;
#endif  // !_MSC_VER

MoneyAndItemData::MoneyAndItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyAndItemData::InitAsDefaultInstance() {
}

MoneyAndItemData::MoneyAndItemData(const MoneyAndItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyAndItemData::SharedCtor() {
  _cached_size_ = 0;
  moneydatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyAndItemData::~MoneyAndItemData() {
  SharedDtor();
}

void MoneyAndItemData::SharedDtor() {
  if (moneydatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete moneydatabinary_;
  }
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdata_;
  }
  if (this != default_instance_) {
  }
}

void MoneyAndItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyAndItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyAndItemData_descriptor_;
}

const MoneyAndItemData& MoneyAndItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

MoneyAndItemData* MoneyAndItemData::default_instance_ = NULL;

MoneyAndItemData* MoneyAndItemData::New() const {
  return new MoneyAndItemData;
}

void MoneyAndItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_moneydatabinary()) {
      if (moneydatabinary_ != &::google::protobuf::internal::kEmptyString) {
        moneydatabinary_->clear();
      }
    }
    if (has_itemdata()) {
      if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
        itemdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyAndItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes moneyDataBinary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_moneydatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemData;
        break;
      }

      // optional bytes itemData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyAndItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes moneyDataBinary = 1;
  if (has_moneydatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->moneydatabinary(), output);
  }

  // optional bytes itemData = 2;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyAndItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes moneyDataBinary = 1;
  if (has_moneydatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->moneydatabinary(), target);
  }

  // optional bytes itemData = 2;
  if (has_itemdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyAndItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes moneyDataBinary = 1;
    if (has_moneydatabinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->moneydatabinary());
    }

    // optional bytes itemData = 2;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyAndItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyAndItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyAndItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyAndItemData::MergeFrom(const MoneyAndItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneydatabinary()) {
      set_moneydatabinary(from.moneydatabinary());
    }
    if (from.has_itemdata()) {
      set_itemdata(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyAndItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyAndItemData::CopyFrom(const MoneyAndItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyAndItemData::IsInitialized() const {

  return true;
}

void MoneyAndItemData::Swap(MoneyAndItemData* other) {
  if (other != this) {
    std::swap(moneydatabinary_, other->moneydatabinary_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyAndItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyAndItemData_descriptor_;
  metadata.reflection = MoneyAndItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMailData::kMailTypeFieldNumber;
const int CreateMailData::kFromIDFieldNumber;
const int CreateMailData::kTitleFieldNumber;
const int CreateMailData::kMainTextFieldNumber;
const int CreateMailData::kMoneyDataBinaryFieldNumber;
const int CreateMailData::kItemDataFieldNumber;
const int CreateMailData::kItemListFieldNumber;
#endif  // !_MSC_VER

CreateMailData::CreateMailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateMailData::InitAsDefaultInstance() {
}

CreateMailData::CreateMailData(const CreateMailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateMailData::SharedCtor() {
  _cached_size_ = 0;
  mailtype_ = 0u;
  fromid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moneydatabinary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMailData::~CreateMailData() {
  SharedDtor();
}

void CreateMailData::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (maintext_ != &::google::protobuf::internal::kEmptyString) {
    delete maintext_;
  }
  if (moneydatabinary_ != &::google::protobuf::internal::kEmptyString) {
    delete moneydatabinary_;
  }
  if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdata_;
  }
  if (this != default_instance_) {
  }
}

void CreateMailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMailData_descriptor_;
}

const CreateMailData& CreateMailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

CreateMailData* CreateMailData::default_instance_ = NULL;

CreateMailData* CreateMailData::New() const {
  return new CreateMailData;
}

void CreateMailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailtype_ = 0u;
    fromid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_maintext()) {
      if (maintext_ != &::google::protobuf::internal::kEmptyString) {
        maintext_->clear();
      }
    }
    if (has_moneydatabinary()) {
      if (moneydatabinary_ != &::google::protobuf::internal::kEmptyString) {
        moneydatabinary_->clear();
      }
    }
    if (has_itemdata()) {
      if (itemdata_ != &::google::protobuf::internal::kEmptyString) {
        itemdata_->clear();
      }
    }
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromID;
        break;
      }

      // optional uint32 fromID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mainText;
        break;
      }

      // optional string mainText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maintext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maintext().data(), this->maintext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_moneyDataBinary;
        break;
      }

      // optional bytes moneyDataBinary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneyDataBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_moneydatabinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemData;
        break;
      }

      // optional bytes itemData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemList;
        break;
      }

      // repeated .protocol.mail.MailItem itemList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateMailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailType = 1;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailtype(), output);
  }

  // optional uint32 fromID = 2;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fromid(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string mainText = 4;
  if (has_maintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maintext().data(), this->maintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->maintext(), output);
  }

  // optional bytes moneyDataBinary = 5;
  if (has_moneydatabinary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->moneydatabinary(), output);
  }

  // optional bytes itemData = 6;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->itemdata(), output);
  }

  // repeated .protocol.mail.MailItem itemList = 7;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateMailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailType = 1;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailtype(), target);
  }

  // optional uint32 fromID = 2;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fromid(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string mainText = 4;
  if (has_maintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maintext().data(), this->maintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->maintext(), target);
  }

  // optional bytes moneyDataBinary = 5;
  if (has_moneydatabinary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->moneydatabinary(), target);
  }

  // optional bytes itemData = 6;
  if (has_itemdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->itemdata(), target);
  }

  // repeated .protocol.mail.MailItem itemList = 7;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateMailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailType = 1;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // optional uint32 fromID = 2;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string mainText = 4;
    if (has_maintext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maintext());
    }

    // optional bytes moneyDataBinary = 5;
    if (has_moneydatabinary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->moneydatabinary());
    }

    // optional bytes itemData = 6;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->itemdata());
    }

  }
  // repeated .protocol.mail.MailItem itemList = 7;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMailData::MergeFrom(const CreateMailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_maintext()) {
      set_maintext(from.maintext());
    }
    if (from.has_moneydatabinary()) {
      set_moneydatabinary(from.moneydatabinary());
    }
    if (from.has_itemdata()) {
      set_itemdata(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMailData::CopyFrom(const CreateMailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMailData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void CreateMailData::Swap(CreateMailData* other) {
  if (other != this) {
    std::swap(mailtype_, other->mailtype_);
    std::swap(fromid_, other->fromid_);
    std::swap(title_, other->title_);
    std::swap(maintext_, other->maintext_);
    std::swap(moneydatabinary_, other->moneydatabinary_);
    std::swap(itemdata_, other->itemdata_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMailData_descriptor_;
  metadata.reflection = CreateMailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSysMailData::kGroupTypeFieldNumber;
const int SendSysMailData::kDestUserIDListFieldNumber;
const int SendSysMailData::kDestUserNameListFieldNumber;
const int SendSysMailData::kSrcPlatformTypeFieldNumber;
const int SendSysMailData::kSrcConnIDFieldNumber;
const int SendSysMailData::kCreateMailDataFieldNumber;
#endif  // !_MSC_VER

SendSysMailData::SendSysMailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendSysMailData::InitAsDefaultInstance() {
  createmaildata_ = const_cast< ::protocol::mail::CreateMailData*>(&::protocol::mail::CreateMailData::default_instance());
}

SendSysMailData::SendSysMailData(const SendSysMailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendSysMailData::SharedCtor() {
  _cached_size_ = 0;
  grouptype_ = 0;
  srcplatformtype_ = 0u;
  srcconnid_ = 0u;
  createmaildata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSysMailData::~SendSysMailData() {
  SharedDtor();
}

void SendSysMailData::SharedDtor() {
  if (this != default_instance_) {
    delete createmaildata_;
  }
}

void SendSysMailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSysMailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSysMailData_descriptor_;
}

const SendSysMailData& SendSysMailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fMail_2eproto();
  return *default_instance_;
}

SendSysMailData* SendSysMailData::default_instance_ = NULL;

SendSysMailData* SendSysMailData::New() const {
  return new SendSysMailData;
}

void SendSysMailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grouptype_ = 0;
    srcplatformtype_ = 0u;
    srcconnid_ = 0u;
    if (has_createmaildata()) {
      if (createmaildata_ != NULL) createmaildata_->::protocol::mail::CreateMailData::Clear();
    }
  }
  destuseridlist_.Clear();
  destusernamelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSysMailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.mail.eSendMailGroupType groupType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::mail::eSendMailGroupType_IsValid(value)) {
            set_grouptype(static_cast< ::protocol::mail::eSendMailGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destUserIDList;
        break;
      }

      // repeated uint32 destUserIDList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destUserIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_destuseridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_destuseridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destUserIDList;
        if (input->ExpectTag(26)) goto parse_destUserNameList;
        break;
      }

      // repeated string destUserNameList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destUserNameList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destusernamelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destusernamelist(this->destusernamelist_size() - 1).data(),
            this->destusernamelist(this->destusernamelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_destUserNameList;
        if (input->ExpectTag(32)) goto parse_srcPlatformType;
        break;
      }

      // optional uint32 srcPlatformType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcPlatformType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcplatformtype_)));
          set_has_srcplatformtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_srcConnID;
        break;
      }

      // optional uint32 srcConnID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcconnid_)));
          set_has_srcconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_createMailData;
        break;
      }

      // required .protocol.mail.CreateMailData createMailData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createMailData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createmaildata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendSysMailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocol.mail.eSendMailGroupType groupType = 1;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->grouptype(), output);
  }

  // repeated uint32 destUserIDList = 2;
  for (int i = 0; i < this->destuseridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->destuseridlist(i), output);
  }

  // repeated string destUserNameList = 3;
  for (int i = 0; i < this->destusernamelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->destusernamelist(i).data(), this->destusernamelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->destusernamelist(i), output);
  }

  // optional uint32 srcPlatformType = 4;
  if (has_srcplatformtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srcplatformtype(), output);
  }

  // optional uint32 srcConnID = 5;
  if (has_srcconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->srcconnid(), output);
  }

  // required .protocol.mail.CreateMailData createMailData = 6;
  if (has_createmaildata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->createmaildata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendSysMailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocol.mail.eSendMailGroupType groupType = 1;
  if (has_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->grouptype(), target);
  }

  // repeated uint32 destUserIDList = 2;
  for (int i = 0; i < this->destuseridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->destuseridlist(i), target);
  }

  // repeated string destUserNameList = 3;
  for (int i = 0; i < this->destusernamelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destusernamelist(i).data(), this->destusernamelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->destusernamelist(i), target);
  }

  // optional uint32 srcPlatformType = 4;
  if (has_srcplatformtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srcplatformtype(), target);
  }

  // optional uint32 srcConnID = 5;
  if (has_srcconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->srcconnid(), target);
  }

  // required .protocol.mail.CreateMailData createMailData = 6;
  if (has_createmaildata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->createmaildata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendSysMailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocol.mail.eSendMailGroupType groupType = 1;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->grouptype());
    }

    // optional uint32 srcPlatformType = 4;
    if (has_srcplatformtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcplatformtype());
    }

    // optional uint32 srcConnID = 5;
    if (has_srcconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcconnid());
    }

    // required .protocol.mail.CreateMailData createMailData = 6;
    if (has_createmaildata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createmaildata());
    }

  }
  // repeated uint32 destUserIDList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->destuseridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->destuseridlist(i));
    }
    total_size += 1 * this->destuseridlist_size() + data_size;
  }

  // repeated string destUserNameList = 3;
  total_size += 1 * this->destusernamelist_size();
  for (int i = 0; i < this->destusernamelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destusernamelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSysMailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSysMailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSysMailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSysMailData::MergeFrom(const SendSysMailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  destuseridlist_.MergeFrom(from.destuseridlist_);
  destusernamelist_.MergeFrom(from.destusernamelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
    if (from.has_srcplatformtype()) {
      set_srcplatformtype(from.srcplatformtype());
    }
    if (from.has_srcconnid()) {
      set_srcconnid(from.srcconnid());
    }
    if (from.has_createmaildata()) {
      mutable_createmaildata()->::protocol::mail::CreateMailData::MergeFrom(from.createmaildata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSysMailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSysMailData::CopyFrom(const SendSysMailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSysMailData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  if (has_createmaildata()) {
    if (!this->createmaildata().IsInitialized()) return false;
  }
  return true;
}

void SendSysMailData::Swap(SendSysMailData* other) {
  if (other != this) {
    std::swap(grouptype_, other->grouptype_);
    destuseridlist_.Swap(&other->destuseridlist_);
    destusernamelist_.Swap(&other->destusernamelist_);
    std::swap(srcplatformtype_, other->srcplatformtype_);
    std::swap(srcconnid_, other->srcconnid_);
    std::swap(createmaildata_, other->createmaildata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSysMailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSysMailData_descriptor_;
  metadata.reflection = SendSysMailData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mail
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
