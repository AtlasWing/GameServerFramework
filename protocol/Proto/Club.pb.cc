// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/Club.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/Proto/Club.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace club {

namespace {

const ::google::protobuf::Descriptor* CreateClubData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateClubData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllClubData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllClubData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubLogBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubLogBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSaveData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto() {
  protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/Proto/Club.proto");
  GOOGLE_CHECK(file != NULL);
  CreateClubData_descriptor_ = file->message_type(0);
  static const int CreateClubData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, clubflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, currexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, binarydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, createtimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, isopen_),
  };
  CreateClubData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateClubData_descriptor_,
      CreateClubData::default_instance_,
      CreateClubData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClubData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateClubData));
  AllClubData_descriptor_ = file->message_type(1);
  static const int AllClubData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllClubData, clubdatalist_),
  };
  AllClubData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllClubData_descriptor_,
      AllClubData::default_instance_,
      AllClubData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllClubData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllClubData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllClubData));
  ClubLogBinary_descriptor_ = file->message_type(2);
  static const int ClubLogBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubLogBinary, logtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubLogBinary, logtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubLogBinary, clublog_),
  };
  ClubLogBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubLogBinary_descriptor_,
      ClubLogBinary::default_instance_,
      ClubLogBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubLogBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubLogBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubLogBinary));
  ClubBinary_descriptor_ = file->message_type(3);
  static const int ClubBinary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBinary, activedegreeweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBinary, savetimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBinary, lastchangenametimeinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBinary, activedegreeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBinary, clublogbinary_),
  };
  ClubBinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubBinary_descriptor_,
      ClubBinary::default_instance_,
      ClubBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubBinary));
  ClubSaveData_descriptor_ = file->message_type(4);
  static const int ClubSaveData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, currexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, binarydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, name_),
  };
  ClubSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSaveData_descriptor_,
      ClubSaveData::default_instance_,
      ClubSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSaveData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateClubData_descriptor_, &CreateClubData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllClubData_descriptor_, &AllClubData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubLogBinary_descriptor_, &ClubLogBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubBinary_descriptor_, &ClubBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSaveData_descriptor_, &ClubSaveData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto() {
  delete CreateClubData::default_instance_;
  delete CreateClubData_reflection_;
  delete AllClubData::default_instance_;
  delete AllClubData_reflection_;
  delete ClubLogBinary::default_instance_;
  delete ClubLogBinary_reflection_;
  delete ClubBinary::default_instance_;
  delete ClubBinary_reflection_;
  delete ClubSaveData::default_instance_;
  delete ClubSaveData_reflection_;
}

void protobuf_AddDesc_protocol_2fProto_2fClub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::user::protobuf_AddDesc_protocol_2fProto_2fUserData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031protocol/Proto/Club.proto\022\rprotocol.cl"
    "ub\032\035protocol/Proto/UserData.proto\"\362\001\n\016Cr"
    "eateClubData\022\017\n\007ownerID\030\001 \002(\r\022\n\n\002id\030\002 \001("
    "\r\022\020\n\010clubFlag\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\017\n\007con"
    "tact\030\005 \002(\t\022\016\n\006notice\030\006 \002(\t\022\r\n\005level\030\007 \001("
    "\r\022\017\n\007currExp\030\010 \001(\r\022\020\n\010totalExp\030\t \001(\r\022\r\n\005"
    "asset\030\n \001(\r\022\022\n\nbinaryData\030\013 \001(\014\022\027\n\017creat"
    "eTimeInSec\030\014 \001(\r\022\024\n\006isOpen\030\r \001(\010:\004true\"B"
    "\n\013AllClubData\0223\n\014clubDataList\030\001 \003(\0132\035.pr"
    "otocol.club.CreateClubData\"B\n\rClubLogBin"
    "ary\022\017\n\007logType\030\001 \001(\r\022\017\n\007logTime\030\002 \001(\r\022\017\n"
    "\007clubLog\030\003 \001(\t\"\254\001\n\nClubBinary\022\030\n\020activeD"
    "egreeWeek\030\001 \001(\r\022\025\n\rsaveTimeInSec\030\002 \001(\r\022\037"
    "\n\027lastChangeNameTimeInSec\030\003 \001(\r\022\027\n\017activ"
    "eDegreeDay\030\004 \001(\r\0223\n\rclubLogBinary\030\005 \003(\0132"
    "\034.protocol.club.ClubLogBinary\"\275\001\n\014ClubSa"
    "veData\022\n\n\002id\030\001 \002(\r\022\017\n\007ownerID\030\002 \001(\r\022\r\n\005l"
    "evel\030\003 \001(\r\022\017\n\007currExp\030\004 \001(\r\022\020\n\010totalExp\030"
    "\005 \001(\r\022\017\n\007contact\030\006 \001(\t\022\016\n\006notice\030\007 \001(\t\022\022"
    "\n\nbinaryData\030\010 \001(\014\022\r\n\005asset\030\t \001(\r\022\014\n\004ope"
    "n\030\n \001(\r\022\014\n\004name\030\013 \001(\t", 821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/Proto/Club.proto", &protobuf_RegisterTypes);
  CreateClubData::default_instance_ = new CreateClubData();
  AllClubData::default_instance_ = new AllClubData();
  ClubLogBinary::default_instance_ = new ClubLogBinary();
  ClubBinary::default_instance_ = new ClubBinary();
  ClubSaveData::default_instance_ = new ClubSaveData();
  CreateClubData::default_instance_->InitAsDefaultInstance();
  AllClubData::default_instance_->InitAsDefaultInstance();
  ClubLogBinary::default_instance_->InitAsDefaultInstance();
  ClubBinary::default_instance_->InitAsDefaultInstance();
  ClubSaveData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fProto_2fClub_2eproto {
  StaticDescriptorInitializer_protocol_2fProto_2fClub_2eproto() {
    protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  }
} static_descriptor_initializer_protocol_2fProto_2fClub_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateClubData::kOwnerIDFieldNumber;
const int CreateClubData::kIdFieldNumber;
const int CreateClubData::kClubFlagFieldNumber;
const int CreateClubData::kNameFieldNumber;
const int CreateClubData::kContactFieldNumber;
const int CreateClubData::kNoticeFieldNumber;
const int CreateClubData::kLevelFieldNumber;
const int CreateClubData::kCurrExpFieldNumber;
const int CreateClubData::kTotalExpFieldNumber;
const int CreateClubData::kAssetFieldNumber;
const int CreateClubData::kBinaryDataFieldNumber;
const int CreateClubData::kCreateTimeInSecFieldNumber;
const int CreateClubData::kIsOpenFieldNumber;
#endif  // !_MSC_VER

CreateClubData::CreateClubData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateClubData::InitAsDefaultInstance() {
}

CreateClubData::CreateClubData(const CreateClubData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateClubData::SharedCtor() {
  _cached_size_ = 0;
  ownerid_ = 0u;
  id_ = 0u;
  clubflag_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  currexp_ = 0u;
  totalexp_ = 0u;
  asset_ = 0u;
  binarydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtimeinsec_ = 0u;
  isopen_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateClubData::~CreateClubData() {
  SharedDtor();
}

void CreateClubData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
    delete binarydata_;
  }
  if (this != default_instance_) {
  }
}

void CreateClubData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateClubData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateClubData_descriptor_;
}

const CreateClubData& CreateClubData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  return *default_instance_;
}

CreateClubData* CreateClubData::default_instance_ = NULL;

CreateClubData* CreateClubData::New() const {
  return new CreateClubData;
}

void CreateClubData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ownerid_ = 0u;
    id_ = 0u;
    clubflag_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_contact()) {
      if (contact_ != &::google::protobuf::internal::kEmptyString) {
        contact_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    level_ = 0u;
    currexp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    totalexp_ = 0u;
    asset_ = 0u;
    if (has_binarydata()) {
      if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
        binarydata_->clear();
      }
    }
    createtimeinsec_ = 0u;
    isopen_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateClubData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ownerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clubFlag;
        break;
      }

      // required uint32 clubFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clubflag_)));
          set_has_clubflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_contact;
        break;
      }

      // required string contact = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact().data(), this->contact().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notice;
        break;
      }

      // required string notice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_currExp;
        break;
      }

      // optional uint32 currExp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currexp_)));
          set_has_currexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_totalExp;
        break;
      }

      // optional uint32 totalExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_asset;
        break;
      }

      // optional uint32 asset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_)));
          set_has_asset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_binaryData;
        break;
      }

      // optional bytes binaryData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binaryData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binarydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_createTimeInSec;
        break;
      }

      // optional uint32 createTimeInSec = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtimeinsec_)));
          set_has_createtimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isOpen;
        break;
      }

      // optional bool isOpen = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateClubData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ownerID = 1;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ownerid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 clubFlag = 3;
  if (has_clubflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clubflag(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required string contact = 5;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->contact(), output);
  }

  // required string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->notice(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 currExp = 8;
  if (has_currexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->currexp(), output);
  }

  // optional uint32 totalExp = 9;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->totalexp(), output);
  }

  // optional uint32 asset = 10;
  if (has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->asset(), output);
  }

  // optional bytes binaryData = 11;
  if (has_binarydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->binarydata(), output);
  }

  // optional uint32 createTimeInSec = 12;
  if (has_createtimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->createtimeinsec(), output);
  }

  // optional bool isOpen = 13 [default = true];
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateClubData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ownerID = 1;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ownerid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 clubFlag = 3;
  if (has_clubflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clubflag(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string contact = 5;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->contact(), target);
  }

  // required string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notice(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 currExp = 8;
  if (has_currexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->currexp(), target);
  }

  // optional uint32 totalExp = 9;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->totalexp(), target);
  }

  // optional uint32 asset = 10;
  if (has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->asset(), target);
  }

  // optional bytes binaryData = 11;
  if (has_binarydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->binarydata(), target);
  }

  // optional uint32 createTimeInSec = 12;
  if (has_createtimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->createtimeinsec(), target);
  }

  // optional bool isOpen = 13 [default = true];
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateClubData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ownerID = 1;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 clubFlag = 3;
    if (has_clubflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clubflag());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string contact = 5;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact());
    }

    // required string notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 currExp = 8;
    if (has_currexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 totalExp = 9;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalexp());
    }

    // optional uint32 asset = 10;
    if (has_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset());
    }

    // optional bytes binaryData = 11;
    if (has_binarydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binarydata());
    }

    // optional uint32 createTimeInSec = 12;
    if (has_createtimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtimeinsec());
    }

    // optional bool isOpen = 13 [default = true];
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateClubData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateClubData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateClubData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateClubData::MergeFrom(const CreateClubData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_clubflag()) {
      set_clubflag(from.clubflag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_contact()) {
      set_contact(from.contact());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_currexp()) {
      set_currexp(from.currexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_asset()) {
      set_asset(from.asset());
    }
    if (from.has_binarydata()) {
      set_binarydata(from.binarydata());
    }
    if (from.has_createtimeinsec()) {
      set_createtimeinsec(from.createtimeinsec());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateClubData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateClubData::CopyFrom(const CreateClubData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateClubData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  return true;
}

void CreateClubData::Swap(CreateClubData* other) {
  if (other != this) {
    std::swap(ownerid_, other->ownerid_);
    std::swap(id_, other->id_);
    std::swap(clubflag_, other->clubflag_);
    std::swap(name_, other->name_);
    std::swap(contact_, other->contact_);
    std::swap(notice_, other->notice_);
    std::swap(level_, other->level_);
    std::swap(currexp_, other->currexp_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(asset_, other->asset_);
    std::swap(binarydata_, other->binarydata_);
    std::swap(createtimeinsec_, other->createtimeinsec_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateClubData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateClubData_descriptor_;
  metadata.reflection = CreateClubData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllClubData::kClubDataListFieldNumber;
#endif  // !_MSC_VER

AllClubData::AllClubData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllClubData::InitAsDefaultInstance() {
}

AllClubData::AllClubData(const AllClubData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllClubData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllClubData::~AllClubData() {
  SharedDtor();
}

void AllClubData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllClubData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllClubData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllClubData_descriptor_;
}

const AllClubData& AllClubData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  return *default_instance_;
}

AllClubData* AllClubData::default_instance_ = NULL;

AllClubData* AllClubData::New() const {
  return new AllClubData;
}

void AllClubData::Clear() {
  clubdatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllClubData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.club.CreateClubData clubDataList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clubdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_clubDataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllClubData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.club.CreateClubData clubDataList = 1;
  for (int i = 0; i < this->clubdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clubdatalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllClubData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.club.CreateClubData clubDataList = 1;
  for (int i = 0; i < this->clubdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clubdatalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllClubData::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.club.CreateClubData clubDataList = 1;
  total_size += 1 * this->clubdatalist_size();
  for (int i = 0; i < this->clubdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clubdatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllClubData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllClubData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllClubData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllClubData::MergeFrom(const AllClubData& from) {
  GOOGLE_CHECK_NE(&from, this);
  clubdatalist_.MergeFrom(from.clubdatalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllClubData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllClubData::CopyFrom(const AllClubData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllClubData::IsInitialized() const {

  for (int i = 0; i < clubdatalist_size(); i++) {
    if (!this->clubdatalist(i).IsInitialized()) return false;
  }
  return true;
}

void AllClubData::Swap(AllClubData* other) {
  if (other != this) {
    clubdatalist_.Swap(&other->clubdatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllClubData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllClubData_descriptor_;
  metadata.reflection = AllClubData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubLogBinary::kLogTypeFieldNumber;
const int ClubLogBinary::kLogTimeFieldNumber;
const int ClubLogBinary::kClubLogFieldNumber;
#endif  // !_MSC_VER

ClubLogBinary::ClubLogBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClubLogBinary::InitAsDefaultInstance() {
}

ClubLogBinary::ClubLogBinary(const ClubLogBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClubLogBinary::SharedCtor() {
  _cached_size_ = 0;
  logtype_ = 0u;
  logtime_ = 0u;
  clublog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubLogBinary::~ClubLogBinary() {
  SharedDtor();
}

void ClubLogBinary::SharedDtor() {
  if (clublog_ != &::google::protobuf::internal::kEmptyString) {
    delete clublog_;
  }
  if (this != default_instance_) {
  }
}

void ClubLogBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubLogBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubLogBinary_descriptor_;
}

const ClubLogBinary& ClubLogBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  return *default_instance_;
}

ClubLogBinary* ClubLogBinary::default_instance_ = NULL;

ClubLogBinary* ClubLogBinary::New() const {
  return new ClubLogBinary;
}

void ClubLogBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logtype_ = 0u;
    logtime_ = 0u;
    if (has_clublog()) {
      if (clublog_ != &::google::protobuf::internal::kEmptyString) {
        clublog_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubLogBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logtype_)));
          set_has_logtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logTime;
        break;
      }

      // optional uint32 logTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logtime_)));
          set_has_logtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clubLog;
        break;
      }

      // optional string clubLog = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clublog()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clublog().data(), this->clublog().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClubLogBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 logType = 1;
  if (has_logtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logtype(), output);
  }

  // optional uint32 logTime = 2;
  if (has_logtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logtime(), output);
  }

  // optional string clubLog = 3;
  if (has_clublog()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clublog().data(), this->clublog().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clublog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClubLogBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 logType = 1;
  if (has_logtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logtype(), target);
  }

  // optional uint32 logTime = 2;
  if (has_logtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logtime(), target);
  }

  // optional string clubLog = 3;
  if (has_clublog()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clublog().data(), this->clublog().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clublog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClubLogBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 logType = 1;
    if (has_logtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logtype());
    }

    // optional uint32 logTime = 2;
    if (has_logtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logtime());
    }

    // optional string clubLog = 3;
    if (has_clublog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clublog());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubLogBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubLogBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubLogBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubLogBinary::MergeFrom(const ClubLogBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logtype()) {
      set_logtype(from.logtype());
    }
    if (from.has_logtime()) {
      set_logtime(from.logtime());
    }
    if (from.has_clublog()) {
      set_clublog(from.clublog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubLogBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubLogBinary::CopyFrom(const ClubLogBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubLogBinary::IsInitialized() const {

  return true;
}

void ClubLogBinary::Swap(ClubLogBinary* other) {
  if (other != this) {
    std::swap(logtype_, other->logtype_);
    std::swap(logtime_, other->logtime_);
    std::swap(clublog_, other->clublog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubLogBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubLogBinary_descriptor_;
  metadata.reflection = ClubLogBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubBinary::kActiveDegreeWeekFieldNumber;
const int ClubBinary::kSaveTimeInSecFieldNumber;
const int ClubBinary::kLastChangeNameTimeInSecFieldNumber;
const int ClubBinary::kActiveDegreeDayFieldNumber;
const int ClubBinary::kClubLogBinaryFieldNumber;
#endif  // !_MSC_VER

ClubBinary::ClubBinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClubBinary::InitAsDefaultInstance() {
}

ClubBinary::ClubBinary(const ClubBinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClubBinary::SharedCtor() {
  _cached_size_ = 0;
  activedegreeweek_ = 0u;
  savetimeinsec_ = 0u;
  lastchangenametimeinsec_ = 0u;
  activedegreeday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubBinary::~ClubBinary() {
  SharedDtor();
}

void ClubBinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubBinary_descriptor_;
}

const ClubBinary& ClubBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  return *default_instance_;
}

ClubBinary* ClubBinary::default_instance_ = NULL;

ClubBinary* ClubBinary::New() const {
  return new ClubBinary;
}

void ClubBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activedegreeweek_ = 0u;
    savetimeinsec_ = 0u;
    lastchangenametimeinsec_ = 0u;
    activedegreeday_ = 0u;
  }
  clublogbinary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activeDegreeWeek = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activedegreeweek_)));
          set_has_activedegreeweek();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_saveTimeInSec;
        break;
      }

      // optional uint32 saveTimeInSec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savetimeinsec_)));
          set_has_savetimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastChangeNameTimeInSec;
        break;
      }

      // optional uint32 lastChangeNameTimeInSec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastChangeNameTimeInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastchangenametimeinsec_)));
          set_has_lastchangenametimeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_activeDegreeDay;
        break;
      }

      // optional uint32 activeDegreeDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeDegreeDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activedegreeday_)));
          set_has_activedegreeday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_clubLogBinary;
        break;
      }

      // repeated .protocol.club.ClubLogBinary clubLogBinary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubLogBinary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clublogbinary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_clubLogBinary;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClubBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activeDegreeWeek = 1;
  if (has_activedegreeweek()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activedegreeweek(), output);
  }

  // optional uint32 saveTimeInSec = 2;
  if (has_savetimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->savetimeinsec(), output);
  }

  // optional uint32 lastChangeNameTimeInSec = 3;
  if (has_lastchangenametimeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastchangenametimeinsec(), output);
  }

  // optional uint32 activeDegreeDay = 4;
  if (has_activedegreeday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->activedegreeday(), output);
  }

  // repeated .protocol.club.ClubLogBinary clubLogBinary = 5;
  for (int i = 0; i < this->clublogbinary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->clublogbinary(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClubBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activeDegreeWeek = 1;
  if (has_activedegreeweek()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activedegreeweek(), target);
  }

  // optional uint32 saveTimeInSec = 2;
  if (has_savetimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->savetimeinsec(), target);
  }

  // optional uint32 lastChangeNameTimeInSec = 3;
  if (has_lastchangenametimeinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lastchangenametimeinsec(), target);
  }

  // optional uint32 activeDegreeDay = 4;
  if (has_activedegreeday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->activedegreeday(), target);
  }

  // repeated .protocol.club.ClubLogBinary clubLogBinary = 5;
  for (int i = 0; i < this->clublogbinary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->clublogbinary(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClubBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activeDegreeWeek = 1;
    if (has_activedegreeweek()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activedegreeweek());
    }

    // optional uint32 saveTimeInSec = 2;
    if (has_savetimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savetimeinsec());
    }

    // optional uint32 lastChangeNameTimeInSec = 3;
    if (has_lastchangenametimeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastchangenametimeinsec());
    }

    // optional uint32 activeDegreeDay = 4;
    if (has_activedegreeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activedegreeday());
    }

  }
  // repeated .protocol.club.ClubLogBinary clubLogBinary = 5;
  total_size += 1 * this->clublogbinary_size();
  for (int i = 0; i < this->clublogbinary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clublogbinary(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubBinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubBinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubBinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubBinary::MergeFrom(const ClubBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  clublogbinary_.MergeFrom(from.clublogbinary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activedegreeweek()) {
      set_activedegreeweek(from.activedegreeweek());
    }
    if (from.has_savetimeinsec()) {
      set_savetimeinsec(from.savetimeinsec());
    }
    if (from.has_lastchangenametimeinsec()) {
      set_lastchangenametimeinsec(from.lastchangenametimeinsec());
    }
    if (from.has_activedegreeday()) {
      set_activedegreeday(from.activedegreeday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubBinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubBinary::CopyFrom(const ClubBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubBinary::IsInitialized() const {

  return true;
}

void ClubBinary::Swap(ClubBinary* other) {
  if (other != this) {
    std::swap(activedegreeweek_, other->activedegreeweek_);
    std::swap(savetimeinsec_, other->savetimeinsec_);
    std::swap(lastchangenametimeinsec_, other->lastchangenametimeinsec_);
    std::swap(activedegreeday_, other->activedegreeday_);
    clublogbinary_.Swap(&other->clublogbinary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubBinary_descriptor_;
  metadata.reflection = ClubBinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSaveData::kIdFieldNumber;
const int ClubSaveData::kOwnerIDFieldNumber;
const int ClubSaveData::kLevelFieldNumber;
const int ClubSaveData::kCurrExpFieldNumber;
const int ClubSaveData::kTotalExpFieldNumber;
const int ClubSaveData::kContactFieldNumber;
const int ClubSaveData::kNoticeFieldNumber;
const int ClubSaveData::kBinaryDataFieldNumber;
const int ClubSaveData::kAssetFieldNumber;
const int ClubSaveData::kOpenFieldNumber;
const int ClubSaveData::kNameFieldNumber;
#endif  // !_MSC_VER

ClubSaveData::ClubSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClubSaveData::InitAsDefaultInstance() {
}

ClubSaveData::ClubSaveData(const ClubSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClubSaveData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ownerid_ = 0u;
  level_ = 0u;
  currexp_ = 0u;
  totalexp_ = 0u;
  contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  binarydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  asset_ = 0u;
  open_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSaveData::~ClubSaveData() {
  SharedDtor();
}

void ClubSaveData::SharedDtor() {
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
    delete binarydata_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClubSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSaveData_descriptor_;
}

const ClubSaveData& ClubSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  return *default_instance_;
}

ClubSaveData* ClubSaveData::default_instance_ = NULL;

ClubSaveData* ClubSaveData::New() const {
  return new ClubSaveData;
}

void ClubSaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    ownerid_ = 0u;
    level_ = 0u;
    currexp_ = 0u;
    totalexp_ = 0u;
    if (has_contact()) {
      if (contact_ != &::google::protobuf::internal::kEmptyString) {
        contact_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_binarydata()) {
      if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
        binarydata_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    asset_ = 0u;
    open_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerID;
        break;
      }

      // optional uint32 ownerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currExp;
        break;
      }

      // optional uint32 currExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currexp_)));
          set_has_currexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalExp;
        break;
      }

      // optional uint32 totalExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_contact;
        break;
      }

      // optional string contact = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact().data(), this->contact().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notice;
        break;
      }

      // optional string notice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_binaryData;
        break;
      }

      // optional bytes binaryData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binaryData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binarydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_asset;
        break;
      }

      // optional uint32 asset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_)));
          set_has_asset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_open;
        break;
      }

      // optional uint32 open = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClubSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 ownerID = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ownerid(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 currExp = 4;
  if (has_currexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->currexp(), output);
  }

  // optional uint32 totalExp = 5;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalexp(), output);
  }

  // optional string contact = 6;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->contact(), output);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->notice(), output);
  }

  // optional bytes binaryData = 8;
  if (has_binarydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->binarydata(), output);
  }

  // optional uint32 asset = 9;
  if (has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->asset(), output);
  }

  // optional uint32 open = 10;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->open(), output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClubSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 ownerID = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ownerid(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 currExp = 4;
  if (has_currexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->currexp(), target);
  }

  // optional uint32 totalExp = 5;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totalexp(), target);
  }

  // optional string contact = 6;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->contact(), target);
  }

  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->notice(), target);
  }

  // optional bytes binaryData = 8;
  if (has_binarydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->binarydata(), target);
  }

  // optional uint32 asset = 9;
  if (has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->asset(), target);
  }

  // optional uint32 open = 10;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->open(), target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClubSaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ownerID = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerid());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 currExp = 4;
    if (has_currexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currexp());
    }

    // optional uint32 totalExp = 5;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalexp());
    }

    // optional string contact = 6;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact());
    }

    // optional string notice = 7;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional bytes binaryData = 8;
    if (has_binarydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binarydata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 asset = 9;
    if (has_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset());
    }

    // optional uint32 open = 10;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open());
    }

    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSaveData::MergeFrom(const ClubSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_currexp()) {
      set_currexp(from.currexp());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_contact()) {
      set_contact(from.contact());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_binarydata()) {
      set_binarydata(from.binarydata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_asset()) {
      set_asset(from.asset());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSaveData::CopyFrom(const ClubSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSaveData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClubSaveData::Swap(ClubSaveData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(level_, other->level_);
    std::swap(currexp_, other->currexp_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(contact_, other->contact_);
    std::swap(notice_, other->notice_);
    std::swap(binarydata_, other->binarydata_);
    std::swap(asset_, other->asset_);
    std::swap(open_, other->open_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSaveData_descriptor_;
  metadata.reflection = ClubSaveData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace club
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
