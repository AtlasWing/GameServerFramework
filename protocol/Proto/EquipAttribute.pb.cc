// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/EquipAttribute.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/Proto/EquipAttribute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace item {

namespace {

const ::google::protobuf::Descriptor* EquipAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttributeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttributeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttributeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttributeList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fProto_2fEquipAttribute_2eproto() {
  protobuf_AddDesc_protocol_2fProto_2fEquipAttribute_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/Proto/EquipAttribute.proto");
  GOOGLE_CHECK(file != NULL);
  EquipAttribute_descriptor_ = file->message_type(0);
  static const int EquipAttribute_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttribute, attrdata_),
  };
  EquipAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipAttribute_descriptor_,
      EquipAttribute::default_instance_,
      EquipAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipAttribute));
  AttributeData_descriptor_ = file->message_type(1);
  static const int AttributeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, qualityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, attrvalue_),
  };
  AttributeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttributeData_descriptor_,
      AttributeData::default_instance_,
      AttributeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttributeData));
  AttributeList_descriptor_ = file->message_type(2);
  static const int AttributeList_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addattackvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addattackpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, adddefencevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, adddefencepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addmagicattackvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addmagicattackpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addmpvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addmppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addhpvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addhppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addmagicdefencevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addmagicdefencepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, subremotehurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, subclosehurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, subnormalhurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, submagichurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, hitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, appendhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, avoidvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, appendavoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, appendcrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, critdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, appendcritdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, critvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, puredamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, absorbblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, rebound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, reboundpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, killaddhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, hitaddhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, beattackaddhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, killaddmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, hitaddmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, beattackaddmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, addmovespeed_),
  };
  AttributeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttributeList_descriptor_,
      AttributeList::default_instance_,
      AttributeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttributeList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fProto_2fEquipAttribute_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipAttribute_descriptor_, &EquipAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttributeData_descriptor_, &AttributeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttributeList_descriptor_, &AttributeList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fProto_2fEquipAttribute_2eproto() {
  delete EquipAttribute::default_instance_;
  delete EquipAttribute_reflection_;
  delete AttributeData::default_instance_;
  delete AttributeData_reflection_;
  delete AttributeList::default_instance_;
  delete AttributeList_reflection_;
}

void protobuf_AddDesc_protocol_2fProto_2fEquipAttribute_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#protocol/Proto/EquipAttribute.proto\022\rp"
    "rotocol.item\"@\n\016EquipAttribute\022.\n\010attrDa"
    "ta\030\002 \003(\0132\034.protocol.item.AttributeData\"E"
    "\n\rAttributeData\022\016\n\006attrID\030\001 \002(\r\022\021\n\tquali"
    "tyID\030\002 \002(\r\022\021\n\tattrValue\030\003 \002(\r\"\260\006\n\rAttrib"
    "uteList\022\026\n\016addAttackValue\030\001 \001(\r\022\030\n\020addAt"
    "tackPercent\030\002 \001(\r\022\027\n\017addDefenceValue\030\003 \001"
    "(\r\022\031\n\021addDefencePercent\030\004 \001(\r\022\033\n\023addMagi"
    "cAttackValue\030\005 \001(\r\022\035\n\025addMagicAttackPerc"
    "ent\030\006 \001(\r\022\022\n\naddMPValue\030\007 \001(\r\022\024\n\014addMPPe"
    "rcent\030\010 \001(\r\022\022\n\naddHPValue\030\t \001(\r\022\024\n\014addHP"
    "Percent\030\n \001(\r\022\034\n\024addMagicDefenceValue\030\013 "
    "\001(\r\022\036\n\026addMagicDefencePercent\030\014 \001(\r\022\025\n\rs"
    "ubRemoteHurt\030\r \001(\r\022\024\n\014subCloseHurt\030\016 \001(\r"
    "\022\025\n\rsubNormalHurt\030\017 \001(\r\022\024\n\014subMagicHurt\030"
    "\020 \001(\r\022\020\n\010hitValue\030\021 \001(\r\022\021\n\tappendHit\030\022 \001"
    "(\r\022\022\n\navoidValue\030\023 \001(\r\022\023\n\013appendAvoid\030\024 "
    "\001(\r\022\014\n\004crit\030\025 \001(\r\022\022\n\nappendCrit\030\026 \001(\r\022\023\n"
    "\013critDefence\030\027 \001(\r\022\031\n\021appendCritDefence\030"
    "\030 \001(\r\022\021\n\tcritValue\030\031 \001(\r\022\022\n\npureDamage\030\032"
    " \001(\r\022\023\n\013absorbBlood\030\033 \001(\r\022\017\n\007rebound\030\034 \001"
    "(\r\022\026\n\016reboundPercent\030\035 \001(\r\022\021\n\tkillAddHP\030"
    "\036 \001(\r\022\020\n\010hitAddHP\030\037 \001(\r\022\025\n\rbeAttackAddHP"
    "\030  \001(\r\022\021\n\tkillAddMP\030! \001(\r\022\020\n\010hitAddMP\030\" "
    "\001(\r\022\025\n\rbeAttackAddMP\030# \001(\r\022\024\n\014addMoveSpe"
    "ed\030$ \001(\r", 1008);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/Proto/EquipAttribute.proto", &protobuf_RegisterTypes);
  EquipAttribute::default_instance_ = new EquipAttribute();
  AttributeData::default_instance_ = new AttributeData();
  AttributeList::default_instance_ = new AttributeList();
  EquipAttribute::default_instance_->InitAsDefaultInstance();
  AttributeData::default_instance_->InitAsDefaultInstance();
  AttributeList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fProto_2fEquipAttribute_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fProto_2fEquipAttribute_2eproto {
  StaticDescriptorInitializer_protocol_2fProto_2fEquipAttribute_2eproto() {
    protobuf_AddDesc_protocol_2fProto_2fEquipAttribute_2eproto();
  }
} static_descriptor_initializer_protocol_2fProto_2fEquipAttribute_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipAttribute::kAttrDataFieldNumber;
#endif  // !_MSC_VER

EquipAttribute::EquipAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipAttribute::InitAsDefaultInstance() {
}

EquipAttribute::EquipAttribute(const EquipAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipAttribute::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipAttribute::~EquipAttribute() {
  SharedDtor();
}

void EquipAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipAttribute_descriptor_;
}

const EquipAttribute& EquipAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fEquipAttribute_2eproto();
  return *default_instance_;
}

EquipAttribute* EquipAttribute::default_instance_ = NULL;

EquipAttribute* EquipAttribute::New() const {
  return new EquipAttribute;
}

void EquipAttribute::Clear() {
  attrdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.item.AttributeData attrData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attrData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocol.item.AttributeData attrData = 2;
  for (int i = 0; i < this->attrdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocol.item.AttributeData attrData = 2;
  for (int i = 0; i < this->attrdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipAttribute::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.item.AttributeData attrData = 2;
  total_size += 1 * this->attrdata_size();
  for (int i = 0; i < this->attrdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipAttribute::MergeFrom(const EquipAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrdata_.MergeFrom(from.attrdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipAttribute::CopyFrom(const EquipAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipAttribute::IsInitialized() const {

  for (int i = 0; i < attrdata_size(); i++) {
    if (!this->attrdata(i).IsInitialized()) return false;
  }
  return true;
}

void EquipAttribute::Swap(EquipAttribute* other) {
  if (other != this) {
    attrdata_.Swap(&other->attrdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipAttribute_descriptor_;
  metadata.reflection = EquipAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttributeData::kAttrIDFieldNumber;
const int AttributeData::kQualityIDFieldNumber;
const int AttributeData::kAttrValueFieldNumber;
#endif  // !_MSC_VER

AttributeData::AttributeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttributeData::InitAsDefaultInstance() {
}

AttributeData::AttributeData(const AttributeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttributeData::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0u;
  qualityid_ = 0u;
  attrvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttributeData::~AttributeData() {
  SharedDtor();
}

void AttributeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttributeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttributeData_descriptor_;
}

const AttributeData& AttributeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fEquipAttribute_2eproto();
  return *default_instance_;
}

AttributeData* AttributeData::default_instance_ = NULL;

AttributeData* AttributeData::New() const {
  return new AttributeData;
}

void AttributeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrid_ = 0u;
    qualityid_ = 0u;
    attrvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttributeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attrID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qualityID;
        break;
      }

      // required uint32 qualityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qualityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualityid_)));
          set_has_qualityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attrValue;
        break;
      }

      // required uint32 attrValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttributeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attrID = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrid(), output);
  }

  // required uint32 qualityID = 2;
  if (has_qualityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qualityid(), output);
  }

  // required uint32 attrValue = 3;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attrvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttributeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attrID = 1;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrid(), target);
  }

  // required uint32 qualityID = 2;
  if (has_qualityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qualityid(), target);
  }

  // required uint32 attrValue = 3;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attrvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttributeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attrID = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // required uint32 qualityID = 2;
    if (has_qualityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualityid());
    }

    // required uint32 attrValue = 3;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttributeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttributeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttributeData::MergeFrom(const AttributeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_qualityid()) {
      set_qualityid(from.qualityid());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttributeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeData::CopyFrom(const AttributeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AttributeData::Swap(AttributeData* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(qualityid_, other->qualityid_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttributeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttributeData_descriptor_;
  metadata.reflection = AttributeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttributeList::kAddAttackValueFieldNumber;
const int AttributeList::kAddAttackPercentFieldNumber;
const int AttributeList::kAddDefenceValueFieldNumber;
const int AttributeList::kAddDefencePercentFieldNumber;
const int AttributeList::kAddMagicAttackValueFieldNumber;
const int AttributeList::kAddMagicAttackPercentFieldNumber;
const int AttributeList::kAddMPValueFieldNumber;
const int AttributeList::kAddMPPercentFieldNumber;
const int AttributeList::kAddHPValueFieldNumber;
const int AttributeList::kAddHPPercentFieldNumber;
const int AttributeList::kAddMagicDefenceValueFieldNumber;
const int AttributeList::kAddMagicDefencePercentFieldNumber;
const int AttributeList::kSubRemoteHurtFieldNumber;
const int AttributeList::kSubCloseHurtFieldNumber;
const int AttributeList::kSubNormalHurtFieldNumber;
const int AttributeList::kSubMagicHurtFieldNumber;
const int AttributeList::kHitValueFieldNumber;
const int AttributeList::kAppendHitFieldNumber;
const int AttributeList::kAvoidValueFieldNumber;
const int AttributeList::kAppendAvoidFieldNumber;
const int AttributeList::kCritFieldNumber;
const int AttributeList::kAppendCritFieldNumber;
const int AttributeList::kCritDefenceFieldNumber;
const int AttributeList::kAppendCritDefenceFieldNumber;
const int AttributeList::kCritValueFieldNumber;
const int AttributeList::kPureDamageFieldNumber;
const int AttributeList::kAbsorbBloodFieldNumber;
const int AttributeList::kReboundFieldNumber;
const int AttributeList::kReboundPercentFieldNumber;
const int AttributeList::kKillAddHPFieldNumber;
const int AttributeList::kHitAddHPFieldNumber;
const int AttributeList::kBeAttackAddHPFieldNumber;
const int AttributeList::kKillAddMPFieldNumber;
const int AttributeList::kHitAddMPFieldNumber;
const int AttributeList::kBeAttackAddMPFieldNumber;
const int AttributeList::kAddMoveSpeedFieldNumber;
#endif  // !_MSC_VER

AttributeList::AttributeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttributeList::InitAsDefaultInstance() {
}

AttributeList::AttributeList(const AttributeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttributeList::SharedCtor() {
  _cached_size_ = 0;
  addattackvalue_ = 0u;
  addattackpercent_ = 0u;
  adddefencevalue_ = 0u;
  adddefencepercent_ = 0u;
  addmagicattackvalue_ = 0u;
  addmagicattackpercent_ = 0u;
  addmpvalue_ = 0u;
  addmppercent_ = 0u;
  addhpvalue_ = 0u;
  addhppercent_ = 0u;
  addmagicdefencevalue_ = 0u;
  addmagicdefencepercent_ = 0u;
  subremotehurt_ = 0u;
  subclosehurt_ = 0u;
  subnormalhurt_ = 0u;
  submagichurt_ = 0u;
  hitvalue_ = 0u;
  appendhit_ = 0u;
  avoidvalue_ = 0u;
  appendavoid_ = 0u;
  crit_ = 0u;
  appendcrit_ = 0u;
  critdefence_ = 0u;
  appendcritdefence_ = 0u;
  critvalue_ = 0u;
  puredamage_ = 0u;
  absorbblood_ = 0u;
  rebound_ = 0u;
  reboundpercent_ = 0u;
  killaddhp_ = 0u;
  hitaddhp_ = 0u;
  beattackaddhp_ = 0u;
  killaddmp_ = 0u;
  hitaddmp_ = 0u;
  beattackaddmp_ = 0u;
  addmovespeed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttributeList::~AttributeList() {
  SharedDtor();
}

void AttributeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttributeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttributeList_descriptor_;
}

const AttributeList& AttributeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fEquipAttribute_2eproto();
  return *default_instance_;
}

AttributeList* AttributeList::default_instance_ = NULL;

AttributeList* AttributeList::New() const {
  return new AttributeList;
}

void AttributeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addattackvalue_ = 0u;
    addattackpercent_ = 0u;
    adddefencevalue_ = 0u;
    adddefencepercent_ = 0u;
    addmagicattackvalue_ = 0u;
    addmagicattackpercent_ = 0u;
    addmpvalue_ = 0u;
    addmppercent_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    addhpvalue_ = 0u;
    addhppercent_ = 0u;
    addmagicdefencevalue_ = 0u;
    addmagicdefencepercent_ = 0u;
    subremotehurt_ = 0u;
    subclosehurt_ = 0u;
    subnormalhurt_ = 0u;
    submagichurt_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hitvalue_ = 0u;
    appendhit_ = 0u;
    avoidvalue_ = 0u;
    appendavoid_ = 0u;
    crit_ = 0u;
    appendcrit_ = 0u;
    critdefence_ = 0u;
    appendcritdefence_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    critvalue_ = 0u;
    puredamage_ = 0u;
    absorbblood_ = 0u;
    rebound_ = 0u;
    reboundpercent_ = 0u;
    killaddhp_ = 0u;
    hitaddhp_ = 0u;
    beattackaddhp_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    killaddmp_ = 0u;
    hitaddmp_ = 0u;
    beattackaddmp_ = 0u;
    addmovespeed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttributeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 addAttackValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addattackvalue_)));
          set_has_addattackvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addAttackPercent;
        break;
      }

      // optional uint32 addAttackPercent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addAttackPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addattackpercent_)));
          set_has_addattackpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addDefenceValue;
        break;
      }

      // optional uint32 addDefenceValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDefenceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddefencevalue_)));
          set_has_adddefencevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addDefencePercent;
        break;
      }

      // optional uint32 addDefencePercent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDefencePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddefencepercent_)));
          set_has_adddefencepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addMagicAttackValue;
        break;
      }

      // optional uint32 addMagicAttackValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMagicAttackValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmagicattackvalue_)));
          set_has_addmagicattackvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_addMagicAttackPercent;
        break;
      }

      // optional uint32 addMagicAttackPercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMagicAttackPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmagicattackpercent_)));
          set_has_addmagicattackpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_addMPValue;
        break;
      }

      // optional uint32 addMPValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMPValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmpvalue_)));
          set_has_addmpvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_addMPPercent;
        break;
      }

      // optional uint32 addMPPercent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMPPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmppercent_)));
          set_has_addmppercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_addHPValue;
        break;
      }

      // optional uint32 addHPValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHPValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addhpvalue_)));
          set_has_addhpvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_addHPPercent;
        break;
      }

      // optional uint32 addHPPercent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHPPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addhppercent_)));
          set_has_addhppercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_addMagicDefenceValue;
        break;
      }

      // optional uint32 addMagicDefenceValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMagicDefenceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmagicdefencevalue_)));
          set_has_addmagicdefencevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_addMagicDefencePercent;
        break;
      }

      // optional uint32 addMagicDefencePercent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMagicDefencePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmagicdefencepercent_)));
          set_has_addmagicdefencepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_subRemoteHurt;
        break;
      }

      // optional uint32 subRemoteHurt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subRemoteHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subremotehurt_)));
          set_has_subremotehurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_subCloseHurt;
        break;
      }

      // optional uint32 subCloseHurt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subCloseHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subclosehurt_)));
          set_has_subclosehurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_subNormalHurt;
        break;
      }

      // optional uint32 subNormalHurt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subNormalHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subnormalhurt_)));
          set_has_subnormalhurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_subMagicHurt;
        break;
      }

      // optional uint32 subMagicHurt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subMagicHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submagichurt_)));
          set_has_submagichurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hitValue;
        break;
      }

      // optional uint32 hitValue = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitvalue_)));
          set_has_hitvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_appendHit;
        break;
      }

      // optional uint32 appendHit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appendHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appendhit_)));
          set_has_appendhit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_avoidValue;
        break;
      }

      // optional uint32 avoidValue = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidvalue_)));
          set_has_avoidvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_appendAvoid;
        break;
      }

      // optional uint32 appendAvoid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appendAvoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appendavoid_)));
          set_has_appendavoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_crit;
        break;
      }

      // optional uint32 crit = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_appendCrit;
        break;
      }

      // optional uint32 appendCrit = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appendCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appendcrit_)));
          set_has_appendcrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_critDefence;
        break;
      }

      // optional uint32 critDefence = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critdefence_)));
          set_has_critdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_appendCritDefence;
        break;
      }

      // optional uint32 appendCritDefence = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appendCritDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appendcritdefence_)));
          set_has_appendcritdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_critValue;
        break;
      }

      // optional uint32 critValue = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critvalue_)));
          set_has_critvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_pureDamage;
        break;
      }

      // optional uint32 pureDamage = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pureDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &puredamage_)));
          set_has_puredamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_absorbBlood;
        break;
      }

      // optional uint32 absorbBlood = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_absorbBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absorbblood_)));
          set_has_absorbblood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_rebound;
        break;
      }

      // optional uint32 rebound = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebound_)));
          set_has_rebound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_reboundPercent;
        break;
      }

      // optional uint32 reboundPercent = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reboundPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reboundpercent_)));
          set_has_reboundpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_killAddHP;
        break;
      }

      // optional uint32 killAddHP = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killAddHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killaddhp_)));
          set_has_killaddhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_hitAddHP;
        break;
      }

      // optional uint32 hitAddHP = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitAddHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitaddhp_)));
          set_has_hitaddhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_beAttackAddHP;
        break;
      }

      // optional uint32 beAttackAddHP = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beAttackAddHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beattackaddhp_)));
          set_has_beattackaddhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_killAddMP;
        break;
      }

      // optional uint32 killAddMP = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killAddMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killaddmp_)));
          set_has_killaddmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_hitAddMP;
        break;
      }

      // optional uint32 hitAddMP = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitAddMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitaddmp_)));
          set_has_hitaddmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_beAttackAddMP;
        break;
      }

      // optional uint32 beAttackAddMP = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beAttackAddMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beattackaddmp_)));
          set_has_beattackaddmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_addMoveSpeed;
        break;
      }

      // optional uint32 addMoveSpeed = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addMoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmovespeed_)));
          set_has_addmovespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttributeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 addAttackValue = 1;
  if (has_addattackvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->addattackvalue(), output);
  }

  // optional uint32 addAttackPercent = 2;
  if (has_addattackpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addattackpercent(), output);
  }

  // optional uint32 addDefenceValue = 3;
  if (has_adddefencevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->adddefencevalue(), output);
  }

  // optional uint32 addDefencePercent = 4;
  if (has_adddefencepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->adddefencepercent(), output);
  }

  // optional uint32 addMagicAttackValue = 5;
  if (has_addmagicattackvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addmagicattackvalue(), output);
  }

  // optional uint32 addMagicAttackPercent = 6;
  if (has_addmagicattackpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addmagicattackpercent(), output);
  }

  // optional uint32 addMPValue = 7;
  if (has_addmpvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->addmpvalue(), output);
  }

  // optional uint32 addMPPercent = 8;
  if (has_addmppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->addmppercent(), output);
  }

  // optional uint32 addHPValue = 9;
  if (has_addhpvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->addhpvalue(), output);
  }

  // optional uint32 addHPPercent = 10;
  if (has_addhppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->addhppercent(), output);
  }

  // optional uint32 addMagicDefenceValue = 11;
  if (has_addmagicdefencevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->addmagicdefencevalue(), output);
  }

  // optional uint32 addMagicDefencePercent = 12;
  if (has_addmagicdefencepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->addmagicdefencepercent(), output);
  }

  // optional uint32 subRemoteHurt = 13;
  if (has_subremotehurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->subremotehurt(), output);
  }

  // optional uint32 subCloseHurt = 14;
  if (has_subclosehurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->subclosehurt(), output);
  }

  // optional uint32 subNormalHurt = 15;
  if (has_subnormalhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->subnormalhurt(), output);
  }

  // optional uint32 subMagicHurt = 16;
  if (has_submagichurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->submagichurt(), output);
  }

  // optional uint32 hitValue = 17;
  if (has_hitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->hitvalue(), output);
  }

  // optional uint32 appendHit = 18;
  if (has_appendhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->appendhit(), output);
  }

  // optional uint32 avoidValue = 19;
  if (has_avoidvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->avoidvalue(), output);
  }

  // optional uint32 appendAvoid = 20;
  if (has_appendavoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->appendavoid(), output);
  }

  // optional uint32 crit = 21;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->crit(), output);
  }

  // optional uint32 appendCrit = 22;
  if (has_appendcrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->appendcrit(), output);
  }

  // optional uint32 critDefence = 23;
  if (has_critdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->critdefence(), output);
  }

  // optional uint32 appendCritDefence = 24;
  if (has_appendcritdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->appendcritdefence(), output);
  }

  // optional uint32 critValue = 25;
  if (has_critvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->critvalue(), output);
  }

  // optional uint32 pureDamage = 26;
  if (has_puredamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->puredamage(), output);
  }

  // optional uint32 absorbBlood = 27;
  if (has_absorbblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->absorbblood(), output);
  }

  // optional uint32 rebound = 28;
  if (has_rebound()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->rebound(), output);
  }

  // optional uint32 reboundPercent = 29;
  if (has_reboundpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->reboundpercent(), output);
  }

  // optional uint32 killAddHP = 30;
  if (has_killaddhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->killaddhp(), output);
  }

  // optional uint32 hitAddHP = 31;
  if (has_hitaddhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->hitaddhp(), output);
  }

  // optional uint32 beAttackAddHP = 32;
  if (has_beattackaddhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->beattackaddhp(), output);
  }

  // optional uint32 killAddMP = 33;
  if (has_killaddmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->killaddmp(), output);
  }

  // optional uint32 hitAddMP = 34;
  if (has_hitaddmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->hitaddmp(), output);
  }

  // optional uint32 beAttackAddMP = 35;
  if (has_beattackaddmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->beattackaddmp(), output);
  }

  // optional uint32 addMoveSpeed = 36;
  if (has_addmovespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->addmovespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttributeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 addAttackValue = 1;
  if (has_addattackvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->addattackvalue(), target);
  }

  // optional uint32 addAttackPercent = 2;
  if (has_addattackpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addattackpercent(), target);
  }

  // optional uint32 addDefenceValue = 3;
  if (has_adddefencevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->adddefencevalue(), target);
  }

  // optional uint32 addDefencePercent = 4;
  if (has_adddefencepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->adddefencepercent(), target);
  }

  // optional uint32 addMagicAttackValue = 5;
  if (has_addmagicattackvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addmagicattackvalue(), target);
  }

  // optional uint32 addMagicAttackPercent = 6;
  if (has_addmagicattackpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addmagicattackpercent(), target);
  }

  // optional uint32 addMPValue = 7;
  if (has_addmpvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->addmpvalue(), target);
  }

  // optional uint32 addMPPercent = 8;
  if (has_addmppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->addmppercent(), target);
  }

  // optional uint32 addHPValue = 9;
  if (has_addhpvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->addhpvalue(), target);
  }

  // optional uint32 addHPPercent = 10;
  if (has_addhppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->addhppercent(), target);
  }

  // optional uint32 addMagicDefenceValue = 11;
  if (has_addmagicdefencevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->addmagicdefencevalue(), target);
  }

  // optional uint32 addMagicDefencePercent = 12;
  if (has_addmagicdefencepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->addmagicdefencepercent(), target);
  }

  // optional uint32 subRemoteHurt = 13;
  if (has_subremotehurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->subremotehurt(), target);
  }

  // optional uint32 subCloseHurt = 14;
  if (has_subclosehurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->subclosehurt(), target);
  }

  // optional uint32 subNormalHurt = 15;
  if (has_subnormalhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->subnormalhurt(), target);
  }

  // optional uint32 subMagicHurt = 16;
  if (has_submagichurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->submagichurt(), target);
  }

  // optional uint32 hitValue = 17;
  if (has_hitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->hitvalue(), target);
  }

  // optional uint32 appendHit = 18;
  if (has_appendhit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->appendhit(), target);
  }

  // optional uint32 avoidValue = 19;
  if (has_avoidvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->avoidvalue(), target);
  }

  // optional uint32 appendAvoid = 20;
  if (has_appendavoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->appendavoid(), target);
  }

  // optional uint32 crit = 21;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->crit(), target);
  }

  // optional uint32 appendCrit = 22;
  if (has_appendcrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->appendcrit(), target);
  }

  // optional uint32 critDefence = 23;
  if (has_critdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->critdefence(), target);
  }

  // optional uint32 appendCritDefence = 24;
  if (has_appendcritdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->appendcritdefence(), target);
  }

  // optional uint32 critValue = 25;
  if (has_critvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->critvalue(), target);
  }

  // optional uint32 pureDamage = 26;
  if (has_puredamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->puredamage(), target);
  }

  // optional uint32 absorbBlood = 27;
  if (has_absorbblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->absorbblood(), target);
  }

  // optional uint32 rebound = 28;
  if (has_rebound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->rebound(), target);
  }

  // optional uint32 reboundPercent = 29;
  if (has_reboundpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->reboundpercent(), target);
  }

  // optional uint32 killAddHP = 30;
  if (has_killaddhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->killaddhp(), target);
  }

  // optional uint32 hitAddHP = 31;
  if (has_hitaddhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->hitaddhp(), target);
  }

  // optional uint32 beAttackAddHP = 32;
  if (has_beattackaddhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->beattackaddhp(), target);
  }

  // optional uint32 killAddMP = 33;
  if (has_killaddmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->killaddmp(), target);
  }

  // optional uint32 hitAddMP = 34;
  if (has_hitaddmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->hitaddmp(), target);
  }

  // optional uint32 beAttackAddMP = 35;
  if (has_beattackaddmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->beattackaddmp(), target);
  }

  // optional uint32 addMoveSpeed = 36;
  if (has_addmovespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->addmovespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttributeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 addAttackValue = 1;
    if (has_addattackvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addattackvalue());
    }

    // optional uint32 addAttackPercent = 2;
    if (has_addattackpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addattackpercent());
    }

    // optional uint32 addDefenceValue = 3;
    if (has_adddefencevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adddefencevalue());
    }

    // optional uint32 addDefencePercent = 4;
    if (has_adddefencepercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adddefencepercent());
    }

    // optional uint32 addMagicAttackValue = 5;
    if (has_addmagicattackvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmagicattackvalue());
    }

    // optional uint32 addMagicAttackPercent = 6;
    if (has_addmagicattackpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmagicattackpercent());
    }

    // optional uint32 addMPValue = 7;
    if (has_addmpvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmpvalue());
    }

    // optional uint32 addMPPercent = 8;
    if (has_addmppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmppercent());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 addHPValue = 9;
    if (has_addhpvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addhpvalue());
    }

    // optional uint32 addHPPercent = 10;
    if (has_addhppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addhppercent());
    }

    // optional uint32 addMagicDefenceValue = 11;
    if (has_addmagicdefencevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmagicdefencevalue());
    }

    // optional uint32 addMagicDefencePercent = 12;
    if (has_addmagicdefencepercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmagicdefencepercent());
    }

    // optional uint32 subRemoteHurt = 13;
    if (has_subremotehurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subremotehurt());
    }

    // optional uint32 subCloseHurt = 14;
    if (has_subclosehurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subclosehurt());
    }

    // optional uint32 subNormalHurt = 15;
    if (has_subnormalhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subnormalhurt());
    }

    // optional uint32 subMagicHurt = 16;
    if (has_submagichurt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submagichurt());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 hitValue = 17;
    if (has_hitvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitvalue());
    }

    // optional uint32 appendHit = 18;
    if (has_appendhit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appendhit());
    }

    // optional uint32 avoidValue = 19;
    if (has_avoidvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avoidvalue());
    }

    // optional uint32 appendAvoid = 20;
    if (has_appendavoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appendavoid());
    }

    // optional uint32 crit = 21;
    if (has_crit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit());
    }

    // optional uint32 appendCrit = 22;
    if (has_appendcrit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appendcrit());
    }

    // optional uint32 critDefence = 23;
    if (has_critdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critdefence());
    }

    // optional uint32 appendCritDefence = 24;
    if (has_appendcritdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appendcritdefence());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 critValue = 25;
    if (has_critvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critvalue());
    }

    // optional uint32 pureDamage = 26;
    if (has_puredamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->puredamage());
    }

    // optional uint32 absorbBlood = 27;
    if (has_absorbblood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absorbblood());
    }

    // optional uint32 rebound = 28;
    if (has_rebound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebound());
    }

    // optional uint32 reboundPercent = 29;
    if (has_reboundpercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reboundpercent());
    }

    // optional uint32 killAddHP = 30;
    if (has_killaddhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killaddhp());
    }

    // optional uint32 hitAddHP = 31;
    if (has_hitaddhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitaddhp());
    }

    // optional uint32 beAttackAddHP = 32;
    if (has_beattackaddhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beattackaddhp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 killAddMP = 33;
    if (has_killaddmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killaddmp());
    }

    // optional uint32 hitAddMP = 34;
    if (has_hitaddmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitaddmp());
    }

    // optional uint32 beAttackAddMP = 35;
    if (has_beattackaddmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beattackaddmp());
    }

    // optional uint32 addMoveSpeed = 36;
    if (has_addmovespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmovespeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttributeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttributeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttributeList::MergeFrom(const AttributeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addattackvalue()) {
      set_addattackvalue(from.addattackvalue());
    }
    if (from.has_addattackpercent()) {
      set_addattackpercent(from.addattackpercent());
    }
    if (from.has_adddefencevalue()) {
      set_adddefencevalue(from.adddefencevalue());
    }
    if (from.has_adddefencepercent()) {
      set_adddefencepercent(from.adddefencepercent());
    }
    if (from.has_addmagicattackvalue()) {
      set_addmagicattackvalue(from.addmagicattackvalue());
    }
    if (from.has_addmagicattackpercent()) {
      set_addmagicattackpercent(from.addmagicattackpercent());
    }
    if (from.has_addmpvalue()) {
      set_addmpvalue(from.addmpvalue());
    }
    if (from.has_addmppercent()) {
      set_addmppercent(from.addmppercent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_addhpvalue()) {
      set_addhpvalue(from.addhpvalue());
    }
    if (from.has_addhppercent()) {
      set_addhppercent(from.addhppercent());
    }
    if (from.has_addmagicdefencevalue()) {
      set_addmagicdefencevalue(from.addmagicdefencevalue());
    }
    if (from.has_addmagicdefencepercent()) {
      set_addmagicdefencepercent(from.addmagicdefencepercent());
    }
    if (from.has_subremotehurt()) {
      set_subremotehurt(from.subremotehurt());
    }
    if (from.has_subclosehurt()) {
      set_subclosehurt(from.subclosehurt());
    }
    if (from.has_subnormalhurt()) {
      set_subnormalhurt(from.subnormalhurt());
    }
    if (from.has_submagichurt()) {
      set_submagichurt(from.submagichurt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hitvalue()) {
      set_hitvalue(from.hitvalue());
    }
    if (from.has_appendhit()) {
      set_appendhit(from.appendhit());
    }
    if (from.has_avoidvalue()) {
      set_avoidvalue(from.avoidvalue());
    }
    if (from.has_appendavoid()) {
      set_appendavoid(from.appendavoid());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_appendcrit()) {
      set_appendcrit(from.appendcrit());
    }
    if (from.has_critdefence()) {
      set_critdefence(from.critdefence());
    }
    if (from.has_appendcritdefence()) {
      set_appendcritdefence(from.appendcritdefence());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_critvalue()) {
      set_critvalue(from.critvalue());
    }
    if (from.has_puredamage()) {
      set_puredamage(from.puredamage());
    }
    if (from.has_absorbblood()) {
      set_absorbblood(from.absorbblood());
    }
    if (from.has_rebound()) {
      set_rebound(from.rebound());
    }
    if (from.has_reboundpercent()) {
      set_reboundpercent(from.reboundpercent());
    }
    if (from.has_killaddhp()) {
      set_killaddhp(from.killaddhp());
    }
    if (from.has_hitaddhp()) {
      set_hitaddhp(from.hitaddhp());
    }
    if (from.has_beattackaddhp()) {
      set_beattackaddhp(from.beattackaddhp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_killaddmp()) {
      set_killaddmp(from.killaddmp());
    }
    if (from.has_hitaddmp()) {
      set_hitaddmp(from.hitaddmp());
    }
    if (from.has_beattackaddmp()) {
      set_beattackaddmp(from.beattackaddmp());
    }
    if (from.has_addmovespeed()) {
      set_addmovespeed(from.addmovespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttributeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeList::CopyFrom(const AttributeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeList::IsInitialized() const {

  return true;
}

void AttributeList::Swap(AttributeList* other) {
  if (other != this) {
    std::swap(addattackvalue_, other->addattackvalue_);
    std::swap(addattackpercent_, other->addattackpercent_);
    std::swap(adddefencevalue_, other->adddefencevalue_);
    std::swap(adddefencepercent_, other->adddefencepercent_);
    std::swap(addmagicattackvalue_, other->addmagicattackvalue_);
    std::swap(addmagicattackpercent_, other->addmagicattackpercent_);
    std::swap(addmpvalue_, other->addmpvalue_);
    std::swap(addmppercent_, other->addmppercent_);
    std::swap(addhpvalue_, other->addhpvalue_);
    std::swap(addhppercent_, other->addhppercent_);
    std::swap(addmagicdefencevalue_, other->addmagicdefencevalue_);
    std::swap(addmagicdefencepercent_, other->addmagicdefencepercent_);
    std::swap(subremotehurt_, other->subremotehurt_);
    std::swap(subclosehurt_, other->subclosehurt_);
    std::swap(subnormalhurt_, other->subnormalhurt_);
    std::swap(submagichurt_, other->submagichurt_);
    std::swap(hitvalue_, other->hitvalue_);
    std::swap(appendhit_, other->appendhit_);
    std::swap(avoidvalue_, other->avoidvalue_);
    std::swap(appendavoid_, other->appendavoid_);
    std::swap(crit_, other->crit_);
    std::swap(appendcrit_, other->appendcrit_);
    std::swap(critdefence_, other->critdefence_);
    std::swap(appendcritdefence_, other->appendcritdefence_);
    std::swap(critvalue_, other->critvalue_);
    std::swap(puredamage_, other->puredamage_);
    std::swap(absorbblood_, other->absorbblood_);
    std::swap(rebound_, other->rebound_);
    std::swap(reboundpercent_, other->reboundpercent_);
    std::swap(killaddhp_, other->killaddhp_);
    std::swap(hitaddhp_, other->hitaddhp_);
    std::swap(beattackaddhp_, other->beattackaddhp_);
    std::swap(killaddmp_, other->killaddmp_);
    std::swap(hitaddmp_, other->hitaddmp_);
    std::swap(beattackaddmp_, other->beattackaddmp_);
    std::swap(addmovespeed_, other->addmovespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttributeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttributeList_descriptor_;
  metadata.reflection = AttributeList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace item
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
