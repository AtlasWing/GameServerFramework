// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/Club.proto

#ifndef PROTOBUF_protocol_2fProto_2fClub_2eproto__INCLUDED
#define PROTOBUF_protocol_2fProto_2fClub_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol/Proto/UserData.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {
namespace club {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
void protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto();
void protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto();

class CreateClubData;
class AllClubData;
class ClubLogBinary;
class ClubBinary;
class ClubSaveData;

// ===================================================================

class CreateClubData : public ::google::protobuf::Message {
 public:
  CreateClubData();
  virtual ~CreateClubData();

  CreateClubData(const CreateClubData& from);

  inline CreateClubData& operator=(const CreateClubData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateClubData& default_instance();

  void Swap(CreateClubData* other);

  // implements Message ----------------------------------------------

  CreateClubData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateClubData& from);
  void MergeFrom(const CreateClubData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ownerID = 1;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIDFieldNumber = 1;
  inline ::google::protobuf::uint32 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 clubFlag = 3;
  inline bool has_clubflag() const;
  inline void clear_clubflag();
  static const int kClubFlagFieldNumber = 3;
  inline ::google::protobuf::uint32 clubflag() const;
  inline void set_clubflag(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string contact = 5;
  inline bool has_contact() const;
  inline void clear_contact();
  static const int kContactFieldNumber = 5;
  inline const ::std::string& contact() const;
  inline void set_contact(const ::std::string& value);
  inline void set_contact(const char* value);
  inline void set_contact(const char* value, size_t size);
  inline ::std::string* mutable_contact();
  inline ::std::string* release_contact();
  inline void set_allocated_contact(::std::string* contact);

  // required string notice = 6;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 6;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 currExp = 8;
  inline bool has_currexp() const;
  inline void clear_currexp();
  static const int kCurrExpFieldNumber = 8;
  inline ::google::protobuf::uint32 currexp() const;
  inline void set_currexp(::google::protobuf::uint32 value);

  // optional uint32 totalExp = 9;
  inline bool has_totalexp() const;
  inline void clear_totalexp();
  static const int kTotalExpFieldNumber = 9;
  inline ::google::protobuf::uint32 totalexp() const;
  inline void set_totalexp(::google::protobuf::uint32 value);

  // optional uint32 asset = 10;
  inline bool has_asset() const;
  inline void clear_asset();
  static const int kAssetFieldNumber = 10;
  inline ::google::protobuf::uint32 asset() const;
  inline void set_asset(::google::protobuf::uint32 value);

  // optional bytes binaryData = 11;
  inline bool has_binarydata() const;
  inline void clear_binarydata();
  static const int kBinaryDataFieldNumber = 11;
  inline const ::std::string& binarydata() const;
  inline void set_binarydata(const ::std::string& value);
  inline void set_binarydata(const char* value);
  inline void set_binarydata(const void* value, size_t size);
  inline ::std::string* mutable_binarydata();
  inline ::std::string* release_binarydata();
  inline void set_allocated_binarydata(::std::string* binarydata);

  // optional uint32 createTimeInSec = 12;
  inline bool has_createtimeinsec() const;
  inline void clear_createtimeinsec();
  static const int kCreateTimeInSecFieldNumber = 12;
  inline ::google::protobuf::uint32 createtimeinsec() const;
  inline void set_createtimeinsec(::google::protobuf::uint32 value);

  // optional bool isOpen = 13 [default = true];
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 13;
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // @@protoc_insertion_point(class_scope:protocol.club.CreateClubData)
 private:
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_clubflag();
  inline void clear_has_clubflag();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_contact();
  inline void clear_has_contact();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_currexp();
  inline void clear_has_currexp();
  inline void set_has_totalexp();
  inline void clear_has_totalexp();
  inline void set_has_asset();
  inline void clear_has_asset();
  inline void set_has_binarydata();
  inline void clear_has_binarydata();
  inline void set_has_createtimeinsec();
  inline void clear_has_createtimeinsec();
  inline void set_has_isopen();
  inline void clear_has_isopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ownerid_;
  ::google::protobuf::uint32 id_;
  ::std::string* name_;
  ::std::string* contact_;
  ::google::protobuf::uint32 clubflag_;
  ::google::protobuf::uint32 level_;
  ::std::string* notice_;
  ::google::protobuf::uint32 currexp_;
  ::google::protobuf::uint32 totalexp_;
  ::std::string* binarydata_;
  ::google::protobuf::uint32 asset_;
  ::google::protobuf::uint32 createtimeinsec_;
  bool isopen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto();

  void InitAsDefaultInstance();
  static CreateClubData* default_instance_;
};
// -------------------------------------------------------------------

class AllClubData : public ::google::protobuf::Message {
 public:
  AllClubData();
  virtual ~AllClubData();

  AllClubData(const AllClubData& from);

  inline AllClubData& operator=(const AllClubData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllClubData& default_instance();

  void Swap(AllClubData* other);

  // implements Message ----------------------------------------------

  AllClubData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllClubData& from);
  void MergeFrom(const AllClubData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.club.CreateClubData clubDataList = 1;
  inline int clubdatalist_size() const;
  inline void clear_clubdatalist();
  static const int kClubDataListFieldNumber = 1;
  inline const ::protocol::club::CreateClubData& clubdatalist(int index) const;
  inline ::protocol::club::CreateClubData* mutable_clubdatalist(int index);
  inline ::protocol::club::CreateClubData* add_clubdatalist();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::club::CreateClubData >&
      clubdatalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::club::CreateClubData >*
      mutable_clubdatalist();

  // @@protoc_insertion_point(class_scope:protocol.club.AllClubData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::club::CreateClubData > clubdatalist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto();

  void InitAsDefaultInstance();
  static AllClubData* default_instance_;
};
// -------------------------------------------------------------------

class ClubLogBinary : public ::google::protobuf::Message {
 public:
  ClubLogBinary();
  virtual ~ClubLogBinary();

  ClubLogBinary(const ClubLogBinary& from);

  inline ClubLogBinary& operator=(const ClubLogBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubLogBinary& default_instance();

  void Swap(ClubLogBinary* other);

  // implements Message ----------------------------------------------

  ClubLogBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubLogBinary& from);
  void MergeFrom(const ClubLogBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 logType = 1;
  inline bool has_logtype() const;
  inline void clear_logtype();
  static const int kLogTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 logtype() const;
  inline void set_logtype(::google::protobuf::uint32 value);

  // optional uint32 logTime = 2;
  inline bool has_logtime() const;
  inline void clear_logtime();
  static const int kLogTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 logtime() const;
  inline void set_logtime(::google::protobuf::uint32 value);

  // optional string clubLog = 3;
  inline bool has_clublog() const;
  inline void clear_clublog();
  static const int kClubLogFieldNumber = 3;
  inline const ::std::string& clublog() const;
  inline void set_clublog(const ::std::string& value);
  inline void set_clublog(const char* value);
  inline void set_clublog(const char* value, size_t size);
  inline ::std::string* mutable_clublog();
  inline ::std::string* release_clublog();
  inline void set_allocated_clublog(::std::string* clublog);

  // @@protoc_insertion_point(class_scope:protocol.club.ClubLogBinary)
 private:
  inline void set_has_logtype();
  inline void clear_has_logtype();
  inline void set_has_logtime();
  inline void clear_has_logtime();
  inline void set_has_clublog();
  inline void clear_has_clublog();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 logtype_;
  ::google::protobuf::uint32 logtime_;
  ::std::string* clublog_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto();

  void InitAsDefaultInstance();
  static ClubLogBinary* default_instance_;
};
// -------------------------------------------------------------------

class ClubBinary : public ::google::protobuf::Message {
 public:
  ClubBinary();
  virtual ~ClubBinary();

  ClubBinary(const ClubBinary& from);

  inline ClubBinary& operator=(const ClubBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubBinary& default_instance();

  void Swap(ClubBinary* other);

  // implements Message ----------------------------------------------

  ClubBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubBinary& from);
  void MergeFrom(const ClubBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 activeDegreeWeek = 1;
  inline bool has_activedegreeweek() const;
  inline void clear_activedegreeweek();
  static const int kActiveDegreeWeekFieldNumber = 1;
  inline ::google::protobuf::uint32 activedegreeweek() const;
  inline void set_activedegreeweek(::google::protobuf::uint32 value);

  // optional uint32 saveTimeInSec = 2;
  inline bool has_savetimeinsec() const;
  inline void clear_savetimeinsec();
  static const int kSaveTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 savetimeinsec() const;
  inline void set_savetimeinsec(::google::protobuf::uint32 value);

  // optional uint32 lastChangeNameTimeInSec = 3;
  inline bool has_lastchangenametimeinsec() const;
  inline void clear_lastchangenametimeinsec();
  static const int kLastChangeNameTimeInSecFieldNumber = 3;
  inline ::google::protobuf::uint32 lastchangenametimeinsec() const;
  inline void set_lastchangenametimeinsec(::google::protobuf::uint32 value);

  // optional uint32 activeDegreeDay = 4;
  inline bool has_activedegreeday() const;
  inline void clear_activedegreeday();
  static const int kActiveDegreeDayFieldNumber = 4;
  inline ::google::protobuf::uint32 activedegreeday() const;
  inline void set_activedegreeday(::google::protobuf::uint32 value);

  // repeated .protocol.club.ClubLogBinary clubLogBinary = 5;
  inline int clublogbinary_size() const;
  inline void clear_clublogbinary();
  static const int kClubLogBinaryFieldNumber = 5;
  inline const ::protocol::club::ClubLogBinary& clublogbinary(int index) const;
  inline ::protocol::club::ClubLogBinary* mutable_clublogbinary(int index);
  inline ::protocol::club::ClubLogBinary* add_clublogbinary();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::club::ClubLogBinary >&
      clublogbinary() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::club::ClubLogBinary >*
      mutable_clublogbinary();

  // @@protoc_insertion_point(class_scope:protocol.club.ClubBinary)
 private:
  inline void set_has_activedegreeweek();
  inline void clear_has_activedegreeweek();
  inline void set_has_savetimeinsec();
  inline void clear_has_savetimeinsec();
  inline void set_has_lastchangenametimeinsec();
  inline void clear_has_lastchangenametimeinsec();
  inline void set_has_activedegreeday();
  inline void clear_has_activedegreeday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 activedegreeweek_;
  ::google::protobuf::uint32 savetimeinsec_;
  ::google::protobuf::uint32 lastchangenametimeinsec_;
  ::google::protobuf::uint32 activedegreeday_;
  ::google::protobuf::RepeatedPtrField< ::protocol::club::ClubLogBinary > clublogbinary_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto();

  void InitAsDefaultInstance();
  static ClubBinary* default_instance_;
};
// -------------------------------------------------------------------

class ClubSaveData : public ::google::protobuf::Message {
 public:
  ClubSaveData();
  virtual ~ClubSaveData();

  ClubSaveData(const ClubSaveData& from);

  inline ClubSaveData& operator=(const ClubSaveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubSaveData& default_instance();

  void Swap(ClubSaveData* other);

  // implements Message ----------------------------------------------

  ClubSaveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubSaveData& from);
  void MergeFrom(const ClubSaveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 ownerID = 2;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIDFieldNumber = 2;
  inline ::google::protobuf::uint32 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 currExp = 4;
  inline bool has_currexp() const;
  inline void clear_currexp();
  static const int kCurrExpFieldNumber = 4;
  inline ::google::protobuf::uint32 currexp() const;
  inline void set_currexp(::google::protobuf::uint32 value);

  // optional uint32 totalExp = 5;
  inline bool has_totalexp() const;
  inline void clear_totalexp();
  static const int kTotalExpFieldNumber = 5;
  inline ::google::protobuf::uint32 totalexp() const;
  inline void set_totalexp(::google::protobuf::uint32 value);

  // optional string contact = 6;
  inline bool has_contact() const;
  inline void clear_contact();
  static const int kContactFieldNumber = 6;
  inline const ::std::string& contact() const;
  inline void set_contact(const ::std::string& value);
  inline void set_contact(const char* value);
  inline void set_contact(const char* value, size_t size);
  inline ::std::string* mutable_contact();
  inline ::std::string* release_contact();
  inline void set_allocated_contact(::std::string* contact);

  // optional string notice = 7;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 7;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional bytes binaryData = 8;
  inline bool has_binarydata() const;
  inline void clear_binarydata();
  static const int kBinaryDataFieldNumber = 8;
  inline const ::std::string& binarydata() const;
  inline void set_binarydata(const ::std::string& value);
  inline void set_binarydata(const char* value);
  inline void set_binarydata(const void* value, size_t size);
  inline ::std::string* mutable_binarydata();
  inline ::std::string* release_binarydata();
  inline void set_allocated_binarydata(::std::string* binarydata);

  // optional uint32 asset = 9;
  inline bool has_asset() const;
  inline void clear_asset();
  static const int kAssetFieldNumber = 9;
  inline ::google::protobuf::uint32 asset() const;
  inline void set_asset(::google::protobuf::uint32 value);

  // optional uint32 open = 10;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 10;
  inline ::google::protobuf::uint32 open() const;
  inline void set_open(::google::protobuf::uint32 value);

  // optional string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:protocol.club.ClubSaveData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_currexp();
  inline void clear_has_currexp();
  inline void set_has_totalexp();
  inline void clear_has_totalexp();
  inline void set_has_contact();
  inline void clear_has_contact();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_binarydata();
  inline void clear_has_binarydata();
  inline void set_has_asset();
  inline void clear_has_asset();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ownerid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 currexp_;
  ::std::string* contact_;
  ::std::string* notice_;
  ::google::protobuf::uint32 totalexp_;
  ::google::protobuf::uint32 asset_;
  ::std::string* binarydata_;
  ::std::string* name_;
  ::google::protobuf::uint32 open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fClub_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fClub_2eproto();

  void InitAsDefaultInstance();
  static ClubSaveData* default_instance_;
};
// ===================================================================


// ===================================================================

// CreateClubData

// required uint32 ownerID = 1;
inline bool CreateClubData::has_ownerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateClubData::set_has_ownerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateClubData::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateClubData::clear_ownerid() {
  ownerid_ = 0u;
  clear_has_ownerid();
}
inline ::google::protobuf::uint32 CreateClubData::ownerid() const {
  return ownerid_;
}
inline void CreateClubData::set_ownerid(::google::protobuf::uint32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional uint32 id = 2;
inline bool CreateClubData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateClubData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateClubData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateClubData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CreateClubData::id() const {
  return id_;
}
inline void CreateClubData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 clubFlag = 3;
inline bool CreateClubData::has_clubflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateClubData::set_has_clubflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateClubData::clear_has_clubflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateClubData::clear_clubflag() {
  clubflag_ = 0u;
  clear_has_clubflag();
}
inline ::google::protobuf::uint32 CreateClubData::clubflag() const {
  return clubflag_;
}
inline void CreateClubData::set_clubflag(::google::protobuf::uint32 value) {
  set_has_clubflag();
  clubflag_ = value;
}

// required string name = 4;
inline bool CreateClubData::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateClubData::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateClubData::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateClubData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateClubData::name() const {
  return *name_;
}
inline void CreateClubData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateClubData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateClubData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateClubData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreateClubData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateClubData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string contact = 5;
inline bool CreateClubData::has_contact() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateClubData::set_has_contact() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateClubData::clear_has_contact() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateClubData::clear_contact() {
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    contact_->clear();
  }
  clear_has_contact();
}
inline const ::std::string& CreateClubData::contact() const {
  return *contact_;
}
inline void CreateClubData::set_contact(const ::std::string& value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void CreateClubData::set_contact(const char* value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void CreateClubData::set_contact(const char* value, size_t size) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateClubData::mutable_contact() {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  return contact_;
}
inline ::std::string* CreateClubData::release_contact() {
  clear_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contact_;
    contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateClubData::set_allocated_contact(::std::string* contact) {
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_;
  }
  if (contact) {
    set_has_contact();
    contact_ = contact;
  } else {
    clear_has_contact();
    contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string notice = 6;
inline bool CreateClubData::has_notice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateClubData::set_has_notice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateClubData::clear_has_notice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateClubData::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& CreateClubData::notice() const {
  return *notice_;
}
inline void CreateClubData::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CreateClubData::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CreateClubData::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateClubData::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* CreateClubData::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateClubData::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 7;
inline bool CreateClubData::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateClubData::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateClubData::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateClubData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CreateClubData::level() const {
  return level_;
}
inline void CreateClubData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 currExp = 8;
inline bool CreateClubData::has_currexp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateClubData::set_has_currexp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateClubData::clear_has_currexp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateClubData::clear_currexp() {
  currexp_ = 0u;
  clear_has_currexp();
}
inline ::google::protobuf::uint32 CreateClubData::currexp() const {
  return currexp_;
}
inline void CreateClubData::set_currexp(::google::protobuf::uint32 value) {
  set_has_currexp();
  currexp_ = value;
}

// optional uint32 totalExp = 9;
inline bool CreateClubData::has_totalexp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateClubData::set_has_totalexp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateClubData::clear_has_totalexp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateClubData::clear_totalexp() {
  totalexp_ = 0u;
  clear_has_totalexp();
}
inline ::google::protobuf::uint32 CreateClubData::totalexp() const {
  return totalexp_;
}
inline void CreateClubData::set_totalexp(::google::protobuf::uint32 value) {
  set_has_totalexp();
  totalexp_ = value;
}

// optional uint32 asset = 10;
inline bool CreateClubData::has_asset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreateClubData::set_has_asset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreateClubData::clear_has_asset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreateClubData::clear_asset() {
  asset_ = 0u;
  clear_has_asset();
}
inline ::google::protobuf::uint32 CreateClubData::asset() const {
  return asset_;
}
inline void CreateClubData::set_asset(::google::protobuf::uint32 value) {
  set_has_asset();
  asset_ = value;
}

// optional bytes binaryData = 11;
inline bool CreateClubData::has_binarydata() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreateClubData::set_has_binarydata() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreateClubData::clear_has_binarydata() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreateClubData::clear_binarydata() {
  if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
    binarydata_->clear();
  }
  clear_has_binarydata();
}
inline const ::std::string& CreateClubData::binarydata() const {
  return *binarydata_;
}
inline void CreateClubData::set_binarydata(const ::std::string& value) {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  binarydata_->assign(value);
}
inline void CreateClubData::set_binarydata(const char* value) {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  binarydata_->assign(value);
}
inline void CreateClubData::set_binarydata(const void* value, size_t size) {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  binarydata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateClubData::mutable_binarydata() {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  return binarydata_;
}
inline ::std::string* CreateClubData::release_binarydata() {
  clear_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binarydata_;
    binarydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateClubData::set_allocated_binarydata(::std::string* binarydata) {
  if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
    delete binarydata_;
  }
  if (binarydata) {
    set_has_binarydata();
    binarydata_ = binarydata;
  } else {
    clear_has_binarydata();
    binarydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 createTimeInSec = 12;
inline bool CreateClubData::has_createtimeinsec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreateClubData::set_has_createtimeinsec() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CreateClubData::clear_has_createtimeinsec() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CreateClubData::clear_createtimeinsec() {
  createtimeinsec_ = 0u;
  clear_has_createtimeinsec();
}
inline ::google::protobuf::uint32 CreateClubData::createtimeinsec() const {
  return createtimeinsec_;
}
inline void CreateClubData::set_createtimeinsec(::google::protobuf::uint32 value) {
  set_has_createtimeinsec();
  createtimeinsec_ = value;
}

// optional bool isOpen = 13 [default = true];
inline bool CreateClubData::has_isopen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CreateClubData::set_has_isopen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CreateClubData::clear_has_isopen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CreateClubData::clear_isopen() {
  isopen_ = true;
  clear_has_isopen();
}
inline bool CreateClubData::isopen() const {
  return isopen_;
}
inline void CreateClubData::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
}

// -------------------------------------------------------------------

// AllClubData

// repeated .protocol.club.CreateClubData clubDataList = 1;
inline int AllClubData::clubdatalist_size() const {
  return clubdatalist_.size();
}
inline void AllClubData::clear_clubdatalist() {
  clubdatalist_.Clear();
}
inline const ::protocol::club::CreateClubData& AllClubData::clubdatalist(int index) const {
  return clubdatalist_.Get(index);
}
inline ::protocol::club::CreateClubData* AllClubData::mutable_clubdatalist(int index) {
  return clubdatalist_.Mutable(index);
}
inline ::protocol::club::CreateClubData* AllClubData::add_clubdatalist() {
  return clubdatalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::club::CreateClubData >&
AllClubData::clubdatalist() const {
  return clubdatalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::club::CreateClubData >*
AllClubData::mutable_clubdatalist() {
  return &clubdatalist_;
}

// -------------------------------------------------------------------

// ClubLogBinary

// optional uint32 logType = 1;
inline bool ClubLogBinary::has_logtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubLogBinary::set_has_logtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubLogBinary::clear_has_logtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubLogBinary::clear_logtype() {
  logtype_ = 0u;
  clear_has_logtype();
}
inline ::google::protobuf::uint32 ClubLogBinary::logtype() const {
  return logtype_;
}
inline void ClubLogBinary::set_logtype(::google::protobuf::uint32 value) {
  set_has_logtype();
  logtype_ = value;
}

// optional uint32 logTime = 2;
inline bool ClubLogBinary::has_logtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubLogBinary::set_has_logtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubLogBinary::clear_has_logtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubLogBinary::clear_logtime() {
  logtime_ = 0u;
  clear_has_logtime();
}
inline ::google::protobuf::uint32 ClubLogBinary::logtime() const {
  return logtime_;
}
inline void ClubLogBinary::set_logtime(::google::protobuf::uint32 value) {
  set_has_logtime();
  logtime_ = value;
}

// optional string clubLog = 3;
inline bool ClubLogBinary::has_clublog() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubLogBinary::set_has_clublog() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubLogBinary::clear_has_clublog() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubLogBinary::clear_clublog() {
  if (clublog_ != &::google::protobuf::internal::kEmptyString) {
    clublog_->clear();
  }
  clear_has_clublog();
}
inline const ::std::string& ClubLogBinary::clublog() const {
  return *clublog_;
}
inline void ClubLogBinary::set_clublog(const ::std::string& value) {
  set_has_clublog();
  if (clublog_ == &::google::protobuf::internal::kEmptyString) {
    clublog_ = new ::std::string;
  }
  clublog_->assign(value);
}
inline void ClubLogBinary::set_clublog(const char* value) {
  set_has_clublog();
  if (clublog_ == &::google::protobuf::internal::kEmptyString) {
    clublog_ = new ::std::string;
  }
  clublog_->assign(value);
}
inline void ClubLogBinary::set_clublog(const char* value, size_t size) {
  set_has_clublog();
  if (clublog_ == &::google::protobuf::internal::kEmptyString) {
    clublog_ = new ::std::string;
  }
  clublog_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClubLogBinary::mutable_clublog() {
  set_has_clublog();
  if (clublog_ == &::google::protobuf::internal::kEmptyString) {
    clublog_ = new ::std::string;
  }
  return clublog_;
}
inline ::std::string* ClubLogBinary::release_clublog() {
  clear_has_clublog();
  if (clublog_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clublog_;
    clublog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClubLogBinary::set_allocated_clublog(::std::string* clublog) {
  if (clublog_ != &::google::protobuf::internal::kEmptyString) {
    delete clublog_;
  }
  if (clublog) {
    set_has_clublog();
    clublog_ = clublog;
  } else {
    clear_has_clublog();
    clublog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClubBinary

// optional uint32 activeDegreeWeek = 1;
inline bool ClubBinary::has_activedegreeweek() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubBinary::set_has_activedegreeweek() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubBinary::clear_has_activedegreeweek() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubBinary::clear_activedegreeweek() {
  activedegreeweek_ = 0u;
  clear_has_activedegreeweek();
}
inline ::google::protobuf::uint32 ClubBinary::activedegreeweek() const {
  return activedegreeweek_;
}
inline void ClubBinary::set_activedegreeweek(::google::protobuf::uint32 value) {
  set_has_activedegreeweek();
  activedegreeweek_ = value;
}

// optional uint32 saveTimeInSec = 2;
inline bool ClubBinary::has_savetimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubBinary::set_has_savetimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubBinary::clear_has_savetimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubBinary::clear_savetimeinsec() {
  savetimeinsec_ = 0u;
  clear_has_savetimeinsec();
}
inline ::google::protobuf::uint32 ClubBinary::savetimeinsec() const {
  return savetimeinsec_;
}
inline void ClubBinary::set_savetimeinsec(::google::protobuf::uint32 value) {
  set_has_savetimeinsec();
  savetimeinsec_ = value;
}

// optional uint32 lastChangeNameTimeInSec = 3;
inline bool ClubBinary::has_lastchangenametimeinsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubBinary::set_has_lastchangenametimeinsec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubBinary::clear_has_lastchangenametimeinsec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubBinary::clear_lastchangenametimeinsec() {
  lastchangenametimeinsec_ = 0u;
  clear_has_lastchangenametimeinsec();
}
inline ::google::protobuf::uint32 ClubBinary::lastchangenametimeinsec() const {
  return lastchangenametimeinsec_;
}
inline void ClubBinary::set_lastchangenametimeinsec(::google::protobuf::uint32 value) {
  set_has_lastchangenametimeinsec();
  lastchangenametimeinsec_ = value;
}

// optional uint32 activeDegreeDay = 4;
inline bool ClubBinary::has_activedegreeday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubBinary::set_has_activedegreeday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubBinary::clear_has_activedegreeday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubBinary::clear_activedegreeday() {
  activedegreeday_ = 0u;
  clear_has_activedegreeday();
}
inline ::google::protobuf::uint32 ClubBinary::activedegreeday() const {
  return activedegreeday_;
}
inline void ClubBinary::set_activedegreeday(::google::protobuf::uint32 value) {
  set_has_activedegreeday();
  activedegreeday_ = value;
}

// repeated .protocol.club.ClubLogBinary clubLogBinary = 5;
inline int ClubBinary::clublogbinary_size() const {
  return clublogbinary_.size();
}
inline void ClubBinary::clear_clublogbinary() {
  clublogbinary_.Clear();
}
inline const ::protocol::club::ClubLogBinary& ClubBinary::clublogbinary(int index) const {
  return clublogbinary_.Get(index);
}
inline ::protocol::club::ClubLogBinary* ClubBinary::mutable_clublogbinary(int index) {
  return clublogbinary_.Mutable(index);
}
inline ::protocol::club::ClubLogBinary* ClubBinary::add_clublogbinary() {
  return clublogbinary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::club::ClubLogBinary >&
ClubBinary::clublogbinary() const {
  return clublogbinary_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::club::ClubLogBinary >*
ClubBinary::mutable_clublogbinary() {
  return &clublogbinary_;
}

// -------------------------------------------------------------------

// ClubSaveData

// required uint32 id = 1;
inline bool ClubSaveData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubSaveData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubSaveData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubSaveData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ClubSaveData::id() const {
  return id_;
}
inline void ClubSaveData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 ownerID = 2;
inline bool ClubSaveData::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubSaveData::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubSaveData::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubSaveData::clear_ownerid() {
  ownerid_ = 0u;
  clear_has_ownerid();
}
inline ::google::protobuf::uint32 ClubSaveData::ownerid() const {
  return ownerid_;
}
inline void ClubSaveData::set_ownerid(::google::protobuf::uint32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional uint32 level = 3;
inline bool ClubSaveData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubSaveData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubSaveData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubSaveData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ClubSaveData::level() const {
  return level_;
}
inline void ClubSaveData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 currExp = 4;
inline bool ClubSaveData::has_currexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubSaveData::set_has_currexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubSaveData::clear_has_currexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubSaveData::clear_currexp() {
  currexp_ = 0u;
  clear_has_currexp();
}
inline ::google::protobuf::uint32 ClubSaveData::currexp() const {
  return currexp_;
}
inline void ClubSaveData::set_currexp(::google::protobuf::uint32 value) {
  set_has_currexp();
  currexp_ = value;
}

// optional uint32 totalExp = 5;
inline bool ClubSaveData::has_totalexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubSaveData::set_has_totalexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubSaveData::clear_has_totalexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubSaveData::clear_totalexp() {
  totalexp_ = 0u;
  clear_has_totalexp();
}
inline ::google::protobuf::uint32 ClubSaveData::totalexp() const {
  return totalexp_;
}
inline void ClubSaveData::set_totalexp(::google::protobuf::uint32 value) {
  set_has_totalexp();
  totalexp_ = value;
}

// optional string contact = 6;
inline bool ClubSaveData::has_contact() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubSaveData::set_has_contact() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubSaveData::clear_has_contact() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubSaveData::clear_contact() {
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    contact_->clear();
  }
  clear_has_contact();
}
inline const ::std::string& ClubSaveData::contact() const {
  return *contact_;
}
inline void ClubSaveData::set_contact(const ::std::string& value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void ClubSaveData::set_contact(const char* value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void ClubSaveData::set_contact(const char* value, size_t size) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClubSaveData::mutable_contact() {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  return contact_;
}
inline ::std::string* ClubSaveData::release_contact() {
  clear_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contact_;
    contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClubSaveData::set_allocated_contact(::std::string* contact) {
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_;
  }
  if (contact) {
    set_has_contact();
    contact_ = contact;
  } else {
    clear_has_contact();
    contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string notice = 7;
inline bool ClubSaveData::has_notice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubSaveData::set_has_notice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubSaveData::clear_has_notice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubSaveData::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& ClubSaveData::notice() const {
  return *notice_;
}
inline void ClubSaveData::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void ClubSaveData::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void ClubSaveData::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClubSaveData::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* ClubSaveData::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClubSaveData::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes binaryData = 8;
inline bool ClubSaveData::has_binarydata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClubSaveData::set_has_binarydata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClubSaveData::clear_has_binarydata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClubSaveData::clear_binarydata() {
  if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
    binarydata_->clear();
  }
  clear_has_binarydata();
}
inline const ::std::string& ClubSaveData::binarydata() const {
  return *binarydata_;
}
inline void ClubSaveData::set_binarydata(const ::std::string& value) {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  binarydata_->assign(value);
}
inline void ClubSaveData::set_binarydata(const char* value) {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  binarydata_->assign(value);
}
inline void ClubSaveData::set_binarydata(const void* value, size_t size) {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  binarydata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClubSaveData::mutable_binarydata() {
  set_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    binarydata_ = new ::std::string;
  }
  return binarydata_;
}
inline ::std::string* ClubSaveData::release_binarydata() {
  clear_has_binarydata();
  if (binarydata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binarydata_;
    binarydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClubSaveData::set_allocated_binarydata(::std::string* binarydata) {
  if (binarydata_ != &::google::protobuf::internal::kEmptyString) {
    delete binarydata_;
  }
  if (binarydata) {
    set_has_binarydata();
    binarydata_ = binarydata;
  } else {
    clear_has_binarydata();
    binarydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 asset = 9;
inline bool ClubSaveData::has_asset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClubSaveData::set_has_asset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClubSaveData::clear_has_asset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClubSaveData::clear_asset() {
  asset_ = 0u;
  clear_has_asset();
}
inline ::google::protobuf::uint32 ClubSaveData::asset() const {
  return asset_;
}
inline void ClubSaveData::set_asset(::google::protobuf::uint32 value) {
  set_has_asset();
  asset_ = value;
}

// optional uint32 open = 10;
inline bool ClubSaveData::has_open() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClubSaveData::set_has_open() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClubSaveData::clear_has_open() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClubSaveData::clear_open() {
  open_ = 0u;
  clear_has_open();
}
inline ::google::protobuf::uint32 ClubSaveData::open() const {
  return open_;
}
inline void ClubSaveData::set_open(::google::protobuf::uint32 value) {
  set_has_open();
  open_ = value;
}

// optional string name = 11;
inline bool ClubSaveData::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ClubSaveData::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ClubSaveData::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ClubSaveData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClubSaveData::name() const {
  return *name_;
}
inline void ClubSaveData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClubSaveData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClubSaveData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClubSaveData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClubSaveData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClubSaveData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace club
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fProto_2fClub_2eproto__INCLUDED
