// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/Platform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/Proto/Platform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace platform {

namespace {

const ::google::protobuf::Descriptor* QQGameLoginData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQGameLoginData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSessionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginFailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginFailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSuccData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSuccData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto() {
  protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/Proto/Platform.proto");
  GOOGLE_CHECK(file != NULL);
  QQGameLoginData_descriptor_ = file->message_type(0);
  static const int QQGameLoginData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, pfkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, isbluevip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, isblueyearvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, blueviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, ishighbluevip_),
  };
  QQGameLoginData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QQGameLoginData_descriptor_,
      QQGameLoginData::default_instance_,
      QQGameLoginData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQGameLoginData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QQGameLoginData));
  LoginSessionData_descriptor_ = file->message_type(1);
  static const int LoginSessionData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, isadult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, nettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, platformtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, qqgamelogindata_),
  };
  LoginSessionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSessionData_descriptor_,
      LoginSessionData::default_instance_,
      LoginSessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSessionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSessionData));
  LoginFailData_descriptor_ = file->message_type(2);
  static const int LoginFailData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginFailData, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginFailData, errorcode_),
  };
  LoginFailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginFailData_descriptor_,
      LoginFailData::default_instance_,
      LoginFailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginFailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginFailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginFailData));
  LoginSuccData_descriptor_ = file->message_type(3);
  static const int LoginSuccData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccData, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccData, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccData, gatewayip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccData, gatewayport_),
  };
  LoginSuccData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSuccData_descriptor_,
      LoginSuccData::default_instance_,
      LoginSuccData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSuccData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSuccData));
  ZoneState_descriptor_ = file->message_type(4);
  static const int ZoneState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneState, onlinenum_),
  };
  ZoneState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneState_descriptor_,
      ZoneState::default_instance_,
      ZoneState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fProto_2fPlatform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QQGameLoginData_descriptor_, &QQGameLoginData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSessionData_descriptor_, &LoginSessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginFailData_descriptor_, &LoginFailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSuccData_descriptor_, &LoginSuccData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneState_descriptor_, &ZoneState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto() {
  delete QQGameLoginData::default_instance_;
  delete QQGameLoginData_reflection_;
  delete LoginSessionData::default_instance_;
  delete LoginSessionData_reflection_;
  delete LoginFailData::default_instance_;
  delete LoginFailData_reflection_;
  delete LoginSuccData::default_instance_;
  delete LoginSuccData_reflection_;
  delete ZoneState::default_instance_;
  delete ZoneState_reflection_;
}

void protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035protocol/Proto/Platform.proto\022\021protoco"
    "l.platform\"\272\001\n\017QQGameLoginData\022\016\n\006openID"
    "\030\001 \001(\t\022\017\n\007openKey\030\002 \001(\t\022\r\n\005pfKey\030\003 \001(\t\022\021"
    "\n\tisBlueVip\030\004 \001(\010\022\025\n\risBlueYearVip\030\005 \001(\010"
    "\022\024\n\014blueVipLevel\030\006 \001(\r\022\020\n\010nickName\030\007 \001(\t"
    "\022\016\n\006gender\030\010 \001(\t\022\025\n\risHighBlueVip\030\t \001(\010\""
    "\301\001\n\020LoginSessionData\022\020\n\010clientID\030\001 \002(\r\022\023"
    "\n\013accountName\030\002 \002(\t\022\017\n\007isAdult\030\003 \002(\010\022\021\n\t"
    "channelID\030\004 \002(\r\022\017\n\007netType\030\005 \002(\r\022\024\n\014plat"
    "formType\030\006 \002(\r\022;\n\017qqGameLoginData\030\007 \001(\0132"
    "\".protocol.platform.QQGameLoginData\"4\n\rL"
    "oginFailData\022\020\n\010clientID\030\001 \002(\r\022\021\n\terrorC"
    "ode\030\002 \002(\r\"^\n\rLoginSuccData\022\020\n\010clientID\030\001"
    " \002(\r\022\023\n\013accountName\030\002 \002(\t\022\021\n\tgatewayIP\030\003"
    " \002(\t\022\023\n\013gatewayPort\030\004 \002(\r\"\036\n\tZoneState\022\021"
    "\n\tonlineNum\030\001 \002(\r", 617);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/Proto/Platform.proto", &protobuf_RegisterTypes);
  QQGameLoginData::default_instance_ = new QQGameLoginData();
  LoginSessionData::default_instance_ = new LoginSessionData();
  LoginFailData::default_instance_ = new LoginFailData();
  LoginSuccData::default_instance_ = new LoginSuccData();
  ZoneState::default_instance_ = new ZoneState();
  QQGameLoginData::default_instance_->InitAsDefaultInstance();
  LoginSessionData::default_instance_->InitAsDefaultInstance();
  LoginFailData::default_instance_->InitAsDefaultInstance();
  LoginSuccData::default_instance_->InitAsDefaultInstance();
  ZoneState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fProto_2fPlatform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fProto_2fPlatform_2eproto {
  StaticDescriptorInitializer_protocol_2fProto_2fPlatform_2eproto() {
    protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  }
} static_descriptor_initializer_protocol_2fProto_2fPlatform_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QQGameLoginData::kOpenIDFieldNumber;
const int QQGameLoginData::kOpenKeyFieldNumber;
const int QQGameLoginData::kPfKeyFieldNumber;
const int QQGameLoginData::kIsBlueVipFieldNumber;
const int QQGameLoginData::kIsBlueYearVipFieldNumber;
const int QQGameLoginData::kBlueVipLevelFieldNumber;
const int QQGameLoginData::kNickNameFieldNumber;
const int QQGameLoginData::kGenderFieldNumber;
const int QQGameLoginData::kIsHighBlueVipFieldNumber;
#endif  // !_MSC_VER

QQGameLoginData::QQGameLoginData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QQGameLoginData::InitAsDefaultInstance() {
}

QQGameLoginData::QQGameLoginData(const QQGameLoginData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QQGameLoginData::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbluevip_ = false;
  isblueyearvip_ = false;
  blueviplevel_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishighbluevip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQGameLoginData::~QQGameLoginData() {
  SharedDtor();
}

void QQGameLoginData::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pfkey_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    delete gender_;
  }
  if (this != default_instance_) {
  }
}

void QQGameLoginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQGameLoginData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQGameLoginData_descriptor_;
}

const QQGameLoginData& QQGameLoginData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  return *default_instance_;
}

QQGameLoginData* QQGameLoginData::default_instance_ = NULL;

QQGameLoginData* QQGameLoginData::New() const {
  return new QQGameLoginData;
}

void QQGameLoginData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::kEmptyString) {
        openkey_->clear();
      }
    }
    if (has_pfkey()) {
      if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
        pfkey_->clear();
      }
    }
    isbluevip_ = false;
    isblueyearvip_ = false;
    blueviplevel_ = 0u;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_gender()) {
      if (gender_ != &::google::protobuf::internal::kEmptyString) {
        gender_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ishighbluevip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QQGameLoginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string openID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openKey;
        break;
      }

      // optional string openKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pfKey;
        break;
      }

      // optional string pfKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pfKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pfkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pfkey().data(), this->pfkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isBlueVip;
        break;
      }

      // optional bool isBlueVip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBlueVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbluevip_)));
          set_has_isbluevip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isBlueYearVip;
        break;
      }

      // optional bool isBlueYearVip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBlueYearVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblueyearvip_)));
          set_has_isblueyearvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_blueVipLevel;
        break;
      }

      // optional uint32 blueVipLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blueVipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blueviplevel_)));
          set_has_blueviplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nickName;
        break;
      }

      // optional string nickName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_gender;
        break;
      }

      // optional string gender = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isHighBlueVip;
        break;
      }

      // optional bool isHighBlueVip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHighBlueVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishighbluevip_)));
          set_has_ishighbluevip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QQGameLoginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // optional string openKey = 2;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openkey(), output);
  }

  // optional string pfKey = 3;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pfkey(), output);
  }

  // optional bool isBlueVip = 4;
  if (has_isbluevip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbluevip(), output);
  }

  // optional bool isBlueYearVip = 5;
  if (has_isblueyearvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isblueyearvip(), output);
  }

  // optional uint32 blueVipLevel = 6;
  if (has_blueviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blueviplevel(), output);
  }

  // optional string nickName = 7;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nickname(), output);
  }

  // optional string gender = 8;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->gender(), output);
  }

  // optional bool isHighBlueVip = 9;
  if (has_ishighbluevip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ishighbluevip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QQGameLoginData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional string openKey = 2;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openkey(), target);
  }

  // optional string pfKey = 3;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pfkey(), target);
  }

  // optional bool isBlueVip = 4;
  if (has_isbluevip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbluevip(), target);
  }

  // optional bool isBlueYearVip = 5;
  if (has_isblueyearvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isblueyearvip(), target);
  }

  // optional uint32 blueVipLevel = 6;
  if (has_blueviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blueviplevel(), target);
  }

  // optional string nickName = 7;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // optional string gender = 8;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gender(), target);
  }

  // optional bool isHighBlueVip = 9;
  if (has_ishighbluevip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ishighbluevip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QQGameLoginData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string openID = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string openKey = 2;
    if (has_openkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }

    // optional string pfKey = 3;
    if (has_pfkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pfkey());
    }

    // optional bool isBlueVip = 4;
    if (has_isbluevip()) {
      total_size += 1 + 1;
    }

    // optional bool isBlueYearVip = 5;
    if (has_isblueyearvip()) {
      total_size += 1 + 1;
    }

    // optional uint32 blueVipLevel = 6;
    if (has_blueviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blueviplevel());
    }

    // optional string nickName = 7;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string gender = 8;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isHighBlueVip = 9;
    if (has_ishighbluevip()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQGameLoginData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QQGameLoginData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQGameLoginData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQGameLoginData::MergeFrom(const QQGameLoginData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_pfkey()) {
      set_pfkey(from.pfkey());
    }
    if (from.has_isbluevip()) {
      set_isbluevip(from.isbluevip());
    }
    if (from.has_isblueyearvip()) {
      set_isblueyearvip(from.isblueyearvip());
    }
    if (from.has_blueviplevel()) {
      set_blueviplevel(from.blueviplevel());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ishighbluevip()) {
      set_ishighbluevip(from.ishighbluevip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QQGameLoginData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQGameLoginData::CopyFrom(const QQGameLoginData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQGameLoginData::IsInitialized() const {

  return true;
}

void QQGameLoginData::Swap(QQGameLoginData* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(openkey_, other->openkey_);
    std::swap(pfkey_, other->pfkey_);
    std::swap(isbluevip_, other->isbluevip_);
    std::swap(isblueyearvip_, other->isblueyearvip_);
    std::swap(blueviplevel_, other->blueviplevel_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(ishighbluevip_, other->ishighbluevip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QQGameLoginData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQGameLoginData_descriptor_;
  metadata.reflection = QQGameLoginData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSessionData::kClientIDFieldNumber;
const int LoginSessionData::kAccountNameFieldNumber;
const int LoginSessionData::kIsAdultFieldNumber;
const int LoginSessionData::kChannelIDFieldNumber;
const int LoginSessionData::kNetTypeFieldNumber;
const int LoginSessionData::kPlatformTypeFieldNumber;
const int LoginSessionData::kQqGameLoginDataFieldNumber;
#endif  // !_MSC_VER

LoginSessionData::LoginSessionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSessionData::InitAsDefaultInstance() {
  qqgamelogindata_ = const_cast< ::protocol::platform::QQGameLoginData*>(&::protocol::platform::QQGameLoginData::default_instance());
}

LoginSessionData::LoginSessionData(const LoginSessionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSessionData::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isadult_ = false;
  channelid_ = 0u;
  nettype_ = 0u;
  platformtype_ = 0u;
  qqgamelogindata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSessionData::~LoginSessionData() {
  SharedDtor();
}

void LoginSessionData::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
    delete qqgamelogindata_;
  }
}

void LoginSessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSessionData_descriptor_;
}

const LoginSessionData& LoginSessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  return *default_instance_;
}

LoginSessionData* LoginSessionData::default_instance_ = NULL;

LoginSessionData* LoginSessionData::New() const {
  return new LoginSessionData;
}

void LoginSessionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    isadult_ = false;
    channelid_ = 0u;
    nettype_ = 0u;
    platformtype_ = 0u;
    if (has_qqgamelogindata()) {
      if (qqgamelogindata_ != NULL) qqgamelogindata_->::protocol::platform::QQGameLoginData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountName;
        break;
      }

      // required string accountName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isAdult;
        break;
      }

      // required bool isAdult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadult_)));
          set_has_isadult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channelID;
        break;
      }

      // required uint32 channelID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_netType;
        break;
      }

      // required uint32 netType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
          set_has_nettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_platformType;
        break;
      }

      // required uint32 platformType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platformType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platformtype_)));
          set_has_platformtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_qqGameLoginData;
        break;
      }

      // optional .protocol.platform.QQGameLoginData qqGameLoginData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qqGameLoginData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qqgamelogindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountname(), output);
  }

  // required bool isAdult = 3;
  if (has_isadult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isadult(), output);
  }

  // required uint32 channelID = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  // required uint32 netType = 5;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nettype(), output);
  }

  // required uint32 platformType = 6;
  if (has_platformtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platformtype(), output);
  }

  // optional .protocol.platform.QQGameLoginData qqGameLoginData = 7;
  if (has_qqgamelogindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->qqgamelogindata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSessionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientID = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname(), target);
  }

  // required bool isAdult = 3;
  if (has_isadult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isadult(), target);
  }

  // required uint32 channelID = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  // required uint32 netType = 5;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nettype(), target);
  }

  // required uint32 platformType = 6;
  if (has_platformtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platformtype(), target);
  }

  // optional .protocol.platform.QQGameLoginData qqGameLoginData = 7;
  if (has_qqgamelogindata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->qqgamelogindata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSessionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientID = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required string accountName = 2;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // required bool isAdult = 3;
    if (has_isadult()) {
      total_size += 1 + 1;
    }

    // required uint32 channelID = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // required uint32 netType = 5;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nettype());
    }

    // required uint32 platformType = 6;
    if (has_platformtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platformtype());
    }

    // optional .protocol.platform.QQGameLoginData qqGameLoginData = 7;
    if (has_qqgamelogindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qqgamelogindata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSessionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSessionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSessionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSessionData::MergeFrom(const LoginSessionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_isadult()) {
      set_isadult(from.isadult());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
    if (from.has_platformtype()) {
      set_platformtype(from.platformtype());
    }
    if (from.has_qqgamelogindata()) {
      mutable_qqgamelogindata()->::protocol::platform::QQGameLoginData::MergeFrom(from.qqgamelogindata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSessionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSessionData::CopyFrom(const LoginSessionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSessionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void LoginSessionData::Swap(LoginSessionData* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(accountname_, other->accountname_);
    std::swap(isadult_, other->isadult_);
    std::swap(channelid_, other->channelid_);
    std::swap(nettype_, other->nettype_);
    std::swap(platformtype_, other->platformtype_);
    std::swap(qqgamelogindata_, other->qqgamelogindata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSessionData_descriptor_;
  metadata.reflection = LoginSessionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginFailData::kClientIDFieldNumber;
const int LoginFailData::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

LoginFailData::LoginFailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginFailData::InitAsDefaultInstance() {
}

LoginFailData::LoginFailData(const LoginFailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginFailData::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginFailData::~LoginFailData() {
  SharedDtor();
}

void LoginFailData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginFailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginFailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginFailData_descriptor_;
}

const LoginFailData& LoginFailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  return *default_instance_;
}

LoginFailData* LoginFailData::default_instance_ = NULL;

LoginFailData* LoginFailData::New() const {
  return new LoginFailData;
}

void LoginFailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginFailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errorCode;
        break;
      }

      // required uint32 errorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginFailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required uint32 errorCode = 2;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginFailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientID = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required uint32 errorCode = 2;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginFailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientID = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 errorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginFailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginFailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginFailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginFailData::MergeFrom(const LoginFailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginFailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginFailData::CopyFrom(const LoginFailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginFailData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginFailData::Swap(LoginFailData* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginFailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginFailData_descriptor_;
  metadata.reflection = LoginFailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSuccData::kClientIDFieldNumber;
const int LoginSuccData::kAccountNameFieldNumber;
const int LoginSuccData::kGatewayIPFieldNumber;
const int LoginSuccData::kGatewayPortFieldNumber;
#endif  // !_MSC_VER

LoginSuccData::LoginSuccData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSuccData::InitAsDefaultInstance() {
}

LoginSuccData::LoginSuccData(const LoginSuccData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSuccData::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gatewayip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gatewayport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSuccData::~LoginSuccData() {
  SharedDtor();
}

void LoginSuccData::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
    delete gatewayip_;
  }
  if (this != default_instance_) {
  }
}

void LoginSuccData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSuccData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSuccData_descriptor_;
}

const LoginSuccData& LoginSuccData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  return *default_instance_;
}

LoginSuccData* LoginSuccData::default_instance_ = NULL;

LoginSuccData* LoginSuccData::New() const {
  return new LoginSuccData;
}

void LoginSuccData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_gatewayip()) {
      if (gatewayip_ != &::google::protobuf::internal::kEmptyString) {
        gatewayip_->clear();
      }
    }
    gatewayport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSuccData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountName;
        break;
      }

      // required string accountName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gatewayIP;
        break;
      }

      // required string gatewayIP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gatewayIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gatewayip().data(), this->gatewayip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gatewayPort;
        break;
      }

      // required uint32 gatewayPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatewayPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gatewayport_)));
          set_has_gatewayport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSuccData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountname(), output);
  }

  // required string gatewayIP = 3;
  if (has_gatewayip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gatewayip(), output);
  }

  // required uint32 gatewayPort = 4;
  if (has_gatewayport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gatewayport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSuccData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clientID = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required string accountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname(), target);
  }

  // required string gatewayIP = 3;
  if (has_gatewayip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gatewayip(), target);
  }

  // required uint32 gatewayPort = 4;
  if (has_gatewayport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gatewayport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSuccData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientID = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required string accountName = 2;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // required string gatewayIP = 3;
    if (has_gatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayip());
    }

    // required uint32 gatewayPort = 4;
    if (has_gatewayport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gatewayport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSuccData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSuccData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSuccData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSuccData::MergeFrom(const LoginSuccData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_gatewayip()) {
      set_gatewayip(from.gatewayip());
    }
    if (from.has_gatewayport()) {
      set_gatewayport(from.gatewayport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSuccData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSuccData::CopyFrom(const LoginSuccData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSuccData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginSuccData::Swap(LoginSuccData* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(accountname_, other->accountname_);
    std::swap(gatewayip_, other->gatewayip_);
    std::swap(gatewayport_, other->gatewayport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSuccData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSuccData_descriptor_;
  metadata.reflection = LoginSuccData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneState::kOnlineNumFieldNumber;
#endif  // !_MSC_VER

ZoneState::ZoneState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneState::InitAsDefaultInstance() {
}

ZoneState::ZoneState(const ZoneState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneState::SharedCtor() {
  _cached_size_ = 0;
  onlinenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneState::~ZoneState() {
  SharedDtor();
}

void ZoneState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneState_descriptor_;
}

const ZoneState& ZoneState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fProto_2fPlatform_2eproto();
  return *default_instance_;
}

ZoneState* ZoneState::default_instance_ = NULL;

ZoneState* ZoneState::New() const {
  return new ZoneState;
}

void ZoneState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onlinenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 onlineNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 onlineNum = 1;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->onlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 onlineNum = 1;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->onlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 onlineNum = 1;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneState::MergeFrom(const ZoneState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneState::CopyFrom(const ZoneState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZoneState::Swap(ZoneState* other) {
  if (other != this) {
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneState_descriptor_;
  metadata.reflection = ZoneState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace platform
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
