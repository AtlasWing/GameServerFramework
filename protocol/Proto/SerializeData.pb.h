// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/Proto/SerializeData.proto

#ifndef PROTOBUF_protocol_2fProto_2fSerializeData_2eproto__INCLUDED
#define PROTOBUF_protocol_2fProto_2fSerializeData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace serialize {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
void protobuf_AssignDesc_protocol_2fProto_2fSerializeData_2eproto();
void protobuf_ShutdownFile_protocol_2fProto_2fSerializeData_2eproto();

class MonsterChallengeSequenceData;
class MonsterChallengeSequenceAllBinary;
class RankMatchBinary;

// ===================================================================

class MonsterChallengeSequenceData : public ::google::protobuf::Message {
 public:
  MonsterChallengeSequenceData();
  virtual ~MonsterChallengeSequenceData();

  MonsterChallengeSequenceData(const MonsterChallengeSequenceData& from);

  inline MonsterChallengeSequenceData& operator=(const MonsterChallengeSequenceData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterChallengeSequenceData& default_instance();

  void Swap(MonsterChallengeSequenceData* other);

  // implements Message ----------------------------------------------

  MonsterChallengeSequenceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterChallengeSequenceData& from);
  void MergeFrom(const MonsterChallengeSequenceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);

  // required uint32 scoreSum = 2;
  inline bool has_scoresum() const;
  inline void clear_scoresum();
  static const int kScoreSumFieldNumber = 2;
  inline ::google::protobuf::uint32 scoresum() const;
  inline void set_scoresum(::google::protobuf::uint32 value);

  // repeated uint32 userList = 3;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserListFieldNumber = 3;
  inline ::google::protobuf::uint32 userlist(int index) const;
  inline void set_userlist(int index, ::google::protobuf::uint32 value);
  inline void add_userlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      userlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_userlist();

  // @@protoc_insertion_point(class_scope:protocol.serialize.MonsterChallengeSequenceData)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_scoresum();
  inline void clear_has_scoresum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 scoresum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > userlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fSerializeData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fSerializeData_2eproto();

  void InitAsDefaultInstance();
  static MonsterChallengeSequenceData* default_instance_;
};
// -------------------------------------------------------------------

class MonsterChallengeSequenceAllBinary : public ::google::protobuf::Message {
 public:
  MonsterChallengeSequenceAllBinary();
  virtual ~MonsterChallengeSequenceAllBinary();

  MonsterChallengeSequenceAllBinary(const MonsterChallengeSequenceAllBinary& from);

  inline MonsterChallengeSequenceAllBinary& operator=(const MonsterChallengeSequenceAllBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterChallengeSequenceAllBinary& default_instance();

  void Swap(MonsterChallengeSequenceAllBinary* other);

  // implements Message ----------------------------------------------

  MonsterChallengeSequenceAllBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterChallengeSequenceAllBinary& from);
  void MergeFrom(const MonsterChallengeSequenceAllBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.serialize.MonsterChallengeSequenceData sequenceDataList = 1;
  inline int sequencedatalist_size() const;
  inline void clear_sequencedatalist();
  static const int kSequenceDataListFieldNumber = 1;
  inline const ::protocol::serialize::MonsterChallengeSequenceData& sequencedatalist(int index) const;
  inline ::protocol::serialize::MonsterChallengeSequenceData* mutable_sequencedatalist(int index);
  inline ::protocol::serialize::MonsterChallengeSequenceData* add_sequencedatalist();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::serialize::MonsterChallengeSequenceData >&
      sequencedatalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::serialize::MonsterChallengeSequenceData >*
      mutable_sequencedatalist();

  // @@protoc_insertion_point(class_scope:protocol.serialize.MonsterChallengeSequenceAllBinary)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protocol::serialize::MonsterChallengeSequenceData > sequencedatalist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fSerializeData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fSerializeData_2eproto();

  void InitAsDefaultInstance();
  static MonsterChallengeSequenceAllBinary* default_instance_;
};
// -------------------------------------------------------------------

class RankMatchBinary : public ::google::protobuf::Message {
 public:
  RankMatchBinary();
  virtual ~RankMatchBinary();

  RankMatchBinary(const RankMatchBinary& from);

  inline RankMatchBinary& operator=(const RankMatchBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankMatchBinary& default_instance();

  void Swap(RankMatchBinary* other);

  // implements Message ----------------------------------------------

  RankMatchBinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankMatchBinary& from);
  void MergeFrom(const RankMatchBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seasonID = 1;
  inline bool has_seasonid() const;
  inline void clear_seasonid();
  static const int kSeasonIDFieldNumber = 1;
  inline ::google::protobuf::uint32 seasonid() const;
  inline void set_seasonid(::google::protobuf::uint32 value);

  // optional uint32 startTimeInSec = 2;
  inline bool has_starttimeinsec() const;
  inline void clear_starttimeinsec();
  static const int kStartTimeInSecFieldNumber = 2;
  inline ::google::protobuf::uint32 starttimeinsec() const;
  inline void set_starttimeinsec(::google::protobuf::uint32 value);

  // optional uint32 endTimeInSec = 3;
  inline bool has_endtimeinsec() const;
  inline void clear_endtimeinsec();
  static const int kEndTimeInSecFieldNumber = 3;
  inline ::google::protobuf::uint32 endtimeinsec() const;
  inline void set_endtimeinsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.serialize.RankMatchBinary)
 private:
  inline void set_has_seasonid();
  inline void clear_has_seasonid();
  inline void set_has_starttimeinsec();
  inline void clear_has_starttimeinsec();
  inline void set_has_endtimeinsec();
  inline void clear_has_endtimeinsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seasonid_;
  ::google::protobuf::uint32 starttimeinsec_;
  ::google::protobuf::uint32 endtimeinsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocol_2fProto_2fSerializeData_2eproto();
  friend void protobuf_AssignDesc_protocol_2fProto_2fSerializeData_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fProto_2fSerializeData_2eproto();

  void InitAsDefaultInstance();
  static RankMatchBinary* default_instance_;
};
// ===================================================================


// ===================================================================

// MonsterChallengeSequenceData

// required uint32 mode = 1;
inline bool MonsterChallengeSequenceData::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterChallengeSequenceData::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterChallengeSequenceData::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterChallengeSequenceData::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 MonsterChallengeSequenceData::mode() const {
  return mode_;
}
inline void MonsterChallengeSequenceData::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
}

// required uint32 scoreSum = 2;
inline bool MonsterChallengeSequenceData::has_scoresum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterChallengeSequenceData::set_has_scoresum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterChallengeSequenceData::clear_has_scoresum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterChallengeSequenceData::clear_scoresum() {
  scoresum_ = 0u;
  clear_has_scoresum();
}
inline ::google::protobuf::uint32 MonsterChallengeSequenceData::scoresum() const {
  return scoresum_;
}
inline void MonsterChallengeSequenceData::set_scoresum(::google::protobuf::uint32 value) {
  set_has_scoresum();
  scoresum_ = value;
}

// repeated uint32 userList = 3;
inline int MonsterChallengeSequenceData::userlist_size() const {
  return userlist_.size();
}
inline void MonsterChallengeSequenceData::clear_userlist() {
  userlist_.Clear();
}
inline ::google::protobuf::uint32 MonsterChallengeSequenceData::userlist(int index) const {
  return userlist_.Get(index);
}
inline void MonsterChallengeSequenceData::set_userlist(int index, ::google::protobuf::uint32 value) {
  userlist_.Set(index, value);
}
inline void MonsterChallengeSequenceData::add_userlist(::google::protobuf::uint32 value) {
  userlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MonsterChallengeSequenceData::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MonsterChallengeSequenceData::mutable_userlist() {
  return &userlist_;
}

// -------------------------------------------------------------------

// MonsterChallengeSequenceAllBinary

// repeated .protocol.serialize.MonsterChallengeSequenceData sequenceDataList = 1;
inline int MonsterChallengeSequenceAllBinary::sequencedatalist_size() const {
  return sequencedatalist_.size();
}
inline void MonsterChallengeSequenceAllBinary::clear_sequencedatalist() {
  sequencedatalist_.Clear();
}
inline const ::protocol::serialize::MonsterChallengeSequenceData& MonsterChallengeSequenceAllBinary::sequencedatalist(int index) const {
  return sequencedatalist_.Get(index);
}
inline ::protocol::serialize::MonsterChallengeSequenceData* MonsterChallengeSequenceAllBinary::mutable_sequencedatalist(int index) {
  return sequencedatalist_.Mutable(index);
}
inline ::protocol::serialize::MonsterChallengeSequenceData* MonsterChallengeSequenceAllBinary::add_sequencedatalist() {
  return sequencedatalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::serialize::MonsterChallengeSequenceData >&
MonsterChallengeSequenceAllBinary::sequencedatalist() const {
  return sequencedatalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::serialize::MonsterChallengeSequenceData >*
MonsterChallengeSequenceAllBinary::mutable_sequencedatalist() {
  return &sequencedatalist_;
}

// -------------------------------------------------------------------

// RankMatchBinary

// optional uint32 seasonID = 1;
inline bool RankMatchBinary::has_seasonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankMatchBinary::set_has_seasonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankMatchBinary::clear_has_seasonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankMatchBinary::clear_seasonid() {
  seasonid_ = 0u;
  clear_has_seasonid();
}
inline ::google::protobuf::uint32 RankMatchBinary::seasonid() const {
  return seasonid_;
}
inline void RankMatchBinary::set_seasonid(::google::protobuf::uint32 value) {
  set_has_seasonid();
  seasonid_ = value;
}

// optional uint32 startTimeInSec = 2;
inline bool RankMatchBinary::has_starttimeinsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankMatchBinary::set_has_starttimeinsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankMatchBinary::clear_has_starttimeinsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankMatchBinary::clear_starttimeinsec() {
  starttimeinsec_ = 0u;
  clear_has_starttimeinsec();
}
inline ::google::protobuf::uint32 RankMatchBinary::starttimeinsec() const {
  return starttimeinsec_;
}
inline void RankMatchBinary::set_starttimeinsec(::google::protobuf::uint32 value) {
  set_has_starttimeinsec();
  starttimeinsec_ = value;
}

// optional uint32 endTimeInSec = 3;
inline bool RankMatchBinary::has_endtimeinsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankMatchBinary::set_has_endtimeinsec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankMatchBinary::clear_has_endtimeinsec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankMatchBinary::clear_endtimeinsec() {
  endtimeinsec_ = 0u;
  clear_has_endtimeinsec();
}
inline ::google::protobuf::uint32 RankMatchBinary::endtimeinsec() const {
  return endtimeinsec_;
}
inline void RankMatchBinary::set_endtimeinsec(::google::protobuf::uint32 value) {
  set_has_endtimeinsec();
  endtimeinsec_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fProto_2fSerializeData_2eproto__INCLUDED
