/* config.h.in.  Generated from configure.ac by autoheader.  */

/* Define to 1 if you have the <dlfcn.h> header file. */
#undef HAVE_DLFCN_H

/* Define to 1 if you have the <inttypes.h> header file. */
#undef HAVE_INTTYPES_H

/* Define to 1 if you have the <memory.h> header file. */
#undef HAVE_MEMORY_H

/* Define to 1 if you have the <stdint.h> header file. */
#undef HAVE_STDINT_H

/* Define to 1 if you have the <stdlib.h> header file. */
#undef HAVE_STDLIB_H

/* Define to 1 if you have the <strings.h> header file. */
#undef HAVE_STRINGS_H

/* Define to 1 if you have the <string.h> header file. */
#undef HAVE_STRING_H

/* Define to 1 if you have the <sys/stat.h> header file. */
#undef HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/types.h> header file. */
#undef HAVE_SYS_TYPES_H

/* Define to 1 if you have the <unistd.h> header file. */
#undef HAVE_UNISTD_H

/* Define to the sub-directory in which libtool stores uninstalled libraries.
   */
#undef LT_OBJDIR

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the home page for this package. */
#undef PACKAGE_URL

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* Major version number of sigc++. */
#undef SIGCXX_MAJOR_VERSION

/* Micro version number of sigc++. */
#undef SIGCXX_MICRO_VERSION

/* Minor version number of sigc++. */
#undef SIGCXX_MINOR_VERSION

/* does the C++ compiler support the use of a particular specialization when
   calling operator() template methods. */
#undef SIGC_GCC_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD

/* Defined when the libstdc++ declares the std-namespace */
#undef SIGC_HAVE_NAMESPACE_STD

/* Define if the non-standard Sun reverse_iterator must be used. */
#undef SIGC_HAVE_SUN_REVERSE_ITERATOR

/* does the C++ compiler support the use of a particular specialization when
   calling operator() template methods omitting the template keyword. */
#undef SIGC_MSVC_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD

/* does c++ compiler allows usage of member function in initialization of
   static member field. */
#undef SIGC_SELF_REFERENCE_IN_MEMBER_INITIALIZATION

/* Define to 1 if you have the ANSI C header files. */
#undef STDC_HEADERS
