// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.26 by WSRD Tencent.
// Generated from `Log.jce'
// **********************************************************************

#ifndef __LOG_H_
#define __LOG_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{
    struct LogInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.LogInfo";
        }
        static string MD5()
        {
            return "ba09e8605835a4295210919e6b1badc0";
        }
        LogInfo()
        :appname(""),servername(""),sFilename(""),sFormat(""),setdivision(""),bHasSufix(true),bHasAppNamePrefix(true),bHasSquareBracket(false),sConcatStr("_"),sSepar("|"),sLogType("")
        {
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            sFilename = "";
            sFormat = "";
            setdivision = "";
            bHasSufix = true;
            bHasAppNamePrefix = true;
            bHasSquareBracket = false;
            sConcatStr = "_";
            sSepar = "|";
            sLogType = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            _os.write(servername, 1);
            _os.write(sFilename, 2);
            _os.write(sFormat, 3);
            _os.write(setdivision, 4);
            _os.write(bHasSufix, 5);
            _os.write(bHasAppNamePrefix, 6);
            _os.write(bHasSquareBracket, 7);
            _os.write(sConcatStr, 8);
            _os.write(sSepar, 9);
            _os.write(sLogType, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, true);
            _is.read(sFilename, 2, true);
            _is.read(sFormat, 3, true);
            _is.read(setdivision, 4, false);
            _is.read(bHasSufix, 5, false);
            _is.read(bHasAppNamePrefix, 6, false);
            _is.read(bHasSquareBracket, 7, false);
            _is.read(sConcatStr, 8, false);
            _is.read(sSepar, 9, false);
            _is.read(sLogType, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(sFilename,"sFilename");
            _ds.display(sFormat,"sFormat");
            _ds.display(setdivision,"setdivision");
            _ds.display(bHasSufix,"bHasSufix");
            _ds.display(bHasAppNamePrefix,"bHasAppNamePrefix");
            _ds.display(bHasSquareBracket,"bHasSquareBracket");
            _ds.display(sConcatStr,"sConcatStr");
            _ds.display(sSepar,"sSepar");
            _ds.display(sLogType,"sLogType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(sFilename, true);
            _ds.displaySimple(sFormat, true);
            _ds.displaySimple(setdivision, true);
            _ds.displaySimple(bHasSufix, true);
            _ds.displaySimple(bHasAppNamePrefix, true);
            _ds.displaySimple(bHasSquareBracket, true);
            _ds.displaySimple(sConcatStr, true);
            _ds.displaySimple(sSepar, true);
            _ds.displaySimple(sLogType, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        std::string sFilename;
        std::string sFormat;
        std::string setdivision;
        taf::Bool bHasSufix;
        taf::Bool bHasAppNamePrefix;
        taf::Bool bHasSquareBracket;
        std::string sConcatStr;
        std::string sSepar;
        std::string sLogType;
    };
    inline bool operator==(const LogInfo&l, const LogInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.sFilename == r.sFilename && l.sFormat == r.sFormat && l.setdivision == r.setdivision && l.bHasSufix == r.bHasSufix && l.bHasAppNamePrefix == r.bHasAppNamePrefix && l.bHasSquareBracket == r.bHasSquareBracket && l.sConcatStr == r.sConcatStr && l.sSepar == r.sSepar && l.sLogType == r.sLogType;
    }
    inline bool operator!=(const LogInfo&l, const LogInfo&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class LogPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~LogPrxCallback(){}
        virtual void callback_logger()
        { throw std::runtime_error("callback_logger() overloading incorrect."); }
        virtual void callback_logger_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_logger_exception() overloading incorrect."); }

        virtual void callback_loggerbyInfo()
        { throw std::runtime_error("callback_loggerbyInfo() overloading incorrect."); }
        virtual void callback_loggerbyInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loggerbyInfo_exception() overloading incorrect."); }

    public:
        const map<std::string, std::string> & getResponseContext() const;

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<LogPrxCallback> LogPrxCallbackPtr;

    /* proxy for client */
    class LogProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        void logger(const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_logger(LogPrxCallbackPtr callback,const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());

        void loggerbyInfo(const taf::LogInfo & info,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_loggerbyInfo(LogPrxCallbackPtr callback,const taf::LogInfo & info,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());

        LogProxy* taf_hash(int64_t key);
        LogProxy* taf_set_timeout(int msecond);
        LogProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<LogProxy> LogPrx;

    /* servant for server */
    class Log : public taf::Servant
    {
    public:
        virtual ~Log(){}
        virtual void logger(const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,taf::JceCurrentPtr current) = 0;
        static void async_response_logger(taf::JceCurrentPtr current);

        virtual void loggerbyInfo(const taf::LogInfo & info,const vector<std::string> & buffer,taf::JceCurrentPtr current) = 0;
        static void async_response_loggerbyInfo(taf::JceCurrentPtr current);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define taf_LogInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.appname,b.appname);jce_copy_struct(a.servername,b.servername);jce_copy_struct(a.sFilename,b.sFilename);jce_copy_struct(a.sFormat,b.sFormat);jce_copy_struct(a.setdivision,b.setdivision);jce_copy_struct(a.bHasSufix,b.bHasSufix);jce_copy_struct(a.bHasAppNamePrefix,b.bHasAppNamePrefix);jce_copy_struct(a.bHasSquareBracket,b.bHasSquareBracket);jce_copy_struct(a.sConcatStr,b.sConcatStr);jce_copy_struct(a.sSepar,b.sSepar);jce_copy_struct(a.sLogType,b.sLogType);



#endif
