// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.26 by WSRD Tencent.
// Generated from `QueryF.jce'
// **********************************************************************

#ifndef __QUERYF_H_
#define __QUERYF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/EndpointF.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{

    /* callback of async proxy for client */
    class QueryFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallback(){}
        virtual void callback_findObjectById(const vector<taf::EndpointF>& ret)
        { throw std::runtime_error("callback_findObjectById() overloading incorrect."); }
        virtual void callback_findObjectById_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectById_exception() overloading incorrect."); }

        virtual void callback_findObjectById4Any(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4Any() overloading incorrect."); }
        virtual void callback_findObjectById4Any_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4Any_exception() overloading incorrect."); }

        virtual void callback_findObjectById4All(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4All() overloading incorrect."); }
        virtual void callback_findObjectById4All_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4All_exception() overloading incorrect."); }

        virtual void callback_findObjectByIdInSameGroup(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup() overloading incorrect."); }
        virtual void callback_findObjectByIdInSameGroup_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup_exception() overloading incorrect."); }

        virtual void callback_findObjectByIdInSameStation(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameStation() overloading incorrect."); }
        virtual void callback_findObjectByIdInSameStation_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameStation_exception() overloading incorrect."); }

        virtual void callback_findObjectByIdInSameSet(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameSet() overloading incorrect."); }
        virtual void callback_findObjectByIdInSameSet_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameSet_exception() overloading incorrect."); }

    public:
        const map<std::string, std::string> & getResponseContext() const;

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<QueryFPrxCallback> QueryFPrxCallbackPtr;

    /* proxy for client */
    class QueryFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        vector<taf::EndpointF> findObjectById(const std::string & id,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectById(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectById4Any(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectById4Any(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectById4All(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectById4All(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectByIdInSameGroup(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectByIdInSameGroup(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectByIdInSameStation(QueryFPrxCallbackPtr callback,const std::string & id,const std::string & sStation,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectByIdInSameSet(QueryFPrxCallbackPtr callback,const std::string & id,const std::string & setId,const map<string, string> &context = TAF_CONTEXT());

        QueryFProxy* taf_hash(int64_t key);
        QueryFProxy* taf_set_timeout(int msecond);
        QueryFProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<QueryFProxy> QueryFPrx;

    /* servant for server */
    class QueryF : public taf::Servant
    {
    public:
        virtual ~QueryF(){}
        virtual vector<taf::EndpointF> findObjectById(const std::string & id,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectById(taf::JceCurrentPtr current, const vector<taf::EndpointF> &_ret);

        virtual taf::Int32 findObjectById4Any(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectById4Any(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectById4All(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectById4All(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectByIdInSameGroup(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameGroup(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameStation(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameSet(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
