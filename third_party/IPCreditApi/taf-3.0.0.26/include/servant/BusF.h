// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.26 by WSRD Tencent.
// Generated from `BusF.jce'
// **********************************************************************

#ifndef __BUSF_H_
#define __BUSF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace taf
{
    struct BusCommuKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.BusCommuKey";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        BusCommuKey()
        :CommuKey(""),IdName(""),ServantName("")
        {
        }
        void resetDefautlt()
        {
            CommuKey = "";
            IdName = "";
            ServantName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(CommuKey, 0);
            _os.write(IdName, 1);
            _os.write(ServantName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(CommuKey, 0, true);
            _is.read(IdName, 1, true);
            _is.read(ServantName, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(CommuKey,"CommuKey");
            _ds.display(IdName,"IdName");
            _ds.display(ServantName,"ServantName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(CommuKey, true);
            _ds.displaySimple(IdName, true);
            _ds.displaySimple(ServantName, false);
            return _os;
        }
    public:
        std::string CommuKey;
        std::string IdName;
        std::string ServantName;
    };
    inline bool operator==(const BusCommuKey&l, const BusCommuKey&r)
    {
        return l.CommuKey == r.CommuKey && l.IdName == r.IdName && l.ServantName == r.ServantName;
    }
    inline bool operator!=(const BusCommuKey&l, const BusCommuKey&r)
    {
        return !(l == r);
    }

    struct BusCommuData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.BusCommuData";
        }
        static string MD5()
        {
            return "41a4dded0c607da53d74d6119b8479ca";
        }
        BusCommuData()
        :CommuKey(""),ErrorInfo(""),c2sMmapName(""),c2sMmapSize(0),c2sFifoName(""),s2cMmapName(""),s2cMmapSize(0),s2cFifoName("")
        {
        }
        void resetDefautlt()
        {
            CommuKey = "";
            ErrorInfo = "";
            c2sMmapName = "";
            c2sMmapSize = 0;
            c2sFifoName = "";
            s2cMmapName = "";
            s2cMmapSize = 0;
            s2cFifoName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(CommuKey, 0);
            _os.write(ErrorInfo, 1);
            _os.write(c2sMmapName, 2);
            _os.write(c2sMmapSize, 3);
            _os.write(c2sFifoName, 4);
            _os.write(s2cMmapName, 5);
            _os.write(s2cMmapSize, 6);
            _os.write(s2cFifoName, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(CommuKey, 0, true);
            _is.read(ErrorInfo, 1, true);
            _is.read(c2sMmapName, 2, true);
            _is.read(c2sMmapSize, 3, true);
            _is.read(c2sFifoName, 4, true);
            _is.read(s2cMmapName, 5, true);
            _is.read(s2cMmapSize, 6, true);
            _is.read(s2cFifoName, 7, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(CommuKey,"CommuKey");
            _ds.display(ErrorInfo,"ErrorInfo");
            _ds.display(c2sMmapName,"c2sMmapName");
            _ds.display(c2sMmapSize,"c2sMmapSize");
            _ds.display(c2sFifoName,"c2sFifoName");
            _ds.display(s2cMmapName,"s2cMmapName");
            _ds.display(s2cMmapSize,"s2cMmapSize");
            _ds.display(s2cFifoName,"s2cFifoName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(CommuKey, true);
            _ds.displaySimple(ErrorInfo, true);
            _ds.displaySimple(c2sMmapName, true);
            _ds.displaySimple(c2sMmapSize, true);
            _ds.displaySimple(c2sFifoName, true);
            _ds.displaySimple(s2cMmapName, true);
            _ds.displaySimple(s2cMmapSize, true);
            _ds.displaySimple(s2cFifoName, false);
            return _os;
        }
    public:
        std::string CommuKey;
        std::string ErrorInfo;
        std::string c2sMmapName;
        taf::UInt32 c2sMmapSize;
        std::string c2sFifoName;
        std::string s2cMmapName;
        taf::UInt32 s2cMmapSize;
        std::string s2cFifoName;
    };
    inline bool operator==(const BusCommuData&l, const BusCommuData&r)
    {
        return l.CommuKey == r.CommuKey && l.ErrorInfo == r.ErrorInfo && l.c2sMmapName == r.c2sMmapName && l.c2sMmapSize == r.c2sMmapSize && l.c2sFifoName == r.c2sFifoName && l.s2cMmapName == r.s2cMmapName && l.s2cMmapSize == r.s2cMmapSize && l.s2cFifoName == r.s2cFifoName;
    }
    inline bool operator!=(const BusCommuData&l, const BusCommuData&r)
    {
        return !(l == r);
    }


}

#define taf_BusCommuKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.CommuKey,b.CommuKey);jce_copy_struct(a.IdName,b.IdName);jce_copy_struct(a.ServantName,b.ServantName);

#define taf_BusCommuData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.CommuKey,b.CommuKey);jce_copy_struct(a.ErrorInfo,b.ErrorInfo);jce_copy_struct(a.c2sMmapName,b.c2sMmapName);jce_copy_struct(a.c2sMmapSize,b.c2sMmapSize);jce_copy_struct(a.c2sFifoName,b.c2sFifoName);jce_copy_struct(a.s2cMmapName,b.s2cMmapName);jce_copy_struct(a.s2cMmapSize,b.s2cMmapSize);jce_copy_struct(a.s2cFifoName,b.s2cFifoName);



#endif
