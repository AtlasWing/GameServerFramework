// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.26 by WSRD Tencent.
// Generated from `AdminF.jce'
// **********************************************************************

#ifndef __ADMINF_H_
#define __ADMINF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{

    /* callback of async proxy for client */
    class AdminFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~AdminFPrxCallback(){}
        virtual void callback_shutdown()
        { throw std::runtime_error("callback_shutdown() overloading incorrect."); }
        virtual void callback_shutdown_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_shutdown_exception() overloading incorrect."); }

        virtual void callback_notify(const std::string& ret)
        { throw std::runtime_error("callback_notify() overloading incorrect."); }
        virtual void callback_notify_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_notify_exception() overloading incorrect."); }

    public:
        const map<std::string, std::string> & getResponseContext() const;

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<AdminFPrxCallback> AdminFPrxCallbackPtr;

    /* proxy for client */
    class AdminFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        void shutdown(const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_shutdown(AdminFPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        std::string notify(const std::string & command,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_notify(AdminFPrxCallbackPtr callback,const std::string & command,const map<string, string> &context = TAF_CONTEXT());

        AdminFProxy* taf_hash(int64_t key);
        AdminFProxy* taf_set_timeout(int msecond);
        AdminFProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<AdminFProxy> AdminFPrx;

    /* servant for server */
    class AdminF : public taf::Servant
    {
    public:
        virtual ~AdminF(){}
        virtual void shutdown(taf::JceCurrentPtr current) = 0;
        static void async_response_shutdown(taf::JceCurrentPtr current);

        virtual std::string notify(const std::string & command,taf::JceCurrentPtr current) = 0;
        static void async_response_notify(taf::JceCurrentPtr current, const std::string &_ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
