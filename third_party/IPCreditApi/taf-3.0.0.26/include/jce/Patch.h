// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.17 by WSRD Tencent.
// Generated from `Patch.jce'
// **********************************************************************

#ifndef __PATCH_H_
#define __PATCH_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{
    struct FileInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.FileInfo";
        }
        static string MD5()
        {
            return "4ccffa49acefd48e29c01539db437fb0";
        }
        FileInfo()
        :path(""),size(0),canExec(true),md5("")
        {
        }
        void resetDefautlt()
        {
            path = "";
            size = 0;
            canExec = true;
            md5 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(path, 0);
            _os.write(size, 1);
            _os.write(canExec, 2);
            _os.write(md5, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(path, 0, true);
            _is.read(size, 1, true);
            _is.read(canExec, 2, true);
            _is.read(md5, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(path,"path");
            _ds.display(size,"size");
            _ds.display(canExec,"canExec");
            _ds.display(md5,"md5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(path, true);
            _ds.displaySimple(size, true);
            _ds.displaySimple(canExec, true);
            _ds.displaySimple(md5, false);
            return _os;
        }
    public:
        std::string path;
        taf::Int32 size;
        taf::Bool canExec;
        std::string md5;
    };
    inline bool operator==(const FileInfo&l, const FileInfo&r)
    {
        return l.path == r.path && l.size == r.size && l.canExec == r.canExec && l.md5 == r.md5;
    }
    inline bool operator!=(const FileInfo&l, const FileInfo&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class PatchPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~PatchPrxCallback(){}
        virtual void callback_listFileInfo(taf::Int32 ret,  const vector<taf::FileInfo>& vf)
        { throw std::runtime_error("callback_listFileInfo() overloading incorrect."); }
        virtual void callback_listFileInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_listFileInfo_exception() overloading incorrect."); }

        virtual void callback_download(taf::Int32 ret,  const vector<taf::Char>& vb)
        { throw std::runtime_error("callback_download() overloading incorrect."); }
        virtual void callback_download_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_download_exception() overloading incorrect."); }

        virtual void callback_listFileInfoSubborn(taf::Int32 ret,  const vector<taf::FileInfo>& vf)
        { throw std::runtime_error("callback_listFileInfoSubborn() overloading incorrect."); }
        virtual void callback_listFileInfoSubborn_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_listFileInfoSubborn_exception() overloading incorrect."); }

        virtual void callback_downloadSubborn(taf::Int32 ret,  const vector<taf::Char>& vb)
        { throw std::runtime_error("callback_downloadSubborn() overloading incorrect."); }
        virtual void callback_downloadSubborn_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_downloadSubborn_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PatchPrxCallback> PatchPrxCallbackPtr;

    /* proxy for client */
    class PatchProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 listFileInfo(const std::string & path,vector<taf::FileInfo> &vf,const map<string, string> &context = TAF_CONTEXT());
        void async_listFileInfo(PatchPrxCallbackPtr callback,const std::string & path,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 download(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,const map<string, string> &context = TAF_CONTEXT());
        void async_download(PatchPrxCallbackPtr callback,const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 listFileInfoSubborn(const std::string & path,vector<taf::FileInfo> &vf,const map<string, string> &context = TAF_CONTEXT());
        void async_listFileInfoSubborn(PatchPrxCallbackPtr callback,const std::string & path,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 downloadSubborn(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,const map<string, string> &context = TAF_CONTEXT());
        void async_downloadSubborn(PatchPrxCallbackPtr callback,const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());

        PatchProxy* taf_hash(int64_t key);
        PatchProxy* taf_set_timeout(int msecond);
        PatchProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<PatchProxy> PatchPrx;

    /* servant for server */
    class Patch : public taf::Servant
    {
    public:
        virtual ~Patch(){}
        virtual taf::Int32 listFileInfo(const std::string & path,vector<taf::FileInfo> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_listFileInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::FileInfo> &vf);

        virtual taf::Int32 download(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,taf::JceCurrentPtr current) = 0;
        static void async_response_download(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::Char> &vb);

        virtual taf::Int32 listFileInfoSubborn(const std::string & path,vector<taf::FileInfo> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_listFileInfoSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::FileInfo> &vf);

        virtual taf::Int32 downloadSubborn(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,taf::JceCurrentPtr current) = 0;
        static void async_response_downloadSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::Char> &vb);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define taf_FileInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.path,b.path);jce_copy_struct(a.size,b.size);jce_copy_struct(a.canExec,b.canExec);jce_copy_struct(a.md5,b.md5);



#endif
